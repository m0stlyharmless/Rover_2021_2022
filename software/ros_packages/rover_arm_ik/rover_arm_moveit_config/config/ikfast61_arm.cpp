/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-05-01 11:59:27.094306
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((9.9999999995e-6)*x6);
x13=((0.99999999995)*x6);
x14=((0.391671)*x3);
x15=((0.052628)*x1);
x16=((0.52362)*x1);
x17=((0.99999999995)*x7);
x18=((0.053575)*x0);
x19=((0.0691329999965433)*x6);
x20=((1.0)*x7);
x21=((0.0535749999973212)*x6);
x22=((1.0)*x8);
x23=((3.9e-7)*x0);
x24=((3.899999999805e-12)*x6);
x25=((1.0)*x9);
x26=((9.9999999995e-6)*x7);
x27=((6.91329999965433e-7)*x7);
x28=((5.35749999973212e-7)*x6);
x29=((3.9e-7)*x5);
x30=((1.92e-6)*x3);
x31=((-0.99999999995)*x6);
x32=((-1.0)*x8);
x33=(x2*x5);
x34=(x3*x4);
x35=(x1*x4);
x36=(x5*x7);
x37=((-9.9999999995e-6)*x6);
x38=(x1*x2);
x39=(x2*x3);
x40=(x0*x6);
x41=((-1.0)*x9);
x42=((-0.0535749999973212)*x7);
x43=(x0*x7);
x44=((-3.899999999805e-7)*x7);
x45=(x0*x2);
x46=(x5*x6);
x47=(x12*x5);
x48=(x0*x12);
x49=((3.9e-7)*x39);
x50=((((-1.0)*x38))+x34);
x51=((((0.99999999995)*x39))+(((0.99999999995)*x35)));
x52=((((9.9999999995e-6)*x39))+(((9.9999999995e-6)*x35)));
x53=((-1.0)*x51);
x54=(x0*(((((-1.0)*x34))+x38)));
x55=(x0*((x39+x35)));
x56=((((-1.0)*x1*x33))+((x34*x5)));
x57=(x53*x7);
x58=(x51*x6);
x59=(x52*x6);
x60=((9.9999999995e-6)*x56);
x61=((((-1.0)*x3*x33))+(((-1.0)*x35*x5)));
x62=(x56*x6);
x63=(x54*x6);
x64=(x17*x54);
x65=(x17*x56);
x66=(((x12*x56))+((x0*((x13+x26)))));
x67=(((x26*x54))+((x13*x54))+((x17*x5)));
x68=(((x25*((((x20*x53))+(((1.0)*x59))))))+(((-1.0)*x22*x50)));
x69=(((x32*x55))+((x41*((((x31*x5))+((x37*x54))+(((-9.9999999995e-6)*x36))+x64)))));
eerot[0]=(((x10*(((((-1.0)*x47))+x67))))+((x11*x69)));
eerot[1]=(((x8*((((x12*x54))+((x26*x5))+((x13*x5))+(((-1.0)*x64))))))+((x55*x9)));
eerot[2]=(((x11*((x47+(((-1.0)*x67))))))+((x10*x69)));
IkReal x70=((1.0)*x23);
IkReal x71=((1.0)*x54);
eetrans[0]=((0.14566)+(((-0.121760999996543)*x36))+(((-1.0)*x0*x30))+(((1.08132999996543e-6)*x46))+((x8*((((x21*x5))+(((5.35749999973212e-7)*x36))+((x42*x54))+((x28*x54))))))+((x0*x16))+(((0.391671)*x0*x35))+((x9*((((x18*x35))+((x18*x39))))))+((x14*x45))+(((-1.0)*x27*x71))+((x7*((((x23*x34))+(((-1.0)*x38*x70))))))+((x8*(((((-1.0)*x39*x70))+(((-1.0)*x35*x70))))))+((x9*((((x44*x54))+((x24*x54))+(((3.899999999805e-12)*x36))+(((3.899999999805e-7)*x46))))))+(((0.001538)*x5))+((x6*(((((-1.0)*x15*x45))+(((0.052628)*x0*x34))))))+(((-1.0)*x19*x71)));
eerot[3]=(((x11*((((x41*((((x37*x56))+(((-9.9999999995e-6)*x43))+x65+((x0*x31))))))+((x32*x61))))))+((x10*((((x26*x56))+(((-1.0)*x48))+((x13*x56))+((x0*x17)))))));
eerot[4]=(((x61*x9))+((x8*((x66+(((-1.0)*x65)))))));
eerot[5]=(((x11*(((((-9.9999999995e-6)*x56*x7))+x48+((x31*x56))+(((-0.99999999995)*x43))))))+(((-1.0)*x10*((((x25*((x65+(((-1.0)*x66))))))+((x22*x61)))))));
IkReal x72=(x35*x5);
IkReal x73=((1.0)*x56);
eetrans[1]=((-0.14314)+((x9*((((x44*x56))+((x24*x56))+(((3.899999999805e-12)*x43))+(((3.899999999805e-7)*x40))))))+(((1.08132999996543e-6)*x40))+((x8*((((x0*x21))+(((5.35749999973212e-7)*x43))+((x42*x56))+((x28*x56))))))+(((-0.391671)*x72))+((x30*x5))+((x6*(((((-0.052628)*x34*x5))+((x15*x33))))))+(((-1.0)*x16*x5))+(((-1.0)*x14*x33))+(((-1.0)*x27*x73))+((x8*((((x29*x35))+((x29*x39))))))+(((0.001538)*x0))+((x9*(((((-0.053575)*x72))+(((-0.053575)*x3*x33))))))+(((-1.0)*x19*x73))+(((-0.121760999996543)*x43))+((x7*((((x29*x38))+(((-1.0)*x29*x34)))))));
eerot[6]=(((x11*x68))+((x10*((x58+((x52*x7)))))));
eerot[7]=(((x50*x9))+((x8*((x59+x57)))));
eerot[8]=(((x11*(((((-1.0)*x20*x52))+(((-1.0)*x58))))))+((x10*x68)));
eetrans[2]=((0.196954)+((x8*(((((0.053575)*x59))+(((0.053575)*x57))))))+((x7*(((((-3.9e-7)*x35))+(((-1.0)*x49))))))+((x7*(((((-6.91329999965433e-7)*x39))+(((-6.91329999965433e-7)*x35))))))+(((0.52362)*x3))+(((1.92e-6)*x1))+((x8*(((((-3.9e-7)*x34))+(((3.9e-7)*x38))))))+((x14*x4))+(((-0.391671)*x38))+((x6*(((((-0.0691329999965433)*x35))+(((-0.0691329999965433)*x39))))))+((x9*(((((3.9e-7)*x57))+(((3.9e-7)*x59))))))+((x6*(((((-1.0)*x15*x4))+(((-0.052628)*x39))))))+((x9*(((((0.053575)*x34))+(((-0.053575)*x38)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r02);
new_r01=((-1.0)*r00);
new_r02=r01;
new_px=((-0.14566)+(((-0.053575)*r01))+px);
new_r10=((-1.0)*r12);
new_r11=((-1.0)*r10);
new_r12=r11;
new_py=((0.14314)+(((-0.053575)*r11))+py);
new_r20=((-1.0)*r22);
new_r21=((-1.0)*r20);
new_r22=r21;
new_pz=((-0.196954)+pz+(((-0.053575)*r21)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x74=((1.0)*px);
IkReal x75=((1.0)*pz);
IkReal x76=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x76))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x75)));
rxp0_2=((((-1.0)*r10*x74))+((py*r00)));
rxp1_0=((((-1.0)*r21*x76))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x75)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x74)));
rxp2_0=((((-1.0)*r22*x76))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x75)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x74)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x77=((1.27658162079909)*pp);
IkReal x78=((1.0)*npz);
IkReal x79=((6.47788577675687e-7)*npy);
IkReal x80=((0.310875709463475)*npx);
IkReal x81=((0.121761000001269)*r21);
IkReal x82=((2.53720000006814e-7)*r20);
IkReal x83=((1.0)*rxp2_2);
IkReal x84=((0.001538)*r12);
IkReal x85=((0.001538)*r02);
IkReal x86=((2.0)*npy);
IkReal x87=((6.95890173095205e-7)*npz);
IkReal x88=((2.0)*rxp1_2);
IkReal x89=((0.003076)*r11);
IkReal x90=((0.243522000002537)*r22);
IkReal x91=((0.003076)*r01);
IkReal x92=((0.006152)*r00);
IkReal x93=((0.006152)*r10);
IkReal x94=((4.0)*rxp0_2);
IkReal x95=((0.621751418926949)*npy);
IkReal x96=((1.34367875077089e-6)*npy);
IkReal x97=((0.243522000002537)*r20);
IkReal x98=((5.26279999993186e-7)*r20);
IkReal x99=((((1.29557715535137e-6)*npx))+(((-1.0)*x95)));
IkReal x100=((-4.0)*npx);
IkReal x101=((-0.003076)*r01);
IkReal x102=((((-1.0)*x95))+(((2.68735750154178e-6)*npx)));
IkReal x103=((-0.001538)*r02);
IkReal x104=(rxp2_2+x98);
IkReal x105=((-7.8e-7)+x87);
IkReal x106=((-0.135251724643021)+x77);
IkReal x107=(rxp2_2+x81);
IkReal x108=((((-5.07440000013628e-7)*r21))+(((-1.0)*x97)));
IkReal x109=(x105+(((-1.0)*x86)));
IkReal x110=((((1.05255999998637e-6)*r21))+x97);
IkReal x111=(x81+x84);
IkReal x112=(x89+x90);
IkReal x113=(x79+x80);
IkReal x114=(x80+x96);
IkReal x115=(x83+x81);
IkReal x116=(x82+x84);
IkReal x117=((-0.135251724642749)+npz+x77);
IkReal x118=(x105+x86);
IkReal x119=((((-1.0)*x114))+x117);
IkReal x120=((((-1.0)*x78))+x113+x106);
IkReal x121=((((-1.0)*x78))+(((-1.0)*x113))+x106);
IkReal x122=(x117+x114);
op[0]=x120;
op[1]=x120;
op[2]=x99;
op[3]=x99;
op[4]=x121;
op[5]=x121;
op[6]=((((-1.0)*x111))+x82+(((-1.0)*x83)));
op[7]=x85;
op[8]=x108;
op[9]=0;
op[10]=((((-1.0)*x116))+x81+(((-1.0)*x83)));
op[11]=x85;
op[12]=0;
op[13]=x120;
op[14]=0;
op[15]=x99;
op[16]=0;
op[17]=x121;
op[18]=x85;
op[19]=((((-1.0)*x115))+x116);
op[20]=0;
op[21]=x108;
op[22]=x85;
op[23]=(x111+(((-1.0)*x83))+(((-1.0)*x82)));
op[24]=x109;
op[25]=x109;
op[26]=x100;
op[27]=x100;
op[28]=x118;
op[29]=x118;
op[30]=(x90+(((-1.0)*x89))+(((-1.0)*x88)));
op[31]=x91;
op[32]=((((-1.0)*x93))+(((-1.0)*x94)));
op[33]=x92;
op[34]=(x112+x88);
op[35]=x101;
op[36]=0;
op[37]=x109;
op[38]=0;
op[39]=x100;
op[40]=0;
op[41]=x118;
op[42]=x91;
op[43]=(x112+(((-1.0)*x88)));
op[44]=x92;
op[45]=(x93+(((-1.0)*x94)));
op[46]=x101;
op[47]=(x88+x90+(((-1.0)*x89)));
op[48]=x122;
op[49]=x122;
op[50]=x102;
op[51]=x102;
op[52]=x119;
op[53]=x119;
op[54]=(x107+x84+(((-1.0)*x98)));
op[55]=x103;
op[56]=x110;
op[57]=0;
op[58]=(x104+x84+(((-1.0)*x81)));
op[59]=x103;
op[60]=0;
op[61]=x122;
op[62]=0;
op[63]=x102;
op[64]=0;
op[65]=x119;
op[66]=x103;
op[67]=(x107+(((-1.0)*x98))+(((-1.0)*x84)));
op[68]=0;
op[69]=x110;
op[70]=x103;
op[71]=((((-1.0)*x111))+x104);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x123=htj4*htj4;
CheckValue<IkReal> x124=IKPowWithIntegerCheck(((1.0)+x123),-1);
if(!x124.valid){
continue;
}
cj4array[numsolutions]=((x124.value)*(((1.0)+(((-1.0)*x123)))));
CheckValue<IkReal> x125=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x125.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x125.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x126=htj5*htj5;
CheckValue<IkReal> x127=IKPowWithIntegerCheck(((1.0)+x126),-1);
if(!x127.valid){
continue;
}
cj5array[numsolutions]=((x127.value)*(((1.0)+(((-1.0)*x126)))));
CheckValue<IkReal> x128=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x128.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x128.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x129=htj0*htj0;
CheckValue<IkReal> x130=IKPowWithIntegerCheck(((1.0)+x129),-1);
if(!x130.valid){
continue;
}
cj0array[numsolutions]=((x130.value)*(((1.0)+(((-1.0)*x129)))));
CheckValue<IkReal> x131=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x131.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x131.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x132=((100000.000005)*cj0);
IkReal x133=(r22*sj4);
IkReal x134=(cj4*r20);
IkReal x135=((10000000000.5)*cj0);
IkReal x136=(cj0*cj5*r20);
IkReal x137=(cj4*cj5*r21);
IkReal x138=(sj5*x135);
IkReal x139=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x139;
j3eval[1]=IKsign(x139);
j3eval[2]=((IKabs(((((-1.0)*x135*x137))+((r21*sj5*x132))+(((-1.0)*x134*x138))+((x133*x135))+(((-1.0)*cj5*r20*x132)))))+(IKabs((((r21*x138))+((sj5*x132*x134))+(((-1.0)*x132*x133))+((x132*x137))+(((-1.0)*cj5*r20*x135))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x140=((10000000000.5)*sj0);
IkReal x141=(r21*sj5);
IkReal x142=(r22*sj4);
IkReal x143=((1.0)*sj4);
IkReal x144=(cj4*r21);
IkReal x145=((100000.000005)*sj0);
IkReal x146=(cj5*x145);
IkReal x147=(cj4*r20*sj5);
IkReal x148=((((-1.0)*cj4*r02))+(((-1.0)*cj5*r01*x143))+(((-1.0)*r00*sj5*x143)));
j3eval[0]=x148;
j3eval[1]=IKsign(x148);
j3eval[2]=((IKabs((((x140*x141))+(((-1.0)*x142*x145))+((x144*x146))+((x145*x147))+(((-1.0)*cj5*r20*x140)))))+(IKabs((((x140*x142))+(((-1.0)*x140*x147))+((x141*x145))+(((-1.0)*cj5*x140*x144))+(((-1.0)*r20*x146))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x149=((1.0)*sj4);
IkReal x150=((((-1.0)*r20*sj5*x149))+(((-1.0)*cj5*r21*x149))+(((-1.0)*cj4*r22)));
j3eval[0]=x150;
j3eval[1]=IKsign(x150);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x151=((100000.000005)*sj5);
IkReal x152=(r22*sj4);
IkReal x153=(cj4*r20);
IkReal x154=((10000000000.5)*sj5);
IkReal x155=(cj5*r20);
IkReal x156=(cj4*cj5*r21);
IkReal x157=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x157;
j3eval[1]=IKsign(x157);
j3eval[2]=((IKabs(((((-100000.000005)*x155))+(((-1.0)*x153*x154))+(((-10000000000.5)*x156))+(((10000000000.5)*x152))+((r21*x151)))))+(IKabs(((((-100000.000005)*x152))+((x151*x153))+(((100000.000005)*x156))+(((-10000000000.5)*x155))+((r21*x154))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x158=((1.0)*sj4);
IkReal x159=(r11*sj5);
IkReal x160=((10000000000.5)*cj4);
IkReal x161=(cj5*r11);
IkReal x162=(r10*sj5);
IkReal x163=((100000.000005)*cj4);
IkReal x164=(r12*sj4);
IkReal x165=(cj5*r10);
IkReal x166=((((-1.0)*r20*sj5*x158))+(((-1.0)*cj5*r21*x158))+(((-1.0)*cj4*r22)));
j3eval[0]=x166;
j3eval[1]=IKsign(x166);
j3eval[2]=((IKabs(((((-100000.000005)*x165))+(((-1.0)*x160*x162))+(((-1.0)*x160*x161))+(((100000.000005)*x159))+(((10000000000.5)*x164)))))+(IKabs((((x161*x163))+(((-100000.000005)*x164))+((x162*x163))+(((-10000000000.5)*x165))+(((10000000000.5)*x159))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x167=cj4*cj4;
IkReal x168=r00*r00;
IkReal x169=cj5*cj5;
IkReal x170=r01*r01;
IkReal x171=r02*r02;
IkReal x172=(r00*sj5);
IkReal x173=((10000000000.5)*cj4);
IkReal x174=(r01*sj5);
IkReal x175=((100000.000005)*cj4);
IkReal x176=(cj5*r01);
IkReal x177=(r02*sj4);
IkReal x178=(cj5*r00);
IkReal x179=((2.0)*x176);
IkReal x180=(cj4*x177);
IkReal x181=((1.0)*x169);
IkReal x182=(x167*x168);
IkReal x183=(((x167*x172*x179))+((x168*x169))+((x167*x169*x170))+x171+x170+x182+(((-1.0)*x170*x181))+(((-1.0)*x167*x171))+(((-1.0)*x179*x180))+(((-2.0)*x172*x180))+(((-1.0)*x172*x179))+(((-1.0)*x181*x182)));
j3eval[0]=x183;
j3eval[1]=IKsign(x183);
j3eval[2]=((IKabs(((((-100000.000005)*x178))+(((100000.000005)*x174))+(((10000000000.5)*x177))+(((-1.0)*x172*x173))+(((-1.0)*x173*x176)))))+(IKabs(((((-1.0)*x175*x176))+(((-10000000000.5)*x174))+(((100000.000005)*x177))+(((10000000000.5)*x178))+(((-1.0)*x172*x175))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x184=cj4*cj4;
IkReal x185=r00*r00;
IkReal x186=cj5*cj5;
IkReal x187=r01*r01;
IkReal x188=r02*r02;
IkReal x189=(r02*sj4);
IkReal x190=((0.99999999995)*r00);
IkReal x191=(cj4*sj5);
IkReal x192=((9.9999999995e-6)*r00);
IkReal x193=((2.0)*r00);
IkReal x194=(r01*sj5);
IkReal x195=(cj4*cj5*r01);
IkReal x196=((1.0)*x184);
IkReal x197=(x185*x186);
IkReal x198=(x186*x187);
CheckValue<IkReal> x199=IKPowWithIntegerCheck(IKsign(((((-1.0)*x196*x197))+(((-1.0)*x188*x196))+(((-1.0)*x198))+((x184*x198))+x197+x187+x188+((x184*x185))+(((-1.0)*cj5*x193*x194))+((cj5*x184*x193*x194))+(((-1.0)*x189*x191*x193))+(((-2.0)*x189*x195)))),-1);
if(!x199.valid){
continue;
}
CheckValue<IkReal> x200 = IKatan2WithCheck(IkReal(((((0.99999999995)*x189))+(((9.9999999995e-6)*x194))+(((-1.0)*cj5*x192))+(((-0.99999999995)*x195))+(((-1.0)*x190*x191)))),IkReal((((cj5*x190))+(((-9.9999999995e-6)*x195))+(((-1.0)*x191*x192))+(((9.9999999995e-6)*x189))+(((-0.99999999995)*x194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x200.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x199.value)))+(x200.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x201=IKcos(j3);
IkReal x202=IKsin(j3);
IkReal x203=(r10*sj5);
IkReal x204=(cj5*r01);
IkReal x205=(cj5*r00);
IkReal x206=(r22*sj4);
IkReal x207=(cj5*r10);
IkReal x208=(r02*sj4);
IkReal x209=(r11*sj5);
IkReal x210=(cj5*r20);
IkReal x211=(cj5*r21);
IkReal x212=(cj4*sj5);
IkReal x213=(r12*sj4);
IkReal x214=(r01*sj5);
IkReal x215=(r21*sj5);
IkReal x216=(cj5*r11);
IkReal x217=((0.99999999995)*x202);
IkReal x218=((9.9999999995e-6)*x202);
IkReal x219=((9.9999999995e-6)*x201);
IkReal x220=((0.99999999995)*x201);
IkReal x221=(cj4*x219);
evalcond[0]=(((x210*x218))+((x215*x220))+(((-1.0)*x206*x217))+(((-1.0)*x206*x219))+((r20*x212*x217))+((r20*x212*x219))+((cj4*x211*x217))+(((-1.0)*x215*x218))+((x211*x221))+(((-1.0)*x210*x220)));
evalcond[1]=(((cj4*x203*x217))+(((-1.0)*x207*x220))+((x216*x221))+((x209*x220))+((x207*x218))+((x203*x221))+((cj4*x216*x217))+(((-1.0)*x213*x219))+(((-1.0)*x213*x217))+(((-1.0)*x209*x218)));
evalcond[2]=((((-1.0)*cj4*x204*x220))+((x214*x219))+((x214*x217))+((x208*x220))+((cj4*x204*x218))+(((-1.0)*r00*x212*x220))+(((-1.0)*x205*x217))+(((-1.0)*x205*x219))+((r00*x212*x218))+(((-1.0)*x208*x218)));
evalcond[3]=((1.0)+(((-1.0)*x205*x220))+((cj4*x204*x217))+((x214*x220))+((x205*x218))+((x204*x221))+((r00*x212*x219))+((r00*x212*x217))+(((-1.0)*x214*x218))+(((-1.0)*x208*x217))+(((-1.0)*x208*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x222=(r22*sj4);
IkReal x223=((0.232536954279117)*cj5);
IkReal x224=((9.54335107914695e-13)*cj4);
IkReal x225=(cj5*r21);
IkReal x226=(cj4*r22);
IkReal x227=(cj4*r12);
IkReal x228=(r10*sj5);
IkReal x229=((2.60265077711611e-7)*cj4);
IkReal x230=(r21*sj5);
IkReal x231=(r11*sj5);
IkReal x232=(cj5*r11);
IkReal x233=((8.52662144715453e-7)*cj5);
IkReal x234=((0.748006187683308)*sj4);
IkReal x235=(r20*sj5);
IkReal x236=((2.74277506655963e-6)*sj4);
IkReal x237=(r12*sj4);
if( IKabs(((((-1.0)*x225*x236))+((x229*x232))+(((9.54335107914695e-13)*x222))+(((-2.74277506655963e-6)*x226))+(((-1.0)*x224*x235))+(((-1.0)*x224*x225))+(((-1.0)*x235*x236))+((x232*x234))+((x228*x234))+((x228*x229))+(((2.73107346716569e-12)*x235))+(((-7.44814942123594e-7)*x232))+(((0.748006187683308)*x227))+(((0.232536954279117)*x231))+((r20*x233))+(((-2.60265077711611e-7)*x237))+(((-8.52662144715453e-7)*x230))+(((-1.0)*r10*x223))+(((2.73107346716569e-12)*x225))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))+(((-7.44814942123594e-7)*x228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x225*x234))+((r20*x223))+(((-2.74277506655963e-6)*x227))+(((-1.0)*x224*x232))+(((-1.0)*x224*x228))+(((7.44814942123594e-7)*x225))+(((2.60265077711611e-7)*x222))+(((-1.0)*x225*x229))+(((-0.232536954279117)*x230))+(((2.73107346716569e-12)*x232))+(((9.54335107914695e-13)*x237))+((r10*x233))+(((7.44814942123594e-7)*x235))+(((-0.748006187683308)*x226))+(((1.90978190288101)*pz))+(((-1.0)*x234*x235))+(((-1.0)*x229*x235))+(((-8.52662144715453e-7)*x231))+(((-1.0)*x232*x236))+(((-1.0)*x228*x236))+(((2.73107346716569e-12)*x228))+(((7.00275247991204e-6)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x225*x236))+((x229*x232))+(((9.54335107914695e-13)*x222))+(((-2.74277506655963e-6)*x226))+(((-1.0)*x224*x235))+(((-1.0)*x224*x225))+(((-1.0)*x235*x236))+((x232*x234))+((x228*x234))+((x228*x229))+(((2.73107346716569e-12)*x235))+(((-7.44814942123594e-7)*x232))+(((0.748006187683308)*x227))+(((0.232536954279117)*x231))+((r20*x233))+(((-2.60265077711611e-7)*x237))+(((-8.52662144715453e-7)*x230))+(((-1.0)*r10*x223))+(((2.73107346716569e-12)*x225))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))+(((-7.44814942123594e-7)*x228))))+IKsqr(((((-1.0)*x225*x234))+((r20*x223))+(((-2.74277506655963e-6)*x227))+(((-1.0)*x224*x232))+(((-1.0)*x224*x228))+(((7.44814942123594e-7)*x225))+(((2.60265077711611e-7)*x222))+(((-1.0)*x225*x229))+(((-0.232536954279117)*x230))+(((2.73107346716569e-12)*x232))+(((9.54335107914695e-13)*x237))+((r10*x233))+(((7.44814942123594e-7)*x235))+(((-0.748006187683308)*x226))+(((1.90978190288101)*pz))+(((-1.0)*x234*x235))+(((-1.0)*x229*x235))+(((-8.52662144715453e-7)*x231))+(((-1.0)*x232*x236))+(((-1.0)*x228*x236))+(((2.73107346716569e-12)*x228))+(((7.00275247991204e-6)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x225*x236))+((x229*x232))+(((9.54335107914695e-13)*x222))+(((-2.74277506655963e-6)*x226))+(((-1.0)*x224*x235))+(((-1.0)*x224*x225))+(((-1.0)*x235*x236))+((x232*x234))+((x228*x234))+((x228*x229))+(((2.73107346716569e-12)*x235))+(((-7.44814942123594e-7)*x232))+(((0.748006187683308)*x227))+(((0.232536954279117)*x231))+((r20*x233))+(((-2.60265077711611e-7)*x237))+(((-8.52662144715453e-7)*x230))+(((-1.0)*r10*x223))+(((2.73107346716569e-12)*x225))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))+(((-7.44814942123594e-7)*x228))), ((((-1.0)*x225*x234))+((r20*x223))+(((-2.74277506655963e-6)*x227))+(((-1.0)*x224*x232))+(((-1.0)*x224*x228))+(((7.44814942123594e-7)*x225))+(((2.60265077711611e-7)*x222))+(((-1.0)*x225*x229))+(((-0.232536954279117)*x230))+(((2.73107346716569e-12)*x232))+(((9.54335107914695e-13)*x237))+((r10*x233))+(((7.44814942123594e-7)*x235))+(((-0.748006187683308)*x226))+(((1.90978190288101)*pz))+(((-1.0)*x234*x235))+(((-1.0)*x229*x235))+(((-8.52662144715453e-7)*x231))+(((-1.0)*x232*x236))+(((-1.0)*x228*x236))+(((2.73107346716569e-12)*x228))+(((7.00275247991204e-6)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x238=IKsin(j1);
IkReal x239=IKcos(j1);
IkReal x240=((1.0)*py);
IkReal x241=(cj5*r10);
IkReal x242=((3.91670999980416e-6)*sj3);
IkReal x243=(r12*sj4);
IkReal x244=(r20*sj5);
IkReal x245=((0.391671)*sj4);
IkReal x246=((0.391670999980416)*sj3);
IkReal x247=((3.91670999980416e-6)*cj3);
IkReal x248=(cj5*r20);
IkReal x249=((1.36279999993186e-7)*cj4);
IkReal x250=(cj5*r11);
IkReal x251=(r21*sj5);
IkReal x252=(cj5*r21);
IkReal x253=(r22*sj4);
IkReal x254=(r10*sj5);
IkReal x255=(r11*sj5);
IkReal x256=((0.391671)*cj4);
IkReal x257=((0.391670999980416)*cj3);
IkReal x258=((3.9e-7)*x252);
IkReal x259=((3.9e-7)*x244);
IkReal x260=((1.36279999993186e-7)*x253);
IkReal x261=((0.121761000001269)*x248);
IkReal x262=((1.92e-6)*x238);
IkReal x263=((0.121761000001269)*x251);
IkReal x264=((0.52362)*x239);
IkReal x265=((0.121761000001269)*x255);
IkReal x266=((1.92e-6)*x239);
IkReal x267=((1.36279999993186e-7)*x243);
IkReal x268=((3.9e-7)*x254);
IkReal x269=((0.121761000001269)*x241);
IkReal x270=((0.52362)*x238);
IkReal x271=((3.9e-7)*x250);
IkReal x272=(cj4*x257);
IkReal x273=(x244*x249);
IkReal x274=(x249*x252);
IkReal x275=(x249*x254);
IkReal x276=(x249*x250);
IkReal x277=(x258+x259+x261+x260);
IkReal x278=(x265+x266+x276+x275);
IkReal x279=(x264+x263+x262+x274+x273);
IkReal x280=(x267+x269+x268+x270+x271+x240);
evalcond[0]=(((x245*x250))+((x245*x254))+((r12*x256))+x278+(((-1.0)*x280)));
evalcond[1]=(((x245*x252))+((x244*x245))+(((-1.0)*pz))+x279+(((-1.0)*x277))+((r22*x256)));
evalcond[2]=(((x246*x255))+(((-1.0)*x242*x243))+((cj4*x242*x254))+((cj4*x242*x250))+((x243*x257))+(((-1.0)*x250*x272))+(((-1.0)*x241*x246))+(((-1.0)*x241*x247))+x277+pz+(((-1.0)*x279))+(((-1.0)*x254*x272))+((x247*x255)));
evalcond[3]=(((x246*x251))+(((-1.0)*x242*x253))+((cj4*x242*x244))+((cj4*x242*x252))+x278+((x253*x257))+(((-1.0)*x252*x272))+(((-1.0)*x280))+(((-1.0)*x246*x248))+(((-1.0)*x247*x248))+(((-1.0)*x244*x272))+((x247*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x281=((1.0)*sj1);
IkReal x282=(sj4*sj5);
IkReal x283=(cj4*r22);
IkReal x284=(cj4*r12);
IkReal x285=((1.0)*cj1);
IkReal x286=(cj5*r21*sj4);
IkReal x287=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r20*x281*x282))+(((-1.0)*x281*x283))+(((-1.0)*x281*x286))+(((-1.0)*x284*x285))+(((-1.0)*x285*x287))+(((-1.0)*r10*x282*x285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x281*x282))+((cj1*r20*x282))+(((-1.0)*x281*x284))+(((-1.0)*x281*x287))+((cj1*x286))+((cj1*x283)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x281*x282))+(((-1.0)*x281*x283))+(((-1.0)*x281*x286))+(((-1.0)*x284*x285))+(((-1.0)*x285*x287))+(((-1.0)*r10*x282*x285))))+IKsqr(((((-1.0)*r10*x281*x282))+((cj1*r20*x282))+(((-1.0)*x281*x284))+(((-1.0)*x281*x287))+((cj1*x286))+((cj1*x283))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x281*x282))+(((-1.0)*x281*x283))+(((-1.0)*x281*x286))+(((-1.0)*x284*x285))+(((-1.0)*x285*x287))+(((-1.0)*r10*x282*x285))), ((((-1.0)*r10*x281*x282))+((cj1*r20*x282))+(((-1.0)*x281*x284))+(((-1.0)*x281*x287))+((cj1*x286))+((cj1*x283))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x288=IKcos(j2);
IkReal x289=IKsin(j2);
IkReal x290=(r22*sj4);
IkReal x291=(cj5*r10);
IkReal x292=((0.99999999995)*cj3);
IkReal x293=((9.9999999995e-6)*sj3);
IkReal x294=((1.36279999993186e-7)*cj4);
IkReal x295=(cj5*r11);
IkReal x296=(cj5*r21);
IkReal x297=(r10*sj5);
IkReal x298=((1.0)*sj4);
IkReal x299=((1.0)*sj1);
IkReal x300=((9.9999999995e-6)*cj3);
IkReal x301=(cj5*r20);
IkReal x302=(r20*sj5);
IkReal x303=((1.0)*cj4);
IkReal x304=((0.99999999995)*sj3);
IkReal x305=((0.391671)*sj1);
IkReal x306=((0.121761000001269)*sj5);
IkReal x307=(r11*sj5);
IkReal x308=(r12*sj4);
IkReal x309=(r21*sj5);
IkReal x310=(cj1*x288);
IkReal x311=(cj1*x289);
IkReal x312=(cj4*x302);
IkReal x313=(x289*x299);
evalcond[0]=((((-1.0)*r22*x303))+(((-1.0)*x298*x302))+(((-1.0)*x296*x298))+x310+(((-1.0)*x313)));
evalcond[1]=((((-1.0)*x297*x298))+(((-1.0)*x295*x298))+(((-1.0)*x288*x299))+(((-1.0)*x311))+(((-1.0)*r12*x303)));
evalcond[2]=(((r21*x306))+(((-0.121761000001269)*x301))+((x294*x302))+(((1.92e-6)*sj1))+(((0.391671)*x310))+(((-1.0)*pz))+(((-3.9e-7)*x296))+(((-1.36279999993186e-7)*x290))+(((-3.9e-7)*x302))+(((0.52362)*cj1))+((x294*x296))+(((-1.0)*x289*x305)));
evalcond[3]=((((-1.36279999993186e-7)*x308))+(((1.92e-6)*cj1))+((r11*x306))+(((-0.391671)*x311))+(((-1.0)*x288*x305))+(((-1.0)*py))+(((-3.9e-7)*x297))+(((-3.9e-7)*x295))+(((-0.121761000001269)*x291))+(((-0.52362)*sj1))+((x294*x295))+((x294*x297)));
evalcond[4]=((((-1.0)*x301*x304))+((x290*x292))+((x293*x312))+(((-1.0)*x290*x293))+(((-1.0)*x292*x312))+(((-1.0)*cj4*x292*x296))+x311+((x304*x309))+((cj4*x293*x296))+((x300*x309))+(((-1.0)*x300*x301))+((sj1*x288)));
evalcond[5]=((((-1.0)*cj4*x292*x297))+(((-1.0)*cj4*x292*x295))+((x292*x308))+x310+(((-1.0)*x313))+(((-1.0)*x293*x308))+((x304*x307))+((cj4*x293*x295))+((cj4*x293*x297))+((x300*x307))+(((-1.0)*x291*x300))+(((-1.0)*x291*x304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x314=((1.0)*sj4);
IkReal x315=((9.9999999995e-6)*cj5);
IkReal x316=(cj4*r11);
IkReal x317=(r12*sj4);
IkReal x318=((0.99999999995)*r10);
IkReal x319=(cj4*sj5);
IkReal x320=(r11*sj5);
CheckValue<IkReal> x321 = IKatan2WithCheck(IkReal(((((0.99999999995)*x320))+((x315*x316))+(((-1.0)*cj5*x318))+(((-9.9999999995e-6)*x317))+(((9.9999999995e-6)*r10*x319)))),IkReal(((((0.99999999995)*x317))+(((-1.0)*x318*x319))+(((9.9999999995e-6)*x320))+(((-1.0)*r10*x315))+(((-0.99999999995)*cj5*x316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x321.valid){
continue;
}
CheckValue<IkReal> x322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x314))+(((-1.0)*cj5*r21*x314))+(((-1.0)*cj4*r22)))),-1);
if(!x322.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x321.value)+(((1.5707963267949)*(x322.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x323=IKcos(j3);
IkReal x324=IKsin(j3);
IkReal x325=(r10*sj5);
IkReal x326=(cj5*r01);
IkReal x327=(cj5*r00);
IkReal x328=(r22*sj4);
IkReal x329=(cj5*r10);
IkReal x330=(r02*sj4);
IkReal x331=(r11*sj5);
IkReal x332=(cj5*r20);
IkReal x333=(cj5*r21);
IkReal x334=(cj4*sj5);
IkReal x335=(r12*sj4);
IkReal x336=(r01*sj5);
IkReal x337=(r21*sj5);
IkReal x338=(cj5*r11);
IkReal x339=((0.99999999995)*x324);
IkReal x340=((9.9999999995e-6)*x324);
IkReal x341=((9.9999999995e-6)*x323);
IkReal x342=((0.99999999995)*x323);
IkReal x343=(cj4*x341);
evalcond[0]=(((x337*x342))+(((-1.0)*x337*x340))+(((-1.0)*x328*x339))+(((-1.0)*x332*x342))+((x333*x343))+((x332*x340))+((r20*x334*x341))+((r20*x334*x339))+((cj4*x333*x339))+(((-1.0)*x328*x341)));
evalcond[1]=((((-1.0)*x335*x341))+((x325*x343))+(((-1.0)*x331*x340))+((x329*x340))+((cj4*x325*x339))+((x331*x342))+((cj4*x338*x339))+((x338*x343))+(((-1.0)*x329*x342))+(((-1.0)*x335*x339)));
evalcond[2]=((((-1.0)*x330*x340))+((x336*x341))+((x336*x339))+(((-1.0)*cj4*x326*x342))+((cj4*x326*x340))+(((-1.0)*x327*x341))+(((-1.0)*x327*x339))+((r00*x334*x340))+((x330*x342))+(((-1.0)*r00*x334*x342)));
evalcond[3]=((1.0)+((x327*x340))+(((-1.0)*x330*x341))+((x336*x342))+((x326*x343))+(((-1.0)*x336*x340))+((cj4*x326*x339))+(((-1.0)*x327*x342))+((r00*x334*x339))+(((-1.0)*x330*x339))+((r00*x334*x341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x344=(r22*sj4);
IkReal x345=((0.232536954279117)*cj5);
IkReal x346=((9.54335107914695e-13)*cj4);
IkReal x347=(cj5*r21);
IkReal x348=(cj4*r22);
IkReal x349=(cj4*r12);
IkReal x350=(r10*sj5);
IkReal x351=((2.60265077711611e-7)*cj4);
IkReal x352=(r21*sj5);
IkReal x353=(r11*sj5);
IkReal x354=(cj5*r11);
IkReal x355=((8.52662144715453e-7)*cj5);
IkReal x356=((0.748006187683308)*sj4);
IkReal x357=(r20*sj5);
IkReal x358=((2.74277506655963e-6)*sj4);
IkReal x359=(r12*sj4);
if( IKabs(((((0.232536954279117)*x353))+(((-8.52662144715453e-7)*x352))+(((-2.74277506655963e-6)*x348))+(((-1.0)*x357*x358))+(((-7.44814942123594e-7)*x350))+(((-7.44814942123594e-7)*x354))+(((2.73107346716569e-12)*x347))+(((2.73107346716569e-12)*x357))+(((-1.0)*x346*x357))+((x351*x354))+((x354*x356))+(((-1.0)*x347*x358))+((x350*x356))+((x350*x351))+(((-1.0)*x346*x347))+(((9.54335107914695e-13)*x344))+(((-1.0)*r10*x345))+(((0.748006187683308)*x349))+(((-2.60265077711611e-7)*x359))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))+((r20*x355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((9.54335107914695e-13)*x359))+(((-8.52662144715453e-7)*x353))+(((-2.74277506655963e-6)*x349))+(((-1.0)*x356*x357))+(((2.73107346716569e-12)*x354))+(((2.73107346716569e-12)*x350))+(((-1.0)*x346*x354))+(((-1.0)*x346*x350))+(((7.44814942123594e-7)*x347))+((r10*x355))+((r20*x345))+(((1.90978190288101)*pz))+(((2.60265077711611e-7)*x344))+(((-1.0)*x347*x351))+(((-1.0)*x347*x356))+(((-0.232536954279117)*x352))+(((-1.0)*x351*x357))+(((-1.0)*x354*x358))+(((-0.748006187683308)*x348))+(((7.00275247991204e-6)*py))+(((-1.0)*x350*x358))+(((7.44814942123594e-7)*x357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.232536954279117)*x353))+(((-8.52662144715453e-7)*x352))+(((-2.74277506655963e-6)*x348))+(((-1.0)*x357*x358))+(((-7.44814942123594e-7)*x350))+(((-7.44814942123594e-7)*x354))+(((2.73107346716569e-12)*x347))+(((2.73107346716569e-12)*x357))+(((-1.0)*x346*x357))+((x351*x354))+((x354*x356))+(((-1.0)*x347*x358))+((x350*x356))+((x350*x351))+(((-1.0)*x346*x347))+(((9.54335107914695e-13)*x344))+(((-1.0)*r10*x345))+(((0.748006187683308)*x349))+(((-2.60265077711611e-7)*x359))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))+((r20*x355))))+IKsqr(((((9.54335107914695e-13)*x359))+(((-8.52662144715453e-7)*x353))+(((-2.74277506655963e-6)*x349))+(((-1.0)*x356*x357))+(((2.73107346716569e-12)*x354))+(((2.73107346716569e-12)*x350))+(((-1.0)*x346*x354))+(((-1.0)*x346*x350))+(((7.44814942123594e-7)*x347))+((r10*x355))+((r20*x345))+(((1.90978190288101)*pz))+(((2.60265077711611e-7)*x344))+(((-1.0)*x347*x351))+(((-1.0)*x347*x356))+(((-0.232536954279117)*x352))+(((-1.0)*x351*x357))+(((-1.0)*x354*x358))+(((-0.748006187683308)*x348))+(((7.00275247991204e-6)*py))+(((-1.0)*x350*x358))+(((7.44814942123594e-7)*x357))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.232536954279117)*x353))+(((-8.52662144715453e-7)*x352))+(((-2.74277506655963e-6)*x348))+(((-1.0)*x357*x358))+(((-7.44814942123594e-7)*x350))+(((-7.44814942123594e-7)*x354))+(((2.73107346716569e-12)*x347))+(((2.73107346716569e-12)*x357))+(((-1.0)*x346*x357))+((x351*x354))+((x354*x356))+(((-1.0)*x347*x358))+((x350*x356))+((x350*x351))+(((-1.0)*x346*x347))+(((9.54335107914695e-13)*x344))+(((-1.0)*r10*x345))+(((0.748006187683308)*x349))+(((-2.60265077711611e-7)*x359))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))+((r20*x355))), ((((9.54335107914695e-13)*x359))+(((-8.52662144715453e-7)*x353))+(((-2.74277506655963e-6)*x349))+(((-1.0)*x356*x357))+(((2.73107346716569e-12)*x354))+(((2.73107346716569e-12)*x350))+(((-1.0)*x346*x354))+(((-1.0)*x346*x350))+(((7.44814942123594e-7)*x347))+((r10*x355))+((r20*x345))+(((1.90978190288101)*pz))+(((2.60265077711611e-7)*x344))+(((-1.0)*x347*x351))+(((-1.0)*x347*x356))+(((-0.232536954279117)*x352))+(((-1.0)*x351*x357))+(((-1.0)*x354*x358))+(((-0.748006187683308)*x348))+(((7.00275247991204e-6)*py))+(((-1.0)*x350*x358))+(((7.44814942123594e-7)*x357))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x360=IKsin(j1);
IkReal x361=IKcos(j1);
IkReal x362=((1.0)*py);
IkReal x363=(cj5*r10);
IkReal x364=((3.91670999980416e-6)*sj3);
IkReal x365=(r12*sj4);
IkReal x366=(r20*sj5);
IkReal x367=((0.391671)*sj4);
IkReal x368=((0.391670999980416)*sj3);
IkReal x369=((3.91670999980416e-6)*cj3);
IkReal x370=(cj5*r20);
IkReal x371=((1.36279999993186e-7)*cj4);
IkReal x372=(cj5*r11);
IkReal x373=(r21*sj5);
IkReal x374=(cj5*r21);
IkReal x375=(r22*sj4);
IkReal x376=(r10*sj5);
IkReal x377=(r11*sj5);
IkReal x378=((0.391671)*cj4);
IkReal x379=((0.391670999980416)*cj3);
IkReal x380=((3.9e-7)*x374);
IkReal x381=((3.9e-7)*x366);
IkReal x382=((1.36279999993186e-7)*x375);
IkReal x383=((0.121761000001269)*x370);
IkReal x384=((1.92e-6)*x360);
IkReal x385=((0.121761000001269)*x373);
IkReal x386=((0.52362)*x361);
IkReal x387=((0.121761000001269)*x377);
IkReal x388=((1.92e-6)*x361);
IkReal x389=((1.36279999993186e-7)*x365);
IkReal x390=((3.9e-7)*x376);
IkReal x391=((0.121761000001269)*x363);
IkReal x392=((0.52362)*x360);
IkReal x393=((3.9e-7)*x372);
IkReal x394=(cj4*x379);
IkReal x395=(x366*x371);
IkReal x396=(x371*x374);
IkReal x397=(x371*x376);
IkReal x398=(x371*x372);
IkReal x399=(x382+x383+x380+x381);
IkReal x400=(x387+x388+x397+x398);
IkReal x401=(x386+x384+x385+x395+x396);
IkReal x402=(x389+x362+x391+x390+x393+x392);
evalcond[0]=(((x367*x372))+((x367*x376))+((r12*x378))+x400+(((-1.0)*x402)));
evalcond[1]=(((x367*x374))+(((-1.0)*x399))+((x366*x367))+(((-1.0)*pz))+x401+((r22*x378)));
evalcond[2]=((((-1.0)*x363*x369))+(((-1.0)*x363*x368))+((x369*x377))+(((-1.0)*x372*x394))+((x365*x379))+((cj4*x364*x372))+((cj4*x364*x376))+x399+pz+(((-1.0)*x364*x365))+((x368*x377))+(((-1.0)*x376*x394))+(((-1.0)*x401)));
evalcond[3]=((((-1.0)*x368*x370))+((x375*x379))+((x369*x373))+((cj4*x364*x374))+((cj4*x364*x366))+x400+(((-1.0)*x366*x394))+(((-1.0)*x374*x394))+(((-1.0)*x369*x370))+(((-1.0)*x364*x375))+((x368*x373))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x403=((1.0)*sj1);
IkReal x404=(sj4*sj5);
IkReal x405=(cj4*r22);
IkReal x406=(cj4*r12);
IkReal x407=((1.0)*cj1);
IkReal x408=(cj5*r21*sj4);
IkReal x409=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x406*x407))+(((-1.0)*r10*x404*x407))+(((-1.0)*r20*x403*x404))+(((-1.0)*x403*x405))+(((-1.0)*x403*x408))+(((-1.0)*x407*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x404))+(((-1.0)*x403*x406))+(((-1.0)*x403*x409))+((cj1*x405))+((cj1*x408))+(((-1.0)*r10*x403*x404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x406*x407))+(((-1.0)*r10*x404*x407))+(((-1.0)*r20*x403*x404))+(((-1.0)*x403*x405))+(((-1.0)*x403*x408))+(((-1.0)*x407*x409))))+IKsqr((((cj1*r20*x404))+(((-1.0)*x403*x406))+(((-1.0)*x403*x409))+((cj1*x405))+((cj1*x408))+(((-1.0)*r10*x403*x404))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x406*x407))+(((-1.0)*r10*x404*x407))+(((-1.0)*r20*x403*x404))+(((-1.0)*x403*x405))+(((-1.0)*x403*x408))+(((-1.0)*x407*x409))), (((cj1*r20*x404))+(((-1.0)*x403*x406))+(((-1.0)*x403*x409))+((cj1*x405))+((cj1*x408))+(((-1.0)*r10*x403*x404))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x410=IKcos(j2);
IkReal x411=IKsin(j2);
IkReal x412=(r22*sj4);
IkReal x413=(cj5*r10);
IkReal x414=((0.99999999995)*cj3);
IkReal x415=((9.9999999995e-6)*sj3);
IkReal x416=((1.36279999993186e-7)*cj4);
IkReal x417=(cj5*r11);
IkReal x418=(cj5*r21);
IkReal x419=(r10*sj5);
IkReal x420=((1.0)*sj4);
IkReal x421=((1.0)*sj1);
IkReal x422=((9.9999999995e-6)*cj3);
IkReal x423=(cj5*r20);
IkReal x424=(r20*sj5);
IkReal x425=((1.0)*cj4);
IkReal x426=((0.99999999995)*sj3);
IkReal x427=((0.391671)*sj1);
IkReal x428=((0.121761000001269)*sj5);
IkReal x429=(r11*sj5);
IkReal x430=(r12*sj4);
IkReal x431=(r21*sj5);
IkReal x432=(cj1*x410);
IkReal x433=(cj1*x411);
IkReal x434=(cj4*x424);
IkReal x435=(x411*x421);
evalcond[0]=((((-1.0)*x435))+(((-1.0)*x420*x424))+x432+(((-1.0)*x418*x420))+(((-1.0)*r22*x425)));
evalcond[1]=((((-1.0)*x433))+(((-1.0)*r12*x425))+(((-1.0)*x417*x420))+(((-1.0)*x419*x420))+(((-1.0)*x410*x421)));
evalcond[2]=(((x416*x418))+(((-0.121761000001269)*x423))+((r21*x428))+(((-3.9e-7)*x424))+(((-1.36279999993186e-7)*x412))+(((-3.9e-7)*x418))+((x416*x424))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((0.391671)*x432))+(((-1.0)*x411*x427)));
evalcond[3]=((((1.92e-6)*cj1))+((x416*x419))+((x416*x417))+(((-3.9e-7)*x417))+(((-3.9e-7)*x419))+(((-1.0)*py))+(((-0.121761000001269)*x413))+(((-0.52362)*sj1))+(((-1.36279999993186e-7)*x430))+(((-1.0)*x410*x427))+(((-0.391671)*x433))+((r11*x428)));
evalcond[4]=((((-1.0)*x422*x423))+((x415*x434))+(((-1.0)*x412*x415))+((x426*x431))+((sj1*x410))+(((-1.0)*cj4*x414*x418))+x433+(((-1.0)*x414*x434))+((x412*x414))+(((-1.0)*x423*x426))+((cj4*x415*x418))+((x422*x431)));
evalcond[5]=(((x426*x429))+(((-1.0)*x435))+((x414*x430))+(((-1.0)*cj4*x414*x417))+(((-1.0)*cj4*x414*x419))+x432+(((-1.0)*x415*x430))+(((-1.0)*x413*x422))+(((-1.0)*x413*x426))+((cj4*x415*x417))+((cj4*x415*x419))+((x422*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x436=((0.99999999995)*cj4);
IkReal x437=(r20*sj5);
IkReal x438=(cj5*r21);
IkReal x439=(r21*sj5);
IkReal x440=(cj5*r20);
IkReal x441=(r22*sj4);
IkReal x442=((9.9999999995e-6)*cj4);
CheckValue<IkReal> x443=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x443.valid){
continue;
}
CheckValue<IkReal> x444 = IKatan2WithCheck(IkReal(((((0.99999999995)*x439))+(((-9.9999999995e-6)*x441))+((x438*x442))+((x437*x442))+(((-0.99999999995)*x440)))),IkReal(((((-1.0)*x436*x438))+(((-1.0)*x436*x437))+(((-9.9999999995e-6)*x440))+(((9.9999999995e-6)*x439))+(((0.99999999995)*x441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x444.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x443.value)))+(x444.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x445=IKcos(j3);
IkReal x446=IKsin(j3);
IkReal x447=(r10*sj5);
IkReal x448=(cj5*r01);
IkReal x449=(cj5*r00);
IkReal x450=(r22*sj4);
IkReal x451=(cj5*r10);
IkReal x452=(r02*sj4);
IkReal x453=(r11*sj5);
IkReal x454=(cj5*r20);
IkReal x455=(cj5*r21);
IkReal x456=(cj4*sj5);
IkReal x457=(r12*sj4);
IkReal x458=(r01*sj5);
IkReal x459=(r21*sj5);
IkReal x460=(cj5*r11);
IkReal x461=((0.99999999995)*x446);
IkReal x462=((9.9999999995e-6)*x446);
IkReal x463=((9.9999999995e-6)*x445);
IkReal x464=((0.99999999995)*x445);
IkReal x465=(cj4*x463);
evalcond[0]=(((x455*x465))+((x454*x462))+((r20*x456*x463))+((r20*x456*x461))+(((-1.0)*x459*x462))+(((-1.0)*x454*x464))+(((-1.0)*x450*x463))+(((-1.0)*x450*x461))+((cj4*x455*x461))+((x459*x464)));
evalcond[1]=(((cj4*x460*x461))+((x453*x464))+((x447*x465))+(((-1.0)*x453*x462))+(((-1.0)*x451*x464))+((x460*x465))+((cj4*x447*x461))+((x451*x462))+(((-1.0)*x457*x463))+(((-1.0)*x457*x461)));
evalcond[2]=(((x452*x464))+(((-1.0)*cj4*x448*x464))+(((-1.0)*r00*x456*x464))+((cj4*x448*x462))+(((-1.0)*x452*x462))+(((-1.0)*x449*x461))+(((-1.0)*x449*x463))+((x458*x463))+((x458*x461))+((r00*x456*x462)));
evalcond[3]=((1.0)+((x448*x465))+((cj4*x448*x461))+((x449*x462))+(((-1.0)*x452*x461))+(((-1.0)*x452*x463))+(((-1.0)*x458*x462))+(((-1.0)*x449*x464))+((x458*x464))+((r00*x456*x461))+((r00*x456*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x466=(r22*sj4);
IkReal x467=((0.232536954279117)*cj5);
IkReal x468=((9.54335107914695e-13)*cj4);
IkReal x469=(cj5*r21);
IkReal x470=(cj4*r22);
IkReal x471=(cj4*r12);
IkReal x472=(r10*sj5);
IkReal x473=((2.60265077711611e-7)*cj4);
IkReal x474=(r21*sj5);
IkReal x475=(r11*sj5);
IkReal x476=(cj5*r11);
IkReal x477=((8.52662144715453e-7)*cj5);
IkReal x478=((0.748006187683308)*sj4);
IkReal x479=(r20*sj5);
IkReal x480=((2.74277506655963e-6)*sj4);
IkReal x481=(r12*sj4);
if( IKabs((((x472*x478))+((x472*x473))+((x473*x476))+(((-1.0)*x468*x479))+((r20*x477))+(((-1.0)*x468*x469))+(((0.232536954279117)*x475))+(((-1.0)*x469*x480))+(((9.54335107914695e-13)*x466))+(((-1.0)*r10*x467))+(((-2.74277506655963e-6)*x470))+(((-8.52662144715453e-7)*x474))+(((0.748006187683308)*x471))+(((-1.0)*x479*x480))+(((-7.44814942123594e-7)*x476))+(((-7.44814942123594e-7)*x472))+(((-2.60265077711611e-7)*x481))+(((2.73107346716569e-12)*x469))+((x476*x478))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))+(((2.73107346716569e-12)*x479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x477))+(((-1.0)*x476*x480))+(((-0.232536954279117)*x474))+(((-1.0)*x468*x476))+(((-1.0)*x468*x472))+(((7.44814942123594e-7)*x469))+(((-1.0)*x478*x479))+((r20*x467))+(((-1.0)*x469*x478))+(((-1.0)*x469*x473))+(((-1.0)*x473*x479))+(((9.54335107914695e-13)*x481))+(((-2.74277506655963e-6)*x471))+(((-8.52662144715453e-7)*x475))+(((1.90978190288101)*pz))+(((2.60265077711611e-7)*x466))+(((7.00275247991204e-6)*py))+(((7.44814942123594e-7)*x479))+(((-0.748006187683308)*x470))+(((-1.0)*x472*x480))+(((2.73107346716569e-12)*x472))+(((2.73107346716569e-12)*x476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x472*x478))+((x472*x473))+((x473*x476))+(((-1.0)*x468*x479))+((r20*x477))+(((-1.0)*x468*x469))+(((0.232536954279117)*x475))+(((-1.0)*x469*x480))+(((9.54335107914695e-13)*x466))+(((-1.0)*r10*x467))+(((-2.74277506655963e-6)*x470))+(((-8.52662144715453e-7)*x474))+(((0.748006187683308)*x471))+(((-1.0)*x479*x480))+(((-7.44814942123594e-7)*x476))+(((-7.44814942123594e-7)*x472))+(((-2.60265077711611e-7)*x481))+(((2.73107346716569e-12)*x469))+((x476*x478))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))+(((2.73107346716569e-12)*x479))))+IKsqr((((r10*x477))+(((-1.0)*x476*x480))+(((-0.232536954279117)*x474))+(((-1.0)*x468*x476))+(((-1.0)*x468*x472))+(((7.44814942123594e-7)*x469))+(((-1.0)*x478*x479))+((r20*x467))+(((-1.0)*x469*x478))+(((-1.0)*x469*x473))+(((-1.0)*x473*x479))+(((9.54335107914695e-13)*x481))+(((-2.74277506655963e-6)*x471))+(((-8.52662144715453e-7)*x475))+(((1.90978190288101)*pz))+(((2.60265077711611e-7)*x466))+(((7.00275247991204e-6)*py))+(((7.44814942123594e-7)*x479))+(((-0.748006187683308)*x470))+(((-1.0)*x472*x480))+(((2.73107346716569e-12)*x472))+(((2.73107346716569e-12)*x476))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x472*x478))+((x472*x473))+((x473*x476))+(((-1.0)*x468*x479))+((r20*x477))+(((-1.0)*x468*x469))+(((0.232536954279117)*x475))+(((-1.0)*x469*x480))+(((9.54335107914695e-13)*x466))+(((-1.0)*r10*x467))+(((-2.74277506655963e-6)*x470))+(((-8.52662144715453e-7)*x474))+(((0.748006187683308)*x471))+(((-1.0)*x479*x480))+(((-7.44814942123594e-7)*x476))+(((-7.44814942123594e-7)*x472))+(((-2.60265077711611e-7)*x481))+(((2.73107346716569e-12)*x469))+((x476*x478))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))+(((2.73107346716569e-12)*x479))), (((r10*x477))+(((-1.0)*x476*x480))+(((-0.232536954279117)*x474))+(((-1.0)*x468*x476))+(((-1.0)*x468*x472))+(((7.44814942123594e-7)*x469))+(((-1.0)*x478*x479))+((r20*x467))+(((-1.0)*x469*x478))+(((-1.0)*x469*x473))+(((-1.0)*x473*x479))+(((9.54335107914695e-13)*x481))+(((-2.74277506655963e-6)*x471))+(((-8.52662144715453e-7)*x475))+(((1.90978190288101)*pz))+(((2.60265077711611e-7)*x466))+(((7.00275247991204e-6)*py))+(((7.44814942123594e-7)*x479))+(((-0.748006187683308)*x470))+(((-1.0)*x472*x480))+(((2.73107346716569e-12)*x472))+(((2.73107346716569e-12)*x476))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x482=IKsin(j1);
IkReal x483=IKcos(j1);
IkReal x484=((1.0)*py);
IkReal x485=(cj5*r10);
IkReal x486=((3.91670999980416e-6)*sj3);
IkReal x487=(r12*sj4);
IkReal x488=(r20*sj5);
IkReal x489=((0.391671)*sj4);
IkReal x490=((0.391670999980416)*sj3);
IkReal x491=((3.91670999980416e-6)*cj3);
IkReal x492=(cj5*r20);
IkReal x493=((1.36279999993186e-7)*cj4);
IkReal x494=(cj5*r11);
IkReal x495=(r21*sj5);
IkReal x496=(cj5*r21);
IkReal x497=(r22*sj4);
IkReal x498=(r10*sj5);
IkReal x499=(r11*sj5);
IkReal x500=((0.391671)*cj4);
IkReal x501=((0.391670999980416)*cj3);
IkReal x502=((3.9e-7)*x496);
IkReal x503=((3.9e-7)*x488);
IkReal x504=((1.36279999993186e-7)*x497);
IkReal x505=((0.121761000001269)*x492);
IkReal x506=((1.92e-6)*x482);
IkReal x507=((0.121761000001269)*x495);
IkReal x508=((0.52362)*x483);
IkReal x509=((0.121761000001269)*x499);
IkReal x510=((1.92e-6)*x483);
IkReal x511=((1.36279999993186e-7)*x487);
IkReal x512=((3.9e-7)*x498);
IkReal x513=((0.121761000001269)*x485);
IkReal x514=((0.52362)*x482);
IkReal x515=((3.9e-7)*x494);
IkReal x516=(cj4*x501);
IkReal x517=(x488*x493);
IkReal x518=(x493*x496);
IkReal x519=(x493*x498);
IkReal x520=(x493*x494);
IkReal x521=(x502+x503+x504+x505);
IkReal x522=(x509+x520+x519+x510);
IkReal x523=(x508+x506+x507+x518+x517);
IkReal x524=(x484+x515+x514+x513+x512+x511);
evalcond[0]=(((x489*x494))+((x489*x498))+(((-1.0)*x524))+((r12*x500))+x522);
evalcond[1]=(((x489*x496))+((x488*x489))+((r22*x500))+(((-1.0)*x521))+(((-1.0)*pz))+x523);
evalcond[2]=((((-1.0)*x486*x487))+((x491*x499))+((x490*x499))+(((-1.0)*x523))+((x487*x501))+(((-1.0)*x498*x516))+pz+x521+((cj4*x486*x494))+((cj4*x486*x498))+(((-1.0)*x485*x491))+(((-1.0)*x485*x490))+(((-1.0)*x494*x516)));
evalcond[3]=((((-1.0)*x496*x516))+((x491*x495))+((x497*x501))+(((-1.0)*x491*x492))+(((-1.0)*x486*x497))+((x490*x495))+(((-1.0)*x490*x492))+(((-1.0)*x524))+x522+((cj4*x486*x496))+(((-1.0)*x488*x516))+((cj4*x486*x488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x525=((1.0)*sj1);
IkReal x526=(sj4*sj5);
IkReal x527=(cj4*r22);
IkReal x528=(cj4*r12);
IkReal x529=((1.0)*cj1);
IkReal x530=(cj5*r21*sj4);
IkReal x531=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x525*x530))+(((-1.0)*x525*x527))+(((-1.0)*r10*x526*x529))+(((-1.0)*x529*x531))+(((-1.0)*x528*x529))+(((-1.0)*r20*x525*x526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x525*x526))+((cj1*r20*x526))+(((-1.0)*x525*x531))+(((-1.0)*x525*x528))+((cj1*x527))+((cj1*x530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x525*x530))+(((-1.0)*x525*x527))+(((-1.0)*r10*x526*x529))+(((-1.0)*x529*x531))+(((-1.0)*x528*x529))+(((-1.0)*r20*x525*x526))))+IKsqr(((((-1.0)*r10*x525*x526))+((cj1*r20*x526))+(((-1.0)*x525*x531))+(((-1.0)*x525*x528))+((cj1*x527))+((cj1*x530))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x525*x530))+(((-1.0)*x525*x527))+(((-1.0)*r10*x526*x529))+(((-1.0)*x529*x531))+(((-1.0)*x528*x529))+(((-1.0)*r20*x525*x526))), ((((-1.0)*r10*x525*x526))+((cj1*r20*x526))+(((-1.0)*x525*x531))+(((-1.0)*x525*x528))+((cj1*x527))+((cj1*x530))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x532=IKcos(j2);
IkReal x533=IKsin(j2);
IkReal x534=(r22*sj4);
IkReal x535=(cj5*r10);
IkReal x536=((0.99999999995)*cj3);
IkReal x537=((9.9999999995e-6)*sj3);
IkReal x538=((1.36279999993186e-7)*cj4);
IkReal x539=(cj5*r11);
IkReal x540=(cj5*r21);
IkReal x541=(r10*sj5);
IkReal x542=((1.0)*sj4);
IkReal x543=((1.0)*sj1);
IkReal x544=((9.9999999995e-6)*cj3);
IkReal x545=(cj5*r20);
IkReal x546=(r20*sj5);
IkReal x547=((1.0)*cj4);
IkReal x548=((0.99999999995)*sj3);
IkReal x549=((0.391671)*sj1);
IkReal x550=((0.121761000001269)*sj5);
IkReal x551=(r11*sj5);
IkReal x552=(r12*sj4);
IkReal x553=(r21*sj5);
IkReal x554=(cj1*x532);
IkReal x555=(cj1*x533);
IkReal x556=(cj4*x546);
IkReal x557=(x533*x543);
evalcond[0]=((((-1.0)*r22*x547))+(((-1.0)*x542*x546))+(((-1.0)*x540*x542))+(((-1.0)*x557))+x554);
evalcond[1]=((((-1.0)*x541*x542))+(((-1.0)*x532*x543))+(((-1.0)*x555))+(((-1.0)*x539*x542))+(((-1.0)*r12*x547)));
evalcond[2]=((((-1.36279999993186e-7)*x534))+(((-1.0)*x533*x549))+(((0.391671)*x554))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-0.121761000001269)*x545))+((x538*x540))+((x538*x546))+((r21*x550))+(((-3.9e-7)*x540))+(((-3.9e-7)*x546)));
evalcond[3]=((((-3.9e-7)*x539))+(((1.92e-6)*cj1))+(((-1.0)*x532*x549))+(((-1.36279999993186e-7)*x552))+((r11*x550))+(((-1.0)*py))+(((-0.52362)*sj1))+((x538*x541))+(((-0.121761000001269)*x535))+((x538*x539))+(((-3.9e-7)*x541))+(((-0.391671)*x555)));
evalcond[4]=(((x548*x553))+(((-1.0)*x536*x556))+(((-1.0)*x544*x545))+(((-1.0)*x545*x548))+(((-1.0)*x534*x537))+((sj1*x532))+((x544*x553))+((x537*x556))+x555+((x534*x536))+(((-1.0)*cj4*x536*x540))+((cj4*x537*x540)));
evalcond[5]=(((x548*x551))+((x544*x551))+((x536*x552))+(((-1.0)*x557))+(((-1.0)*cj4*x536*x539))+x554+(((-1.0)*cj4*x536*x541))+(((-1.0)*x535*x548))+(((-1.0)*x535*x544))+((cj4*x537*x539))+((cj4*x537*x541))+(((-1.0)*x537*x552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x558=((10000000000.5)*cj4);
IkReal x559=(r10*sj5);
IkReal x560=(cj5*r11);
IkReal x561=(r11*sj5);
IkReal x562=((100000.000005)*cj4);
IkReal x563=(r12*sj4);
IkReal x564=(cj5*r10);
IkReal x565=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x565;
j3eval[1]=IKsign(x565);
j3eval[2]=((IKabs(((((10000000000.5)*x561))+((x560*x562))+(((-100000.000005)*x563))+(((-10000000000.5)*x564))+((x559*x562)))))+(IKabs(((((100000.000005)*x561))+(((-1.0)*x558*x560))+(((10000000000.5)*x563))+(((-100000.000005)*x564))+(((-1.0)*x558*x559))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x566=(r21*sj5);
IkReal x567=(r22*sj4);
IkReal x568=((1.0)*sj4);
IkReal x569=((10000000000.5)*r20);
IkReal x570=(cj4*sj5);
IkReal x571=((100000.000005)*r20);
IkReal x572=(cj4*cj5*r21);
IkReal x573=((((-1.0)*cj5*r11*x568))+(((-1.0)*r10*sj5*x568))+(((-1.0)*cj4*r12)));
j3eval[0]=x573;
j3eval[1]=((IKabs(((((-1.0)*x569*x570))+(((100000.000005)*x566))+(((-10000000000.5)*x572))+(((10000000000.5)*x567))+(((-1.0)*cj5*x571)))))+(IKabs(((((10000000000.5)*x566))+(((-1.0)*cj5*x569))+(((-100000.000005)*x567))+(((100000.000005)*x572))+((x570*x571))))));
j3eval[2]=IKsign(x573);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x574=cj5*cj5;
IkReal x575=cj4*cj4;
IkReal x576=r00*r00;
IkReal x577=r01*r01;
IkReal x578=r02*r02;
IkReal x579=(cj5*r00);
IkReal x580=(r01*sj5);
IkReal x581=((100000.000005)*cj4);
IkReal x582=(cj5*r01);
IkReal x583=(r00*sj5);
IkReal x584=(r02*sj4);
IkReal x585=((2.0)*cj4);
IkReal x586=((10000000000.5)*cj4);
IkReal x587=((1.0)*x574);
IkReal x588=(x575*x576);
IkReal x589=((((-1.0)*x588))+((x582*x584*x585))+(((-2.0)*x575*x579*x580))+(((-1.0)*x575*x577*x587))+((x574*x577))+((x575*x578))+((x574*x588))+(((-1.0)*x577))+(((-1.0)*x578))+((x583*x584*x585))+(((2.0)*x579*x580))+(((-1.0)*x576*x587)));
j3eval[0]=x589;
j3eval[1]=((IKabs(((((10000000000.5)*x579))+(((-10000000000.5)*x580))+(((100000.000005)*x584))+(((-1.0)*x581*x583))+(((-1.0)*x581*x582)))))+(IKabs(((((-1.0)*x582*x586))+(((-1.0)*x583*x586))+(((10000000000.5)*x584))+(((-100000.000005)*x579))+(((100000.000005)*x580))))));
j3eval[2]=IKsign(x589);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x590=cj5*cj5;
IkReal x591=cj4*cj4;
IkReal x592=r00*r00;
IkReal x593=r01*r01;
IkReal x594=r02*r02;
IkReal x595=(cj5*r00);
IkReal x596=((2.0)*sj5);
IkReal x597=((0.99999999995)*r01);
IkReal x598=(cj4*cj5);
IkReal x599=(cj4*r00);
IkReal x600=((9.9999999995e-6)*sj5);
IkReal x601=(r02*sj4);
IkReal x602=((1.0)*x590);
IkReal x603=(x591*x592);
CheckValue<IkReal> x604 = IKatan2WithCheck(IkReal(((((-1.0)*x597*x598))+(((0.99999999995)*x601))+(((-9.9999999995e-6)*x595))+(((-0.99999999995)*sj5*x599))+((r01*x600)))),IkReal(((((9.9999999995e-6)*x601))+(((-9.9999999995e-6)*r01*x598))+(((-1.0)*sj5*x597))+(((-1.0)*x599*x600))+(((0.99999999995)*x595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x604.valid){
continue;
}
CheckValue<IkReal> x605=IKPowWithIntegerCheck(IKsign(((((-1.0)*x592*x602))+((r01*x595*x596))+(((2.0)*r01*x598*x601))+(((-1.0)*x594))+(((-1.0)*x593))+(((-1.0)*x603))+((x590*x603))+((x596*x599*x601))+(((-1.0)*r01*x591*x595*x596))+(((-1.0)*x591*x593*x602))+((x590*x593))+((x591*x594)))),-1);
if(!x605.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x604.value)+(((1.5707963267949)*(x605.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x606=IKcos(j3);
IkReal x607=IKsin(j3);
IkReal x608=(r10*sj5);
IkReal x609=(cj5*r01);
IkReal x610=(cj5*r00);
IkReal x611=(r22*sj4);
IkReal x612=(cj5*r10);
IkReal x613=(r02*sj4);
IkReal x614=(r11*sj5);
IkReal x615=(cj5*r20);
IkReal x616=(cj5*r21);
IkReal x617=(cj4*sj5);
IkReal x618=(r12*sj4);
IkReal x619=(r01*sj5);
IkReal x620=(r21*sj5);
IkReal x621=(cj5*r11);
IkReal x622=((0.99999999995)*x607);
IkReal x623=((9.9999999995e-6)*x607);
IkReal x624=((9.9999999995e-6)*x606);
IkReal x625=((0.99999999995)*x606);
IkReal x626=(cj4*x624);
evalcond[0]=(((cj4*x616*x622))+((x616*x626))+(((-1.0)*x620*x623))+(((-1.0)*x611*x624))+(((-1.0)*x611*x622))+((r20*x617*x624))+((r20*x617*x622))+(((-1.0)*x615*x625))+((x620*x625))+((x615*x623)));
evalcond[1]=(((x614*x625))+((cj4*x621*x622))+((x612*x623))+((x608*x626))+(((-1.0)*x614*x623))+(((-1.0)*x612*x625))+((cj4*x608*x622))+((x621*x626))+(((-1.0)*x618*x624))+(((-1.0)*x618*x622)));
evalcond[2]=(((x619*x624))+((x619*x622))+(((-1.0)*cj4*x609*x625))+((x613*x625))+(((-1.0)*x610*x622))+(((-1.0)*x610*x624))+((r00*x617*x623))+(((-1.0)*r00*x617*x625))+((cj4*x609*x623))+(((-1.0)*x613*x623)));
evalcond[3]=((-1.0)+((x619*x625))+(((-1.0)*x610*x625))+((r00*x617*x624))+((r00*x617*x622))+((x609*x626))+(((-1.0)*x619*x623))+((x610*x623))+((cj4*x609*x622))+(((-1.0)*x613*x622))+(((-1.0)*x613*x624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x627=(r22*sj4);
IkReal x628=((0.232536954279117)*cj5);
IkReal x629=(cj4*cj5);
IkReal x630=(cj4*r22);
IkReal x631=(cj4*r12);
IkReal x632=(r21*sj5);
IkReal x633=(r11*sj5);
IkReal x634=(r10*sj5);
IkReal x635=((7.44814942123594e-7)*cj5);
IkReal x636=(cj5*r11);
IkReal x637=((8.52662144715453e-7)*cj5);
IkReal x638=((0.748006187683308)*sj4);
IkReal x639=(r20*sj5);
IkReal x640=((2.74277506655963e-6)*sj4);
IkReal x641=(cj5*r21);
IkReal x642=(r12*sj4);
IkReal x643=(cj4*x634);
if( IKabs(((((-9.54335107914695e-13)*cj4*x639))+(((-0.748006187683308)*x631))+(((-1.0)*x640*x641))+(((-1.0)*x639*x640))+(((9.54335107914695e-13)*x627))+((r10*x628))+(((-1.0)*x634*x638))+(((-2.74277506655963e-6)*x630))+(((-1.0)*x636*x638))+(((-9.54335107914695e-13)*r21*x629))+(((-0.232536954279117)*x633))+(((2.60265077711611e-7)*x642))+(((7.44814942123594e-7)*x634))+(((1.90978190288101)*py))+(((-2.60265077711611e-7)*r11*x629))+(((2.73107346716569e-12)*x641))+(((-2.60265077711611e-7)*x643))+(((-8.52662144715453e-7)*x632))+((r20*x637))+(((7.00275247991204e-6)*pz))+((r11*x635))+(((2.73107346716569e-12)*x639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.748006187683308)*x630))+((r21*x635))+(((-7.00275247991204e-6)*py))+((x636*x640))+(((-9.54335107914695e-13)*x642))+(((2.60265077711611e-7)*x627))+(((-2.73107346716569e-12)*x634))+(((-2.73107346716569e-12)*x636))+(((2.74277506655963e-6)*x631))+(((-1.0)*x638*x639))+((x634*x640))+(((9.54335107914695e-13)*x643))+(((-0.232536954279117)*x632))+(((7.44814942123594e-7)*x639))+(((1.90978190288101)*pz))+(((-2.60265077711611e-7)*r21*x629))+(((8.52662144715453e-7)*x633))+(((-1.0)*r10*x637))+(((-1.0)*x638*x641))+((r20*x628))+(((-2.60265077711611e-7)*cj4*x639))+(((9.54335107914695e-13)*r11*x629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-9.54335107914695e-13)*cj4*x639))+(((-0.748006187683308)*x631))+(((-1.0)*x640*x641))+(((-1.0)*x639*x640))+(((9.54335107914695e-13)*x627))+((r10*x628))+(((-1.0)*x634*x638))+(((-2.74277506655963e-6)*x630))+(((-1.0)*x636*x638))+(((-9.54335107914695e-13)*r21*x629))+(((-0.232536954279117)*x633))+(((2.60265077711611e-7)*x642))+(((7.44814942123594e-7)*x634))+(((1.90978190288101)*py))+(((-2.60265077711611e-7)*r11*x629))+(((2.73107346716569e-12)*x641))+(((-2.60265077711611e-7)*x643))+(((-8.52662144715453e-7)*x632))+((r20*x637))+(((7.00275247991204e-6)*pz))+((r11*x635))+(((2.73107346716569e-12)*x639))))+IKsqr(((((-0.748006187683308)*x630))+((r21*x635))+(((-7.00275247991204e-6)*py))+((x636*x640))+(((-9.54335107914695e-13)*x642))+(((2.60265077711611e-7)*x627))+(((-2.73107346716569e-12)*x634))+(((-2.73107346716569e-12)*x636))+(((2.74277506655963e-6)*x631))+(((-1.0)*x638*x639))+((x634*x640))+(((9.54335107914695e-13)*x643))+(((-0.232536954279117)*x632))+(((7.44814942123594e-7)*x639))+(((1.90978190288101)*pz))+(((-2.60265077711611e-7)*r21*x629))+(((8.52662144715453e-7)*x633))+(((-1.0)*r10*x637))+(((-1.0)*x638*x641))+((r20*x628))+(((-2.60265077711611e-7)*cj4*x639))+(((9.54335107914695e-13)*r11*x629))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-9.54335107914695e-13)*cj4*x639))+(((-0.748006187683308)*x631))+(((-1.0)*x640*x641))+(((-1.0)*x639*x640))+(((9.54335107914695e-13)*x627))+((r10*x628))+(((-1.0)*x634*x638))+(((-2.74277506655963e-6)*x630))+(((-1.0)*x636*x638))+(((-9.54335107914695e-13)*r21*x629))+(((-0.232536954279117)*x633))+(((2.60265077711611e-7)*x642))+(((7.44814942123594e-7)*x634))+(((1.90978190288101)*py))+(((-2.60265077711611e-7)*r11*x629))+(((2.73107346716569e-12)*x641))+(((-2.60265077711611e-7)*x643))+(((-8.52662144715453e-7)*x632))+((r20*x637))+(((7.00275247991204e-6)*pz))+((r11*x635))+(((2.73107346716569e-12)*x639))), ((((-0.748006187683308)*x630))+((r21*x635))+(((-7.00275247991204e-6)*py))+((x636*x640))+(((-9.54335107914695e-13)*x642))+(((2.60265077711611e-7)*x627))+(((-2.73107346716569e-12)*x634))+(((-2.73107346716569e-12)*x636))+(((2.74277506655963e-6)*x631))+(((-1.0)*x638*x639))+((x634*x640))+(((9.54335107914695e-13)*x643))+(((-0.232536954279117)*x632))+(((7.44814942123594e-7)*x639))+(((1.90978190288101)*pz))+(((-2.60265077711611e-7)*r21*x629))+(((8.52662144715453e-7)*x633))+(((-1.0)*r10*x637))+(((-1.0)*x638*x641))+((r20*x628))+(((-2.60265077711611e-7)*cj4*x639))+(((9.54335107914695e-13)*r11*x629))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x644=IKsin(j1);
IkReal x645=IKcos(j1);
IkReal x646=((1.0)*pz);
IkReal x647=(cj5*r10);
IkReal x648=((3.91670999980416e-6)*sj3);
IkReal x649=(r12*sj4);
IkReal x650=(r20*sj5);
IkReal x651=((0.391671)*sj4);
IkReal x652=((0.391670999980416)*sj3);
IkReal x653=((3.91670999980416e-6)*cj3);
IkReal x654=(cj5*r20);
IkReal x655=((1.36279999993186e-7)*cj4);
IkReal x656=(cj5*r11);
IkReal x657=(r21*sj5);
IkReal x658=(cj5*r21);
IkReal x659=(r22*sj4);
IkReal x660=(r10*sj5);
IkReal x661=(r11*sj5);
IkReal x662=((0.391671)*cj4);
IkReal x663=((0.391670999980416)*cj3);
IkReal x664=((0.52362)*x644);
IkReal x665=((0.121761000001269)*x661);
IkReal x666=((1.36279999993186e-7)*x649);
IkReal x667=((3.9e-7)*x660);
IkReal x668=((0.121761000001269)*x647);
IkReal x669=((1.92e-6)*x645);
IkReal x670=((3.9e-7)*x656);
IkReal x671=((1.92e-6)*x644);
IkReal x672=((0.121761000001269)*x657);
IkReal x673=((0.52362)*x645);
IkReal x674=((3.9e-7)*x658);
IkReal x675=((3.9e-7)*x650);
IkReal x676=((1.36279999993186e-7)*x659);
IkReal x677=((0.121761000001269)*x654);
IkReal x678=(cj4*x663);
IkReal x679=(x655*x660);
IkReal x680=(x655*x656);
IkReal x681=(x650*x655);
IkReal x682=(x655*x658);
IkReal x683=(x646+x676+x677+x674+x675);
IkReal x684=(x665+x664+x679+x680);
IkReal x685=(x669+x668+x667+x666+x670);
IkReal x686=(x672+x673+x671+x682+x681);
evalcond[0]=((((-1.0)*x651*x656))+(((-1.0)*x684))+(((-1.0)*r12*x662))+py+x685+(((-1.0)*x651*x660)));
evalcond[1]=((((-1.0)*x683))+((x651*x658))+x686+((r22*x662))+((x650*x651)));
evalcond[2]=((((-1.0)*x659*x663))+(((-1.0)*x685))+((x652*x654))+((x658*x678))+((x653*x654))+((x648*x659))+(((-1.0)*py))+((x650*x678))+x684+(((-1.0)*cj4*x648*x658))+(((-1.0)*cj4*x648*x650))+(((-1.0)*x653*x657))+(((-1.0)*x652*x657)));
evalcond[3]=(((cj4*x648*x656))+((x649*x663))+(((-1.0)*x660*x678))+(((-1.0)*x683))+((cj4*x648*x660))+(((-1.0)*x647*x653))+(((-1.0)*x647*x652))+(((-1.0)*x648*x649))+x686+((x653*x661))+((x652*x661))+(((-1.0)*x656*x678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x687=((1.0)*sj1);
IkReal x688=(sj4*sj5);
IkReal x689=(cj4*r12);
IkReal x690=(cj4*r22);
IkReal x691=(cj5*sj4);
IkReal x692=(cj1*x691);
if( IKabs(((((-1.0)*x687*x690))+(((-1.0)*r20*x687*x688))+((cj1*x689))+(((-1.0)*r21*x687*x691))+((cj1*r10*x688))+((r11*x692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x690))+((r10*sj1*x688))+((r11*sj1*x691))+((sj1*x689))+((cj1*r20*x688))+((r21*x692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x687*x690))+(((-1.0)*r20*x687*x688))+((cj1*x689))+(((-1.0)*r21*x687*x691))+((cj1*r10*x688))+((r11*x692))))+IKsqr((((cj1*x690))+((r10*sj1*x688))+((r11*sj1*x691))+((sj1*x689))+((cj1*r20*x688))+((r21*x692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x687*x690))+(((-1.0)*r20*x687*x688))+((cj1*x689))+(((-1.0)*r21*x687*x691))+((cj1*r10*x688))+((r11*x692))), (((cj1*x690))+((r10*sj1*x688))+((r11*sj1*x691))+((sj1*x689))+((cj1*r20*x688))+((r21*x692))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x693=IKcos(j2);
IkReal x694=IKsin(j2);
IkReal x695=(r22*sj4);
IkReal x696=(cj5*r10);
IkReal x697=((0.99999999995)*cj3);
IkReal x698=((9.9999999995e-6)*sj3);
IkReal x699=((1.36279999993186e-7)*cj4);
IkReal x700=(cj5*r11);
IkReal x701=(cj5*r21);
IkReal x702=(r10*sj5);
IkReal x703=((1.0)*sj4);
IkReal x704=(r12*sj4);
IkReal x705=((9.9999999995e-6)*cj3);
IkReal x706=(cj5*r20);
IkReal x707=(r20*sj5);
IkReal x708=((1.0)*cj4);
IkReal x709=((0.99999999995)*sj3);
IkReal x710=((0.121761000001269)*sj5);
IkReal x711=(r11*sj5);
IkReal x712=(r21*sj5);
IkReal x713=(sj1*x693);
IkReal x714=(cj1*x694);
IkReal x715=(cj1*x693);
IkReal x716=(cj4*x707);
IkReal x717=(sj1*x694);
IkReal x718=(x713+x714);
evalcond[0]=((((-1.0)*r12*x708))+(((-1.0)*x702*x703))+x718+(((-1.0)*x700*x703)));
evalcond[1]=((((-1.0)*x717))+(((-1.0)*x703*x707))+x715+(((-1.0)*x701*x703))+(((-1.0)*r22*x708)));
evalcond[2]=((((-0.391671)*x717))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-3.9e-7)*x701))+(((-3.9e-7)*x707))+(((-1.36279999993186e-7)*x695))+(((0.52362)*cj1))+((r21*x710))+(((-0.121761000001269)*x706))+(((0.391671)*x715))+((x699*x701))+((x699*x707)));
evalcond[3]=(((r11*x710))+(((0.52362)*sj1))+(((-0.121761000001269)*x696))+(((-1.0)*py))+(((-3.9e-7)*x700))+(((-3.9e-7)*x702))+(((-1.92e-6)*cj1))+(((0.391671)*x713))+(((0.391671)*x714))+(((-1.36279999993186e-7)*x704))+((x699*x700))+((x699*x702)));
evalcond[4]=((((-1.0)*x706*x709))+((x695*x697))+((cj4*x698*x701))+(((-1.0)*cj4*x697*x701))+((x709*x712))+(((-1.0)*x705*x706))+(((-1.0)*x695*x698))+((x698*x716))+x718+(((-1.0)*x697*x716))+((x705*x712)));
evalcond[5]=(((cj4*x698*x700))+((cj4*x698*x702))+(((-1.0)*cj4*x697*x702))+(((-1.0)*cj4*x697*x700))+(((-1.0)*x715))+((x709*x711))+((x697*x704))+(((-1.0)*x696*x705))+(((-1.0)*x696*x709))+x717+(((-1.0)*x698*x704))+((x705*x711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x719=((0.99999999995)*r21);
IkReal x720=(cj4*cj5);
IkReal x721=((1.0)*sj4);
IkReal x722=((9.9999999995e-6)*r21);
IkReal x723=(cj5*r20);
IkReal x724=(r22*sj4);
IkReal x725=(cj4*r20*sj5);
CheckValue<IkReal> x726 = IKatan2WithCheck(IkReal((((x720*x722))+(((-0.99999999995)*x723))+(((-9.9999999995e-6)*x724))+((sj5*x719))+(((9.9999999995e-6)*x725)))),IkReal(((((-0.99999999995)*x725))+(((-9.9999999995e-6)*x723))+((sj5*x722))+(((0.99999999995)*x724))+(((-1.0)*x719*x720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x726.valid){
continue;
}
CheckValue<IkReal> x727=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11*x721))+(((-1.0)*r10*sj5*x721))+(((-1.0)*cj4*r12)))),-1);
if(!x727.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x726.value)+(((1.5707963267949)*(x727.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x728=IKcos(j3);
IkReal x729=IKsin(j3);
IkReal x730=(r10*sj5);
IkReal x731=(cj5*r01);
IkReal x732=(cj5*r00);
IkReal x733=(r22*sj4);
IkReal x734=(cj5*r10);
IkReal x735=(r02*sj4);
IkReal x736=(r11*sj5);
IkReal x737=(cj5*r20);
IkReal x738=(cj5*r21);
IkReal x739=(cj4*sj5);
IkReal x740=(r12*sj4);
IkReal x741=(r01*sj5);
IkReal x742=(r21*sj5);
IkReal x743=(cj5*r11);
IkReal x744=((0.99999999995)*x729);
IkReal x745=((9.9999999995e-6)*x729);
IkReal x746=((9.9999999995e-6)*x728);
IkReal x747=((0.99999999995)*x728);
IkReal x748=(cj4*x746);
evalcond[0]=(((x738*x748))+((x742*x747))+(((-1.0)*x737*x747))+(((-1.0)*x742*x745))+((cj4*x738*x744))+((r20*x739*x746))+((r20*x739*x744))+((x737*x745))+(((-1.0)*x733*x746))+(((-1.0)*x733*x744)));
evalcond[1]=(((x734*x745))+((cj4*x730*x744))+((x730*x748))+(((-1.0)*x734*x747))+((x743*x748))+(((-1.0)*x740*x744))+(((-1.0)*x740*x746))+(((-1.0)*x736*x745))+((cj4*x743*x744))+((x736*x747)));
evalcond[2]=(((r00*x739*x745))+((cj4*x731*x745))+(((-1.0)*x732*x744))+(((-1.0)*x732*x746))+((x741*x746))+((x741*x744))+(((-1.0)*cj4*x731*x747))+(((-1.0)*r00*x739*x747))+(((-1.0)*x735*x745))+((x735*x747)));
evalcond[3]=((-1.0)+((r00*x739*x746))+((r00*x739*x744))+((cj4*x731*x744))+((x731*x748))+(((-1.0)*x732*x747))+((x741*x747))+((x732*x745))+(((-1.0)*x741*x745))+(((-1.0)*x735*x746))+(((-1.0)*x735*x744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x749=(r22*sj4);
IkReal x750=((0.232536954279117)*cj5);
IkReal x751=(cj4*cj5);
IkReal x752=(cj4*r22);
IkReal x753=(cj4*r12);
IkReal x754=(r21*sj5);
IkReal x755=(r11*sj5);
IkReal x756=(r10*sj5);
IkReal x757=((7.44814942123594e-7)*cj5);
IkReal x758=(cj5*r11);
IkReal x759=((8.52662144715453e-7)*cj5);
IkReal x760=((0.748006187683308)*sj4);
IkReal x761=(r20*sj5);
IkReal x762=((2.74277506655963e-6)*sj4);
IkReal x763=(cj5*r21);
IkReal x764=(r12*sj4);
IkReal x765=(cj4*x756);
if( IKabs(((((-1.0)*x758*x760))+(((-0.748006187683308)*x753))+(((-1.0)*x756*x760))+(((-1.0)*x762*x763))+((r10*x750))+(((7.44814942123594e-7)*x756))+(((-8.52662144715453e-7)*x754))+(((-0.232536954279117)*x755))+(((2.73107346716569e-12)*x763))+(((2.73107346716569e-12)*x761))+(((9.54335107914695e-13)*x749))+(((-2.60265077711611e-7)*x765))+(((2.60265077711611e-7)*x764))+(((1.90978190288101)*py))+((r11*x757))+((r20*x759))+(((-2.74277506655963e-6)*x752))+(((-2.60265077711611e-7)*r11*x751))+(((-1.0)*x761*x762))+(((7.00275247991204e-6)*pz))+(((-9.54335107914695e-13)*cj4*x761))+(((-9.54335107914695e-13)*r21*x751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.73107346716569e-12)*x758))+(((-2.73107346716569e-12)*x756))+(((-7.00275247991204e-6)*py))+(((-0.748006187683308)*x752))+(((-9.54335107914695e-13)*x764))+(((-2.60265077711611e-7)*cj4*x761))+(((-1.0)*r10*x759))+(((8.52662144715453e-7)*x755))+(((-0.232536954279117)*x754))+((r21*x757))+((x758*x762))+(((9.54335107914695e-13)*r11*x751))+(((2.74277506655963e-6)*x753))+(((-2.60265077711611e-7)*r21*x751))+((x756*x762))+(((9.54335107914695e-13)*x765))+(((1.90978190288101)*pz))+((r20*x750))+(((2.60265077711611e-7)*x749))+(((7.44814942123594e-7)*x761))+(((-1.0)*x760*x763))+(((-1.0)*x760*x761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x758*x760))+(((-0.748006187683308)*x753))+(((-1.0)*x756*x760))+(((-1.0)*x762*x763))+((r10*x750))+(((7.44814942123594e-7)*x756))+(((-8.52662144715453e-7)*x754))+(((-0.232536954279117)*x755))+(((2.73107346716569e-12)*x763))+(((2.73107346716569e-12)*x761))+(((9.54335107914695e-13)*x749))+(((-2.60265077711611e-7)*x765))+(((2.60265077711611e-7)*x764))+(((1.90978190288101)*py))+((r11*x757))+((r20*x759))+(((-2.74277506655963e-6)*x752))+(((-2.60265077711611e-7)*r11*x751))+(((-1.0)*x761*x762))+(((7.00275247991204e-6)*pz))+(((-9.54335107914695e-13)*cj4*x761))+(((-9.54335107914695e-13)*r21*x751))))+IKsqr(((((-2.73107346716569e-12)*x758))+(((-2.73107346716569e-12)*x756))+(((-7.00275247991204e-6)*py))+(((-0.748006187683308)*x752))+(((-9.54335107914695e-13)*x764))+(((-2.60265077711611e-7)*cj4*x761))+(((-1.0)*r10*x759))+(((8.52662144715453e-7)*x755))+(((-0.232536954279117)*x754))+((r21*x757))+((x758*x762))+(((9.54335107914695e-13)*r11*x751))+(((2.74277506655963e-6)*x753))+(((-2.60265077711611e-7)*r21*x751))+((x756*x762))+(((9.54335107914695e-13)*x765))+(((1.90978190288101)*pz))+((r20*x750))+(((2.60265077711611e-7)*x749))+(((7.44814942123594e-7)*x761))+(((-1.0)*x760*x763))+(((-1.0)*x760*x761))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x758*x760))+(((-0.748006187683308)*x753))+(((-1.0)*x756*x760))+(((-1.0)*x762*x763))+((r10*x750))+(((7.44814942123594e-7)*x756))+(((-8.52662144715453e-7)*x754))+(((-0.232536954279117)*x755))+(((2.73107346716569e-12)*x763))+(((2.73107346716569e-12)*x761))+(((9.54335107914695e-13)*x749))+(((-2.60265077711611e-7)*x765))+(((2.60265077711611e-7)*x764))+(((1.90978190288101)*py))+((r11*x757))+((r20*x759))+(((-2.74277506655963e-6)*x752))+(((-2.60265077711611e-7)*r11*x751))+(((-1.0)*x761*x762))+(((7.00275247991204e-6)*pz))+(((-9.54335107914695e-13)*cj4*x761))+(((-9.54335107914695e-13)*r21*x751))), ((((-2.73107346716569e-12)*x758))+(((-2.73107346716569e-12)*x756))+(((-7.00275247991204e-6)*py))+(((-0.748006187683308)*x752))+(((-9.54335107914695e-13)*x764))+(((-2.60265077711611e-7)*cj4*x761))+(((-1.0)*r10*x759))+(((8.52662144715453e-7)*x755))+(((-0.232536954279117)*x754))+((r21*x757))+((x758*x762))+(((9.54335107914695e-13)*r11*x751))+(((2.74277506655963e-6)*x753))+(((-2.60265077711611e-7)*r21*x751))+((x756*x762))+(((9.54335107914695e-13)*x765))+(((1.90978190288101)*pz))+((r20*x750))+(((2.60265077711611e-7)*x749))+(((7.44814942123594e-7)*x761))+(((-1.0)*x760*x763))+(((-1.0)*x760*x761))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x766=IKsin(j1);
IkReal x767=IKcos(j1);
IkReal x768=((1.0)*pz);
IkReal x769=(cj5*r10);
IkReal x770=((3.91670999980416e-6)*sj3);
IkReal x771=(r12*sj4);
IkReal x772=(r20*sj5);
IkReal x773=((0.391671)*sj4);
IkReal x774=((0.391670999980416)*sj3);
IkReal x775=((3.91670999980416e-6)*cj3);
IkReal x776=(cj5*r20);
IkReal x777=((1.36279999993186e-7)*cj4);
IkReal x778=(cj5*r11);
IkReal x779=(r21*sj5);
IkReal x780=(cj5*r21);
IkReal x781=(r22*sj4);
IkReal x782=(r10*sj5);
IkReal x783=(r11*sj5);
IkReal x784=((0.391671)*cj4);
IkReal x785=((0.391670999980416)*cj3);
IkReal x786=((0.52362)*x766);
IkReal x787=((0.121761000001269)*x783);
IkReal x788=((1.36279999993186e-7)*x771);
IkReal x789=((3.9e-7)*x782);
IkReal x790=((0.121761000001269)*x769);
IkReal x791=((1.92e-6)*x767);
IkReal x792=((3.9e-7)*x778);
IkReal x793=((1.92e-6)*x766);
IkReal x794=((0.121761000001269)*x779);
IkReal x795=((0.52362)*x767);
IkReal x796=((3.9e-7)*x780);
IkReal x797=((3.9e-7)*x772);
IkReal x798=((1.36279999993186e-7)*x781);
IkReal x799=((0.121761000001269)*x776);
IkReal x800=(cj4*x785);
IkReal x801=(x777*x782);
IkReal x802=(x777*x778);
IkReal x803=(x772*x777);
IkReal x804=(x777*x780);
IkReal x805=(x768+x797+x796+x799+x798);
IkReal x806=(x786+x787+x801+x802);
IkReal x807=(x791+x790+x792+x788+x789);
IkReal x808=(x793+x795+x794+x804+x803);
evalcond[0]=((((-1.0)*x773*x782))+(((-1.0)*r12*x784))+py+(((-1.0)*x773*x778))+x807+(((-1.0)*x806)));
evalcond[1]=(((x773*x780))+((x772*x773))+((r22*x784))+x808+(((-1.0)*x805)));
evalcond[2]=(((x774*x776))+((x770*x781))+((x772*x800))+(((-1.0)*x774*x779))+(((-1.0)*x781*x785))+(((-1.0)*py))+(((-1.0)*x775*x779))+((x780*x800))+x806+(((-1.0)*x807))+(((-1.0)*cj4*x770*x780))+(((-1.0)*cj4*x770*x772))+((x775*x776)));
evalcond[3]=(((cj4*x770*x782))+((x774*x783))+(((-1.0)*x782*x800))+((x775*x783))+(((-1.0)*x769*x775))+(((-1.0)*x769*x774))+(((-1.0)*x778*x800))+((cj4*x770*x778))+x808+(((-1.0)*x805))+((x771*x785))+(((-1.0)*x770*x771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x809=((1.0)*sj1);
IkReal x810=(sj4*sj5);
IkReal x811=(cj4*r12);
IkReal x812=(cj4*r22);
IkReal x813=(cj5*sj4);
IkReal x814=(cj1*x813);
if( IKabs((((r11*x814))+(((-1.0)*x809*x812))+((cj1*r10*x810))+((cj1*x811))+(((-1.0)*r21*x809*x813))+(((-1.0)*r20*x809*x810)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x811))+((cj1*r20*x810))+((cj1*x812))+((r21*x814))+((r11*sj1*x813))+((r10*sj1*x810)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x814))+(((-1.0)*x809*x812))+((cj1*r10*x810))+((cj1*x811))+(((-1.0)*r21*x809*x813))+(((-1.0)*r20*x809*x810))))+IKsqr((((sj1*x811))+((cj1*r20*x810))+((cj1*x812))+((r21*x814))+((r11*sj1*x813))+((r10*sj1*x810))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x814))+(((-1.0)*x809*x812))+((cj1*r10*x810))+((cj1*x811))+(((-1.0)*r21*x809*x813))+(((-1.0)*r20*x809*x810))), (((sj1*x811))+((cj1*r20*x810))+((cj1*x812))+((r21*x814))+((r11*sj1*x813))+((r10*sj1*x810))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x815=IKcos(j2);
IkReal x816=IKsin(j2);
IkReal x817=(r22*sj4);
IkReal x818=(cj5*r10);
IkReal x819=((0.99999999995)*cj3);
IkReal x820=((9.9999999995e-6)*sj3);
IkReal x821=((1.36279999993186e-7)*cj4);
IkReal x822=(cj5*r11);
IkReal x823=(cj5*r21);
IkReal x824=(r10*sj5);
IkReal x825=((1.0)*sj4);
IkReal x826=(r12*sj4);
IkReal x827=((9.9999999995e-6)*cj3);
IkReal x828=(cj5*r20);
IkReal x829=(r20*sj5);
IkReal x830=((1.0)*cj4);
IkReal x831=((0.99999999995)*sj3);
IkReal x832=((0.121761000001269)*sj5);
IkReal x833=(r11*sj5);
IkReal x834=(r21*sj5);
IkReal x835=(sj1*x815);
IkReal x836=(cj1*x816);
IkReal x837=(cj1*x815);
IkReal x838=(cj4*x829);
IkReal x839=(sj1*x816);
IkReal x840=(x835+x836);
evalcond[0]=((((-1.0)*x822*x825))+(((-1.0)*x824*x825))+(((-1.0)*r12*x830))+x840);
evalcond[1]=((((-1.0)*x823*x825))+(((-1.0)*x839))+(((-1.0)*r22*x830))+x837+(((-1.0)*x825*x829)));
evalcond[2]=((((-0.121761000001269)*x828))+((x821*x823))+((x821*x829))+(((0.391671)*x837))+(((-0.391671)*x839))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-3.9e-7)*x823))+(((-3.9e-7)*x829))+((r21*x832))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x817)));
evalcond[3]=((((-0.121761000001269)*x818))+((x821*x822))+((x821*x824))+(((0.391671)*x836))+(((0.391671)*x835))+(((0.52362)*sj1))+(((-1.0)*py))+(((-3.9e-7)*x824))+(((-3.9e-7)*x822))+(((-1.92e-6)*cj1))+((r11*x832))+(((-1.36279999993186e-7)*x826)));
evalcond[4]=(((x831*x834))+(((-1.0)*cj4*x819*x823))+(((-1.0)*x828*x831))+((x820*x838))+((x827*x834))+(((-1.0)*x827*x828))+(((-1.0)*x817*x820))+(((-1.0)*x819*x838))+((x817*x819))+x840+((cj4*x820*x823)));
evalcond[5]=(((x831*x833))+(((-1.0)*cj4*x819*x824))+(((-1.0)*cj4*x819*x822))+(((-1.0)*x818*x827))+(((-1.0)*x818*x831))+((x827*x833))+((x819*x826))+(((-1.0)*x820*x826))+(((-1.0)*x837))+x839+((cj4*x820*x824))+((cj4*x820*x822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x841=((9.9999999995e-6)*cj5);
IkReal x842=(cj4*r11);
IkReal x843=(r12*sj4);
IkReal x844=((0.99999999995)*r10);
IkReal x845=(cj4*sj5);
IkReal x846=(r11*sj5);
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(((((9.9999999995e-6)*r10*x845))+(((-9.9999999995e-6)*x843))+(((-1.0)*cj5*x844))+((x841*x842))+(((0.99999999995)*x846)))),IkReal(((((9.9999999995e-6)*x846))+(((-1.0)*r10*x841))+(((-0.99999999995)*cj5*x842))+(((-1.0)*x844*x845))+(((0.99999999995)*x843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
CheckValue<IkReal> x848=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x848.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x847.value)+(((1.5707963267949)*(x848.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x849=IKcos(j3);
IkReal x850=IKsin(j3);
IkReal x851=(r10*sj5);
IkReal x852=(cj5*r01);
IkReal x853=(cj5*r00);
IkReal x854=(r22*sj4);
IkReal x855=(cj5*r10);
IkReal x856=(r02*sj4);
IkReal x857=(r11*sj5);
IkReal x858=(cj5*r20);
IkReal x859=(cj5*r21);
IkReal x860=(cj4*sj5);
IkReal x861=(r12*sj4);
IkReal x862=(r01*sj5);
IkReal x863=(r21*sj5);
IkReal x864=(cj5*r11);
IkReal x865=((0.99999999995)*x850);
IkReal x866=((9.9999999995e-6)*x850);
IkReal x867=((9.9999999995e-6)*x849);
IkReal x868=((0.99999999995)*x849);
IkReal x869=(cj4*x867);
evalcond[0]=((((-1.0)*x854*x865))+(((-1.0)*x854*x867))+((x863*x868))+((r20*x860*x867))+((r20*x860*x865))+((cj4*x859*x865))+((x858*x866))+((x859*x869))+(((-1.0)*x858*x868))+(((-1.0)*x863*x866)));
evalcond[1]=((((-1.0)*x861*x865))+(((-1.0)*x861*x867))+((x855*x866))+((x851*x869))+((cj4*x864*x865))+((x864*x869))+((x857*x868))+((cj4*x851*x865))+(((-1.0)*x857*x866))+(((-1.0)*x855*x868)));
evalcond[2]=((((-1.0)*cj4*x852*x868))+(((-1.0)*x853*x867))+(((-1.0)*x853*x865))+(((-1.0)*r00*x860*x868))+((x856*x868))+((r00*x860*x866))+((x862*x867))+((x862*x865))+(((-1.0)*x856*x866))+((cj4*x852*x866)));
evalcond[3]=((-1.0)+(((-1.0)*x853*x868))+(((-1.0)*x862*x866))+((r00*x860*x867))+((r00*x860*x865))+((x862*x868))+((x853*x866))+(((-1.0)*x856*x867))+(((-1.0)*x856*x865))+((x852*x869))+((cj4*x852*x865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x870=(r22*sj4);
IkReal x871=((0.232536954279117)*cj5);
IkReal x872=(cj4*cj5);
IkReal x873=(cj4*r22);
IkReal x874=(cj4*r12);
IkReal x875=(r21*sj5);
IkReal x876=(r11*sj5);
IkReal x877=(r10*sj5);
IkReal x878=((7.44814942123594e-7)*cj5);
IkReal x879=(cj5*r11);
IkReal x880=((8.52662144715453e-7)*cj5);
IkReal x881=((0.748006187683308)*sj4);
IkReal x882=(r20*sj5);
IkReal x883=((2.74277506655963e-6)*sj4);
IkReal x884=(cj5*r21);
IkReal x885=(r12*sj4);
IkReal x886=(cj4*x877);
if( IKabs(((((-2.60265077711611e-7)*r11*x872))+(((-1.0)*x883*x884))+(((-2.74277506655963e-6)*x873))+(((-0.748006187683308)*x874))+(((-1.0)*x879*x881))+(((2.60265077711611e-7)*x885))+(((9.54335107914695e-13)*x870))+(((-1.0)*x882*x883))+(((-8.52662144715453e-7)*x875))+((r11*x878))+((r10*x871))+((r20*x880))+(((7.44814942123594e-7)*x877))+(((-0.232536954279117)*x876))+(((2.73107346716569e-12)*x884))+(((2.73107346716569e-12)*x882))+(((-9.54335107914695e-13)*cj4*x882))+(((-1.0)*x877*x881))+(((1.90978190288101)*py))+(((-9.54335107914695e-13)*r21*x872))+(((-2.60265077711611e-7)*x886))+(((7.00275247991204e-6)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.748006187683308)*x873))+(((-7.00275247991204e-6)*py))+((x879*x883))+(((2.74277506655963e-6)*x874))+(((-9.54335107914695e-13)*x885))+((r21*x878))+((x877*x883))+(((9.54335107914695e-13)*x886))+(((-0.232536954279117)*x875))+(((8.52662144715453e-7)*x876))+(((-1.0)*x881*x882))+(((-1.0)*x881*x884))+(((-2.73107346716569e-12)*x879))+(((-2.73107346716569e-12)*x877))+(((-2.60265077711611e-7)*cj4*x882))+(((-1.0)*r10*x880))+(((1.90978190288101)*pz))+(((7.44814942123594e-7)*x882))+(((9.54335107914695e-13)*r11*x872))+((r20*x871))+(((2.60265077711611e-7)*x870))+(((-2.60265077711611e-7)*r21*x872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.60265077711611e-7)*r11*x872))+(((-1.0)*x883*x884))+(((-2.74277506655963e-6)*x873))+(((-0.748006187683308)*x874))+(((-1.0)*x879*x881))+(((2.60265077711611e-7)*x885))+(((9.54335107914695e-13)*x870))+(((-1.0)*x882*x883))+(((-8.52662144715453e-7)*x875))+((r11*x878))+((r10*x871))+((r20*x880))+(((7.44814942123594e-7)*x877))+(((-0.232536954279117)*x876))+(((2.73107346716569e-12)*x884))+(((2.73107346716569e-12)*x882))+(((-9.54335107914695e-13)*cj4*x882))+(((-1.0)*x877*x881))+(((1.90978190288101)*py))+(((-9.54335107914695e-13)*r21*x872))+(((-2.60265077711611e-7)*x886))+(((7.00275247991204e-6)*pz))))+IKsqr(((((-0.748006187683308)*x873))+(((-7.00275247991204e-6)*py))+((x879*x883))+(((2.74277506655963e-6)*x874))+(((-9.54335107914695e-13)*x885))+((r21*x878))+((x877*x883))+(((9.54335107914695e-13)*x886))+(((-0.232536954279117)*x875))+(((8.52662144715453e-7)*x876))+(((-1.0)*x881*x882))+(((-1.0)*x881*x884))+(((-2.73107346716569e-12)*x879))+(((-2.73107346716569e-12)*x877))+(((-2.60265077711611e-7)*cj4*x882))+(((-1.0)*r10*x880))+(((1.90978190288101)*pz))+(((7.44814942123594e-7)*x882))+(((9.54335107914695e-13)*r11*x872))+((r20*x871))+(((2.60265077711611e-7)*x870))+(((-2.60265077711611e-7)*r21*x872))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.60265077711611e-7)*r11*x872))+(((-1.0)*x883*x884))+(((-2.74277506655963e-6)*x873))+(((-0.748006187683308)*x874))+(((-1.0)*x879*x881))+(((2.60265077711611e-7)*x885))+(((9.54335107914695e-13)*x870))+(((-1.0)*x882*x883))+(((-8.52662144715453e-7)*x875))+((r11*x878))+((r10*x871))+((r20*x880))+(((7.44814942123594e-7)*x877))+(((-0.232536954279117)*x876))+(((2.73107346716569e-12)*x884))+(((2.73107346716569e-12)*x882))+(((-9.54335107914695e-13)*cj4*x882))+(((-1.0)*x877*x881))+(((1.90978190288101)*py))+(((-9.54335107914695e-13)*r21*x872))+(((-2.60265077711611e-7)*x886))+(((7.00275247991204e-6)*pz))), ((((-0.748006187683308)*x873))+(((-7.00275247991204e-6)*py))+((x879*x883))+(((2.74277506655963e-6)*x874))+(((-9.54335107914695e-13)*x885))+((r21*x878))+((x877*x883))+(((9.54335107914695e-13)*x886))+(((-0.232536954279117)*x875))+(((8.52662144715453e-7)*x876))+(((-1.0)*x881*x882))+(((-1.0)*x881*x884))+(((-2.73107346716569e-12)*x879))+(((-2.73107346716569e-12)*x877))+(((-2.60265077711611e-7)*cj4*x882))+(((-1.0)*r10*x880))+(((1.90978190288101)*pz))+(((7.44814942123594e-7)*x882))+(((9.54335107914695e-13)*r11*x872))+((r20*x871))+(((2.60265077711611e-7)*x870))+(((-2.60265077711611e-7)*r21*x872))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x887=IKsin(j1);
IkReal x888=IKcos(j1);
IkReal x889=((1.0)*pz);
IkReal x890=(cj5*r10);
IkReal x891=((3.91670999980416e-6)*sj3);
IkReal x892=(r12*sj4);
IkReal x893=(r20*sj5);
IkReal x894=((0.391671)*sj4);
IkReal x895=((0.391670999980416)*sj3);
IkReal x896=((3.91670999980416e-6)*cj3);
IkReal x897=(cj5*r20);
IkReal x898=((1.36279999993186e-7)*cj4);
IkReal x899=(cj5*r11);
IkReal x900=(r21*sj5);
IkReal x901=(cj5*r21);
IkReal x902=(r22*sj4);
IkReal x903=(r10*sj5);
IkReal x904=(r11*sj5);
IkReal x905=((0.391671)*cj4);
IkReal x906=((0.391670999980416)*cj3);
IkReal x907=((0.52362)*x887);
IkReal x908=((0.121761000001269)*x904);
IkReal x909=((1.36279999993186e-7)*x892);
IkReal x910=((3.9e-7)*x903);
IkReal x911=((0.121761000001269)*x890);
IkReal x912=((1.92e-6)*x888);
IkReal x913=((3.9e-7)*x899);
IkReal x914=((1.92e-6)*x887);
IkReal x915=((0.121761000001269)*x900);
IkReal x916=((0.52362)*x888);
IkReal x917=((3.9e-7)*x901);
IkReal x918=((3.9e-7)*x893);
IkReal x919=((1.36279999993186e-7)*x902);
IkReal x920=((0.121761000001269)*x897);
IkReal x921=(cj4*x906);
IkReal x922=(x898*x903);
IkReal x923=(x898*x899);
IkReal x924=(x893*x898);
IkReal x925=(x898*x901);
IkReal x926=(x889+x920+x919+x918+x917);
IkReal x927=(x922+x923+x907+x908);
IkReal x928=(x913+x912+x911+x910+x909);
IkReal x929=(x924+x925+x916+x915+x914);
evalcond[0]=((((-1.0)*x927))+(((-1.0)*x894*x903))+(((-1.0)*r12*x905))+py+(((-1.0)*x894*x899))+x928);
evalcond[1]=((((-1.0)*x926))+((x894*x901))+((r22*x905))+((x893*x894))+x929);
evalcond[2]=((((-1.0)*x928))+(((-1.0)*x896*x900))+((x893*x921))+(((-1.0)*x895*x900))+(((-1.0)*x902*x906))+((x896*x897))+((x891*x902))+(((-1.0)*cj4*x891*x893))+((x895*x897))+(((-1.0)*py))+((x901*x921))+x927+(((-1.0)*cj4*x891*x901)));
evalcond[3]=((((-1.0)*x926))+((x895*x904))+(((-1.0)*x899*x921))+((cj4*x891*x899))+((x892*x906))+(((-1.0)*x903*x921))+((x896*x904))+((cj4*x891*x903))+x929+(((-1.0)*x890*x895))+(((-1.0)*x890*x896))+(((-1.0)*x891*x892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x930=((1.0)*sj1);
IkReal x931=(sj4*sj5);
IkReal x932=(cj4*r12);
IkReal x933=(cj4*r22);
IkReal x934=(cj5*sj4);
IkReal x935=(cj1*x934);
if( IKabs(((((-1.0)*r21*x930*x934))+(((-1.0)*x930*x933))+(((-1.0)*r20*x930*x931))+((cj1*r10*x931))+((r11*x935))+((cj1*x932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x935))+((r11*sj1*x934))+((sj1*x932))+((r10*sj1*x931))+((cj1*r20*x931))+((cj1*x933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x930*x934))+(((-1.0)*x930*x933))+(((-1.0)*r20*x930*x931))+((cj1*r10*x931))+((r11*x935))+((cj1*x932))))+IKsqr((((r21*x935))+((r11*sj1*x934))+((sj1*x932))+((r10*sj1*x931))+((cj1*r20*x931))+((cj1*x933))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x930*x934))+(((-1.0)*x930*x933))+(((-1.0)*r20*x930*x931))+((cj1*r10*x931))+((r11*x935))+((cj1*x932))), (((r21*x935))+((r11*sj1*x934))+((sj1*x932))+((r10*sj1*x931))+((cj1*r20*x931))+((cj1*x933))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x936=IKcos(j2);
IkReal x937=IKsin(j2);
IkReal x938=(r22*sj4);
IkReal x939=(cj5*r10);
IkReal x940=((0.99999999995)*cj3);
IkReal x941=((9.9999999995e-6)*sj3);
IkReal x942=((1.36279999993186e-7)*cj4);
IkReal x943=(cj5*r11);
IkReal x944=(cj5*r21);
IkReal x945=(r10*sj5);
IkReal x946=((1.0)*sj4);
IkReal x947=(r12*sj4);
IkReal x948=((9.9999999995e-6)*cj3);
IkReal x949=(cj5*r20);
IkReal x950=(r20*sj5);
IkReal x951=((1.0)*cj4);
IkReal x952=((0.99999999995)*sj3);
IkReal x953=((0.121761000001269)*sj5);
IkReal x954=(r11*sj5);
IkReal x955=(r21*sj5);
IkReal x956=(sj1*x936);
IkReal x957=(cj1*x937);
IkReal x958=(cj1*x936);
IkReal x959=(cj4*x950);
IkReal x960=(sj1*x937);
IkReal x961=(x957+x956);
evalcond[0]=((((-1.0)*x945*x946))+(((-1.0)*x943*x946))+(((-1.0)*r12*x951))+x961);
evalcond[1]=((((-1.0)*x960))+(((-1.0)*x944*x946))+(((-1.0)*x946*x950))+(((-1.0)*r22*x951))+x958);
evalcond[2]=((((-3.9e-7)*x950))+(((0.391671)*x958))+(((-0.391671)*x960))+((x942*x950))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((x942*x944))+((r21*x953))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x938))+(((-0.121761000001269)*x949))+(((-3.9e-7)*x944)));
evalcond[3]=((((0.52362)*sj1))+(((0.391671)*x956))+(((0.391671)*x957))+(((-1.36279999993186e-7)*x947))+(((-1.0)*py))+((x942*x943))+((x942*x945))+(((-1.92e-6)*cj1))+((r11*x953))+(((-0.121761000001269)*x939))+(((-3.9e-7)*x945))+(((-3.9e-7)*x943)));
evalcond[4]=(((x952*x955))+(((-1.0)*cj4*x940*x944))+((x938*x940))+(((-1.0)*x940*x959))+(((-1.0)*x938*x941))+(((-1.0)*x948*x949))+((x948*x955))+((x941*x959))+((cj4*x941*x944))+(((-1.0)*x949*x952))+x961);
evalcond[5]=(((x952*x954))+(((-1.0)*cj4*x940*x943))+(((-1.0)*cj4*x940*x945))+(((-1.0)*x939*x948))+(((-1.0)*x958))+((x948*x954))+(((-1.0)*x941*x947))+(((-1.0)*x939*x952))+((cj4*x941*x945))+((cj4*x941*x943))+((x940*x947))+x960);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x962=(r02*sj4);
IkReal x963=((10000000000.5)*sj5);
IkReal x964=(cj4*r00);
IkReal x965=((100000.000005)*sj5);
IkReal x966=(cj5*r00);
IkReal x967=(cj4*cj5*r01);
IkReal x968=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x968;
j3eval[1]=IKsign(x968);
j3eval[2]=((IKabs(((((-10000000000.5)*x967))+(((10000000000.5)*x962))+(((-1.0)*x963*x964))+((r01*x965))+(((-100000.000005)*x966)))))+(IKabs(((((-10000000000.5)*x966))+(((100000.000005)*x967))+((r01*x963))+((x964*x965))+(((-100000.000005)*x962))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x969=((100000.000005)*sj5);
IkReal x970=(r22*sj4);
IkReal x971=(cj4*r20);
IkReal x972=((1.0)*sj4);
IkReal x973=((10000000000.5)*sj5);
IkReal x974=(cj5*r20);
IkReal x975=(cj4*cj5*r21);
IkReal x976=((((-1.0)*cj4*r02))+(((-1.0)*cj5*r01*x972))+(((-1.0)*r00*sj5*x972)));
j3eval[0]=x976;
j3eval[1]=IKsign(x976);
j3eval[2]=((IKabs(((((10000000000.5)*x970))+(((-1.0)*x971*x973))+((r21*x969))+(((-100000.000005)*x974))+(((-10000000000.5)*x975)))))+(IKabs((((x969*x971))+((r21*x973))+(((-100000.000005)*x970))+(((100000.000005)*x975))+(((-10000000000.5)*x974))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x977=cj4*cj4;
IkReal x978=r11*r11;
IkReal x979=cj5*cj5;
IkReal x980=r10*r10;
IkReal x981=r12*r12;
IkReal x982=(cj5*r11);
IkReal x983=((10000000000.5)*cj4);
IkReal x984=(r12*sj4);
IkReal x985=(r11*sj5);
IkReal x986=(r10*sj5);
IkReal x987=(cj5*r10);
IkReal x988=((100000.000005)*cj4);
IkReal x989=((1.0)*x977);
IkReal x990=((2.0)*x986);
IkReal x991=(x979*x980);
IkReal x992=(x978*x979);
IkReal x993=((((-1.0)*x992))+((x977*x992))+((x977*x982*x990))+((x977*x980))+(((-1.0)*x982*x990))+(((-2.0)*cj4*x982*x984))+(((-1.0)*x981*x989))+(((-1.0)*x989*x991))+x991+x981+x978+(((-1.0)*cj4*x984*x990)));
j3eval[0]=x993;
j3eval[1]=IKsign(x993);
j3eval[2]=((IKabs(((((10000000000.5)*x984))+(((-1.0)*x982*x983))+(((-100000.000005)*x987))+(((100000.000005)*x985))+(((-1.0)*x983*x986)))))+(IKabs(((((10000000000.5)*x987))+(((-1.0)*x986*x988))+(((-1.0)*x982*x988))+(((-10000000000.5)*x985))+(((100000.000005)*x984))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x994=cj4*cj4;
IkReal x995=r11*r11;
IkReal x996=cj5*cj5;
IkReal x997=r10*r10;
IkReal x998=r12*r12;
IkReal x999=(r10*sj5);
IkReal x1000=(cj5*r10);
IkReal x1001=(r12*sj4);
IkReal x1002=(r11*sj5);
IkReal x1003=(cj4*cj5*r11);
IkReal x1004=((2.0)*x1001);
IkReal x1005=((2.0)*cj5*r11);
IkReal x1006=((1.0)*x994);
IkReal x1007=(x996*x997);
IkReal x1008=(x995*x996);
CheckValue<IkReal> x1009=IKPowWithIntegerCheck(IKsign((((x1005*x994*x999))+(((-1.0)*x1008))+((x994*x997))+x1007+(((-1.0)*x1006*x1007))+((x1008*x994))+(((-1.0)*x1005*x999))+x995+x998+(((-1.0)*x1006*x998))+(((-1.0)*x1003*x1004))+(((-1.0)*cj4*x1004*x999)))),-1);
if(!x1009.valid){
continue;
}
CheckValue<IkReal> x1010 = IKatan2WithCheck(IkReal(((((-0.99999999995)*x1003))+(((-0.99999999995)*cj4*x999))+(((0.99999999995)*x1001))+(((-9.9999999995e-6)*x1000))+(((9.9999999995e-6)*x1002)))),IkReal(((((-0.99999999995)*x1002))+(((0.99999999995)*x1000))+(((-9.9999999995e-6)*cj4*x999))+(((-9.9999999995e-6)*x1003))+(((9.9999999995e-6)*x1001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1010.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1009.value)))+(x1010.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1011=IKcos(j3);
IkReal x1012=IKsin(j3);
IkReal x1013=(r10*sj5);
IkReal x1014=(cj5*r01);
IkReal x1015=((9.9999999995e-6)*r12);
IkReal x1016=((0.99999999995)*cj4);
IkReal x1017=(cj5*r10);
IkReal x1018=(r11*sj5);
IkReal x1019=(cj5*r20);
IkReal x1020=(cj5*r21);
IkReal x1021=(r20*sj5);
IkReal x1022=((0.99999999995)*r12);
IkReal x1023=(r21*sj5);
IkReal x1024=(cj5*r11);
IkReal x1025=(r00*sj5);
IkReal x1026=(cj5*r00);
IkReal x1027=(r01*sj5);
IkReal x1028=(sj4*x1012);
IkReal x1029=((9.9999999995e-6)*x1012);
IkReal x1030=(sj4*x1011);
IkReal x1031=((0.99999999995)*x1012);
IkReal x1032=((0.99999999995)*x1011);
IkReal x1033=((9.9999999995e-6)*x1011);
IkReal x1034=(cj4*x1033);
evalcond[0]=(((x1020*x1034))+((x1021*x1034))+(((-1.0)*x1023*x1029))+(((-0.99999999995)*r22*x1028))+((x1012*x1016*x1020))+((x1012*x1016*x1021))+((x1019*x1029))+((x1023*x1032))+(((-9.9999999995e-6)*r22*x1030))+(((-1.0)*x1019*x1032)));
evalcond[1]=((((-0.99999999995)*r02*x1028))+(((-1.0)*x1026*x1032))+((x1012*x1014*x1016))+((x1012*x1016*x1025))+((x1026*x1029))+(((-9.9999999995e-6)*r02*x1030))+((x1027*x1032))+((x1025*x1034))+((x1014*x1034))+(((-1.0)*x1027*x1029)));
evalcond[2]=(((cj4*x1013*x1029))+(((-1.0)*x1017*x1033))+(((-1.0)*x1017*x1031))+(((-1.0)*x1011*x1016*x1024))+((x1022*x1030))+(((-1.0)*x1015*x1028))+(((-1.0)*x1011*x1013*x1016))+((cj4*x1024*x1029))+((x1018*x1033))+((x1018*x1031)));
evalcond[3]=((1.0)+((x1017*x1029))+(((-1.0)*x1015*x1030))+(((-1.0)*x1022*x1028))+(((-1.0)*x1018*x1029))+(((-1.0)*x1017*x1032))+((x1012*x1016*x1024))+((x1013*x1034))+((x1024*x1034))+((x1018*x1032))+((x1012*x1013*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1035=(r22*sj4);
IkReal x1036=((0.232536954279117)*cj5);
IkReal x1037=(cj5*r01);
IkReal x1038=(r02*sj4);
IkReal x1039=(cj5*r21);
IkReal x1040=((9.54335107914695e-13)*cj4);
IkReal x1041=((0.748006187683308)*cj4);
IkReal x1042=((8.52662144715453e-7)*cj5);
IkReal x1043=((2.60265077711611e-7)*cj4);
IkReal x1044=(r00*sj5);
IkReal x1045=((8.52662144715453e-7)*sj5);
IkReal x1046=(r20*sj5);
IkReal x1047=((0.748006187683308)*sj4);
IkReal x1048=((0.232536954279117)*sj5);
IkReal x1049=((2.74277506655963e-6)*cj4);
IkReal x1050=((2.74277506655963e-6)*sj4);
if( IKabs(((((-1.0)*r01*x1048))+(((-1.0)*r02*x1041))+((r00*x1036))+(((-1.0)*x1046*x1050))+(((7.44814942123594e-7)*x1044))+(((-1.0)*x1044*x1047))+(((2.73107346716569e-12)*x1039))+(((-1.0)*x1039*x1050))+(((2.73107346716569e-12)*x1046))+(((7.44814942123594e-7)*x1037))+(((-1.0)*r22*x1049))+(((-1.0)*x1039*x1040))+(((-1.0)*x1043*x1044))+(((2.60265077711611e-7)*x1038))+((r20*x1042))+(((-1.0)*x1037*x1047))+(((-1.0)*x1037*x1043))+(((1.90978190288101)*px))+(((-1.0)*x1040*x1046))+(((-1.0)*r21*x1045))+(((9.54335107914695e-13)*x1035))+(((7.00275247991204e-6)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1046*x1047))+((r02*x1049))+((x1044*x1050))+(((-7.00275247991204e-6)*px))+(((-1.0)*r00*x1042))+(((-9.54335107914695e-13)*x1038))+((x1037*x1050))+((x1037*x1040))+(((7.44814942123594e-7)*x1046))+((x1040*x1044))+(((7.44814942123594e-7)*x1039))+(((-1.0)*r22*x1041))+(((-1.0)*x1039*x1043))+(((-1.0)*x1039*x1047))+(((-2.73107346716569e-12)*x1044))+(((-1.0)*x1043*x1046))+(((2.60265077711611e-7)*x1035))+((r01*x1045))+((r20*x1036))+(((1.90978190288101)*pz))+(((-1.0)*r21*x1048))+(((-2.73107346716569e-12)*x1037)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1048))+(((-1.0)*r02*x1041))+((r00*x1036))+(((-1.0)*x1046*x1050))+(((7.44814942123594e-7)*x1044))+(((-1.0)*x1044*x1047))+(((2.73107346716569e-12)*x1039))+(((-1.0)*x1039*x1050))+(((2.73107346716569e-12)*x1046))+(((7.44814942123594e-7)*x1037))+(((-1.0)*r22*x1049))+(((-1.0)*x1039*x1040))+(((-1.0)*x1043*x1044))+(((2.60265077711611e-7)*x1038))+((r20*x1042))+(((-1.0)*x1037*x1047))+(((-1.0)*x1037*x1043))+(((1.90978190288101)*px))+(((-1.0)*x1040*x1046))+(((-1.0)*r21*x1045))+(((9.54335107914695e-13)*x1035))+(((7.00275247991204e-6)*pz))))+IKsqr(((((-1.0)*x1046*x1047))+((r02*x1049))+((x1044*x1050))+(((-7.00275247991204e-6)*px))+(((-1.0)*r00*x1042))+(((-9.54335107914695e-13)*x1038))+((x1037*x1050))+((x1037*x1040))+(((7.44814942123594e-7)*x1046))+((x1040*x1044))+(((7.44814942123594e-7)*x1039))+(((-1.0)*r22*x1041))+(((-1.0)*x1039*x1043))+(((-1.0)*x1039*x1047))+(((-2.73107346716569e-12)*x1044))+(((-1.0)*x1043*x1046))+(((2.60265077711611e-7)*x1035))+((r01*x1045))+((r20*x1036))+(((1.90978190288101)*pz))+(((-1.0)*r21*x1048))+(((-2.73107346716569e-12)*x1037))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x1048))+(((-1.0)*r02*x1041))+((r00*x1036))+(((-1.0)*x1046*x1050))+(((7.44814942123594e-7)*x1044))+(((-1.0)*x1044*x1047))+(((2.73107346716569e-12)*x1039))+(((-1.0)*x1039*x1050))+(((2.73107346716569e-12)*x1046))+(((7.44814942123594e-7)*x1037))+(((-1.0)*r22*x1049))+(((-1.0)*x1039*x1040))+(((-1.0)*x1043*x1044))+(((2.60265077711611e-7)*x1038))+((r20*x1042))+(((-1.0)*x1037*x1047))+(((-1.0)*x1037*x1043))+(((1.90978190288101)*px))+(((-1.0)*x1040*x1046))+(((-1.0)*r21*x1045))+(((9.54335107914695e-13)*x1035))+(((7.00275247991204e-6)*pz))), ((((-1.0)*x1046*x1047))+((r02*x1049))+((x1044*x1050))+(((-7.00275247991204e-6)*px))+(((-1.0)*r00*x1042))+(((-9.54335107914695e-13)*x1038))+((x1037*x1050))+((x1037*x1040))+(((7.44814942123594e-7)*x1046))+((x1040*x1044))+(((7.44814942123594e-7)*x1039))+(((-1.0)*r22*x1041))+(((-1.0)*x1039*x1043))+(((-1.0)*x1039*x1047))+(((-2.73107346716569e-12)*x1044))+(((-1.0)*x1043*x1046))+(((2.60265077711611e-7)*x1035))+((r01*x1045))+((r20*x1036))+(((1.90978190288101)*pz))+(((-1.0)*r21*x1048))+(((-2.73107346716569e-12)*x1037))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1051=IKsin(j1);
IkReal x1052=IKcos(j1);
IkReal x1053=((1.0)*pz);
IkReal x1054=((0.391671)*cj4);
IkReal x1055=(r20*sj5);
IkReal x1056=((0.391671)*sj4);
IkReal x1057=((3.91670999980416e-6)*cj5);
IkReal x1058=((1.36279999993186e-7)*cj4);
IkReal x1059=(r21*sj3);
IkReal x1060=((0.391670999980416)*sj5);
IkReal x1061=((3.9e-7)*cj5);
IkReal x1062=(cj5*r01);
IkReal x1063=(r00*sj5);
IkReal x1064=((1.36279999993186e-7)*sj4);
IkReal x1065=(r01*sj5);
IkReal x1066=((3.91670999980416e-6)*cj3);
IkReal x1067=(cj5*r00);
IkReal x1068=((0.391670999980416)*sj3);
IkReal x1069=(cj5*r21);
IkReal x1070=(r01*sj3);
IkReal x1071=(r21*sj5);
IkReal x1072=(cj5*r20);
IkReal x1073=((0.121761000001269)*x1065);
IkReal x1074=((0.52362)*x1051);
IkReal x1075=(r02*x1064);
IkReal x1076=((3.9e-7)*x1063);
IkReal x1077=((0.121761000001269)*x1067);
IkReal x1078=((1.92e-6)*x1052);
IkReal x1079=(r01*x1061);
IkReal x1080=((1.92e-6)*x1051);
IkReal x1081=((0.121761000001269)*x1071);
IkReal x1082=((0.52362)*x1052);
IkReal x1083=(r21*x1061);
IkReal x1084=((3.9e-7)*x1055);
IkReal x1085=(r22*x1064);
IkReal x1086=((0.121761000001269)*x1072);
IkReal x1087=((0.391670999980416)*cj3*cj4);
IkReal x1088=((3.91670999980416e-6)*cj4*sj3);
IkReal x1089=((3.91670999980416e-6)*sj3*sj4);
IkReal x1090=((0.391670999980416)*cj3*sj4);
IkReal x1091=(x1058*x1062);
IkReal x1092=(x1058*x1063);
IkReal x1093=(x1055*x1058);
IkReal x1094=(x1058*x1069);
IkReal x1095=(x1053+x1086+x1085+x1084+x1083);
IkReal x1096=(x1074+x1073+x1091+x1092);
IkReal x1097=(x1078+x1079+x1076+x1077+x1075);
IkReal x1098=(x1094+x1093+x1082+x1081+x1080);
evalcond[0]=((((-1.0)*r02*x1054))+x1097+(((-1.0)*x1096))+(((-1.0)*x1056*x1063))+(((-1.0)*x1056*x1062))+px);
evalcond[1]=(((x1056*x1069))+x1098+((x1055*x1056))+(((-1.0)*x1095))+((r22*x1054)));
evalcond[2]=(((x1068*x1072))+x1096+(((-1.0)*x1059*x1060))+(((-1.0)*x1097))+((cj3*r20*x1057))+((x1069*x1087))+(((-1.0)*px))+(((-1.0)*x1055*x1088))+((r22*x1089))+(((-1.0)*cj4*x1057*x1059))+(((-1.0)*x1066*x1071))+((x1055*x1087))+(((-1.0)*r22*x1090)));
evalcond[3]=(((cj4*x1057*x1070))+x1098+((x1060*x1070))+((x1063*x1088))+((r02*x1090))+(((-1.0)*x1095))+(((-1.0)*cj3*cj4*r00*x1060))+(((-1.0)*r02*x1089))+(((-1.0)*x1062*x1087))+(((-1.0)*x1067*x1068))+(((-1.0)*cj3*r00*x1057))+((x1065*x1066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1099=(sj1*sj4);
IkReal x1100=(cj5*r01);
IkReal x1101=(r20*sj5);
IkReal x1102=(cj4*sj1);
IkReal x1103=(r00*sj5);
IkReal x1104=(cj1*sj4);
IkReal x1105=(cj5*r21);
IkReal x1106=(cj1*cj4);
if( IKabs((((r02*x1106))+((x1100*x1104))+(((-1.0)*x1099*x1105))+(((-1.0)*x1099*x1101))+((x1103*x1104))+(((-1.0)*r22*x1102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x1102))+((x1101*x1104))+((x1104*x1105))+((x1099*x1100))+((x1099*x1103))+((r22*x1106)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1106))+((x1100*x1104))+(((-1.0)*x1099*x1105))+(((-1.0)*x1099*x1101))+((x1103*x1104))+(((-1.0)*r22*x1102))))+IKsqr((((r02*x1102))+((x1101*x1104))+((x1104*x1105))+((x1099*x1100))+((x1099*x1103))+((r22*x1106))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x1106))+((x1100*x1104))+(((-1.0)*x1099*x1105))+(((-1.0)*x1099*x1101))+((x1103*x1104))+(((-1.0)*r22*x1102))), (((r02*x1102))+((x1101*x1104))+((x1104*x1105))+((x1099*x1100))+((x1099*x1103))+((r22*x1106))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1107=IKcos(j2);
IkReal x1108=IKsin(j2);
IkReal x1109=(r22*sj4);
IkReal x1110=((0.99999999995)*cj3);
IkReal x1111=(r01*sj5);
IkReal x1112=((9.9999999995e-6)*cj3);
IkReal x1113=((1.36279999993186e-7)*cj4);
IkReal x1114=(cj5*r01);
IkReal x1115=(r20*sj5);
IkReal x1116=((9.9999999995e-6)*sj3);
IkReal x1117=((0.99999999995)*sj3);
IkReal x1118=(r00*sj5);
IkReal x1119=(cj5*r21);
IkReal x1120=(r02*sj4);
IkReal x1121=((1.0)*sj4);
IkReal x1122=(cj5*r20);
IkReal x1123=((1.0)*cj4);
IkReal x1124=(r21*sj5);
IkReal x1125=(cj5*r00);
IkReal x1126=(sj1*x1107);
IkReal x1127=(cj1*x1108);
IkReal x1128=(cj1*x1107);
IkReal x1129=(sj1*x1108);
IkReal x1130=(x1126+x1127);
evalcond[0]=(x1130+(((-1.0)*x1114*x1121))+(((-1.0)*r02*x1123))+(((-1.0)*x1118*x1121)));
evalcond[1]=(x1128+(((-1.0)*x1129))+(((-1.0)*r22*x1123))+(((-1.0)*x1119*x1121))+(((-1.0)*x1115*x1121)));
evalcond[2]=((((-3.9e-7)*x1119))+(((-3.9e-7)*x1115))+(((-0.391671)*x1129))+(((-0.121761000001269)*x1122))+((x1113*x1115))+((x1113*x1119))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x1109))+(((0.121761000001269)*x1124))+(((0.391671)*x1128)));
evalcond[3]=((((-3.9e-7)*x1118))+(((-3.9e-7)*x1114))+(((-1.36279999993186e-7)*x1120))+(((-0.121761000001269)*x1125))+((x1113*x1114))+((x1113*x1118))+(((0.52362)*sj1))+(((-1.0)*px))+(((-1.92e-6)*cj1))+(((0.121761000001269)*x1111))+(((0.391671)*x1127))+(((0.391671)*x1126)));
evalcond[4]=(((x1109*x1110))+x1130+((cj4*x1116*x1119))+(((-1.0)*x1112*x1122))+(((-1.0)*x1109*x1116))+(((-1.0)*x1117*x1122))+((x1112*x1124))+((x1117*x1124))+(((-1.0)*cj4*x1110*x1115))+(((-1.0)*cj4*x1110*x1119))+((cj4*x1115*x1116)));
evalcond[5]=(x1129+((cj4*x1116*x1118))+((x1111*x1112))+((x1111*x1117))+(((-1.0)*x1112*x1125))+(((-1.0)*x1117*x1125))+(((-1.0)*x1116*x1120))+((x1110*x1120))+((cj4*x1114*x1116))+(((-1.0)*x1128))+(((-1.0)*cj4*x1110*x1114))+(((-1.0)*cj4*x1110*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1131=((0.99999999995)*cj4);
IkReal x1132=(r20*sj5);
IkReal x1133=(cj5*r21);
IkReal x1134=((1.0)*sj4);
IkReal x1135=(r21*sj5);
IkReal x1136=(cj5*r20);
IkReal x1137=(r22*sj4);
IkReal x1138=((9.9999999995e-6)*cj4);
CheckValue<IkReal> x1139 = IKatan2WithCheck(IkReal(((((-9.9999999995e-6)*x1137))+(((-0.99999999995)*x1136))+((x1133*x1138))+(((0.99999999995)*x1135))+((x1132*x1138)))),IkReal(((((-9.9999999995e-6)*x1136))+(((-1.0)*x1131*x1132))+(((-1.0)*x1131*x1133))+(((9.9999999995e-6)*x1135))+(((0.99999999995)*x1137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1139.valid){
continue;
}
CheckValue<IkReal> x1140=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+(((-1.0)*r00*sj5*x1134))+(((-1.0)*cj5*r01*x1134)))),-1);
if(!x1140.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1139.value)+(((1.5707963267949)*(x1140.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1141=IKcos(j3);
IkReal x1142=IKsin(j3);
IkReal x1143=(r10*sj5);
IkReal x1144=(cj5*r01);
IkReal x1145=((9.9999999995e-6)*r12);
IkReal x1146=((0.99999999995)*cj4);
IkReal x1147=(cj5*r10);
IkReal x1148=(r11*sj5);
IkReal x1149=(cj5*r20);
IkReal x1150=(cj5*r21);
IkReal x1151=(r20*sj5);
IkReal x1152=((0.99999999995)*r12);
IkReal x1153=(r21*sj5);
IkReal x1154=(cj5*r11);
IkReal x1155=(r00*sj5);
IkReal x1156=(cj5*r00);
IkReal x1157=(r01*sj5);
IkReal x1158=(sj4*x1142);
IkReal x1159=((9.9999999995e-6)*x1142);
IkReal x1160=(sj4*x1141);
IkReal x1161=((0.99999999995)*x1142);
IkReal x1162=((0.99999999995)*x1141);
IkReal x1163=((9.9999999995e-6)*x1141);
IkReal x1164=(cj4*x1163);
evalcond[0]=((((-9.9999999995e-6)*r22*x1160))+((x1149*x1159))+((x1153*x1162))+((x1142*x1146*x1151))+((x1142*x1146*x1150))+(((-1.0)*x1149*x1162))+(((-0.99999999995)*r22*x1158))+(((-1.0)*x1153*x1159))+((x1151*x1164))+((x1150*x1164)));
evalcond[1]=((((-1.0)*x1156*x1162))+(((-1.0)*x1157*x1159))+((x1142*x1146*x1155))+((x1155*x1164))+((x1144*x1164))+((x1157*x1162))+(((-9.9999999995e-6)*r02*x1160))+((x1142*x1144*x1146))+((x1156*x1159))+(((-0.99999999995)*r02*x1158)));
evalcond[2]=((((-1.0)*x1147*x1161))+(((-1.0)*x1147*x1163))+((x1148*x1161))+((x1148*x1163))+(((-1.0)*x1141*x1143*x1146))+((cj4*x1154*x1159))+(((-1.0)*x1141*x1146*x1154))+((cj4*x1143*x1159))+((x1152*x1160))+(((-1.0)*x1145*x1158)));
evalcond[3]=((1.0)+((x1142*x1143*x1146))+(((-1.0)*x1147*x1162))+((x1142*x1146*x1154))+(((-1.0)*x1145*x1160))+((x1148*x1162))+((x1154*x1164))+((x1147*x1159))+((x1143*x1164))+(((-1.0)*x1152*x1158))+(((-1.0)*x1148*x1159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1165=(r22*sj4);
IkReal x1166=((0.232536954279117)*cj5);
IkReal x1167=(cj5*r01);
IkReal x1168=(r02*sj4);
IkReal x1169=(cj5*r21);
IkReal x1170=((9.54335107914695e-13)*cj4);
IkReal x1171=((0.748006187683308)*cj4);
IkReal x1172=((8.52662144715453e-7)*cj5);
IkReal x1173=((2.60265077711611e-7)*cj4);
IkReal x1174=(r00*sj5);
IkReal x1175=((8.52662144715453e-7)*sj5);
IkReal x1176=(r20*sj5);
IkReal x1177=((0.748006187683308)*sj4);
IkReal x1178=((0.232536954279117)*sj5);
IkReal x1179=((2.74277506655963e-6)*cj4);
IkReal x1180=((2.74277506655963e-6)*sj4);
if( IKabs(((((-1.0)*r21*x1175))+(((-1.0)*r02*x1171))+(((-1.0)*x1176*x1180))+((r20*x1172))+(((-1.0)*x1173*x1174))+((r00*x1166))+(((-1.0)*x1169*x1180))+(((7.44814942123594e-7)*x1167))+(((2.73107346716569e-12)*x1169))+(((7.44814942123594e-7)*x1174))+(((2.73107346716569e-12)*x1176))+(((-1.0)*r22*x1179))+(((-1.0)*x1167*x1177))+(((-1.0)*x1167*x1173))+(((1.90978190288101)*px))+(((-1.0)*r01*x1178))+(((-1.0)*x1170*x1176))+(((-1.0)*x1169*x1170))+(((9.54335107914695e-13)*x1165))+(((7.00275247991204e-6)*pz))+(((-1.0)*x1174*x1177))+(((2.60265077711611e-7)*x1168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1178))+((r02*x1179))+(((-2.73107346716569e-12)*x1174))+(((-7.00275247991204e-6)*px))+(((-1.0)*x1173*x1176))+(((-2.73107346716569e-12)*x1167))+((r20*x1166))+(((-9.54335107914695e-13)*x1168))+((r01*x1175))+((x1174*x1180))+(((7.44814942123594e-7)*x1169))+(((7.44814942123594e-7)*x1176))+(((-1.0)*r22*x1171))+((x1167*x1180))+(((1.90978190288101)*pz))+((x1167*x1170))+(((-1.0)*x1169*x1173))+(((-1.0)*x1169*x1177))+(((-1.0)*x1176*x1177))+(((-1.0)*r00*x1172))+((x1170*x1174))+(((2.60265077711611e-7)*x1165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1175))+(((-1.0)*r02*x1171))+(((-1.0)*x1176*x1180))+((r20*x1172))+(((-1.0)*x1173*x1174))+((r00*x1166))+(((-1.0)*x1169*x1180))+(((7.44814942123594e-7)*x1167))+(((2.73107346716569e-12)*x1169))+(((7.44814942123594e-7)*x1174))+(((2.73107346716569e-12)*x1176))+(((-1.0)*r22*x1179))+(((-1.0)*x1167*x1177))+(((-1.0)*x1167*x1173))+(((1.90978190288101)*px))+(((-1.0)*r01*x1178))+(((-1.0)*x1170*x1176))+(((-1.0)*x1169*x1170))+(((9.54335107914695e-13)*x1165))+(((7.00275247991204e-6)*pz))+(((-1.0)*x1174*x1177))+(((2.60265077711611e-7)*x1168))))+IKsqr(((((-1.0)*r21*x1178))+((r02*x1179))+(((-2.73107346716569e-12)*x1174))+(((-7.00275247991204e-6)*px))+(((-1.0)*x1173*x1176))+(((-2.73107346716569e-12)*x1167))+((r20*x1166))+(((-9.54335107914695e-13)*x1168))+((r01*x1175))+((x1174*x1180))+(((7.44814942123594e-7)*x1169))+(((7.44814942123594e-7)*x1176))+(((-1.0)*r22*x1171))+((x1167*x1180))+(((1.90978190288101)*pz))+((x1167*x1170))+(((-1.0)*x1169*x1173))+(((-1.0)*x1169*x1177))+(((-1.0)*x1176*x1177))+(((-1.0)*r00*x1172))+((x1170*x1174))+(((2.60265077711611e-7)*x1165))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r21*x1175))+(((-1.0)*r02*x1171))+(((-1.0)*x1176*x1180))+((r20*x1172))+(((-1.0)*x1173*x1174))+((r00*x1166))+(((-1.0)*x1169*x1180))+(((7.44814942123594e-7)*x1167))+(((2.73107346716569e-12)*x1169))+(((7.44814942123594e-7)*x1174))+(((2.73107346716569e-12)*x1176))+(((-1.0)*r22*x1179))+(((-1.0)*x1167*x1177))+(((-1.0)*x1167*x1173))+(((1.90978190288101)*px))+(((-1.0)*r01*x1178))+(((-1.0)*x1170*x1176))+(((-1.0)*x1169*x1170))+(((9.54335107914695e-13)*x1165))+(((7.00275247991204e-6)*pz))+(((-1.0)*x1174*x1177))+(((2.60265077711611e-7)*x1168))), ((((-1.0)*r21*x1178))+((r02*x1179))+(((-2.73107346716569e-12)*x1174))+(((-7.00275247991204e-6)*px))+(((-1.0)*x1173*x1176))+(((-2.73107346716569e-12)*x1167))+((r20*x1166))+(((-9.54335107914695e-13)*x1168))+((r01*x1175))+((x1174*x1180))+(((7.44814942123594e-7)*x1169))+(((7.44814942123594e-7)*x1176))+(((-1.0)*r22*x1171))+((x1167*x1180))+(((1.90978190288101)*pz))+((x1167*x1170))+(((-1.0)*x1169*x1173))+(((-1.0)*x1169*x1177))+(((-1.0)*x1176*x1177))+(((-1.0)*r00*x1172))+((x1170*x1174))+(((2.60265077711611e-7)*x1165))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1181=IKsin(j1);
IkReal x1182=IKcos(j1);
IkReal x1183=((1.0)*pz);
IkReal x1184=((0.391671)*cj4);
IkReal x1185=(r20*sj5);
IkReal x1186=((0.391671)*sj4);
IkReal x1187=((3.91670999980416e-6)*cj5);
IkReal x1188=((1.36279999993186e-7)*cj4);
IkReal x1189=(r21*sj3);
IkReal x1190=((0.391670999980416)*sj5);
IkReal x1191=((3.9e-7)*cj5);
IkReal x1192=(cj5*r01);
IkReal x1193=(r00*sj5);
IkReal x1194=((1.36279999993186e-7)*sj4);
IkReal x1195=(r01*sj5);
IkReal x1196=((3.91670999980416e-6)*cj3);
IkReal x1197=(cj5*r00);
IkReal x1198=((0.391670999980416)*sj3);
IkReal x1199=(cj5*r21);
IkReal x1200=(r01*sj3);
IkReal x1201=(r21*sj5);
IkReal x1202=(cj5*r20);
IkReal x1203=((0.121761000001269)*x1195);
IkReal x1204=((0.52362)*x1181);
IkReal x1205=(r02*x1194);
IkReal x1206=((3.9e-7)*x1193);
IkReal x1207=((0.121761000001269)*x1197);
IkReal x1208=((1.92e-6)*x1182);
IkReal x1209=(r01*x1191);
IkReal x1210=((1.92e-6)*x1181);
IkReal x1211=((0.121761000001269)*x1201);
IkReal x1212=((0.52362)*x1182);
IkReal x1213=(r21*x1191);
IkReal x1214=((3.9e-7)*x1185);
IkReal x1215=(r22*x1194);
IkReal x1216=((0.121761000001269)*x1202);
IkReal x1217=((0.391670999980416)*cj3*cj4);
IkReal x1218=((3.91670999980416e-6)*cj4*sj3);
IkReal x1219=((3.91670999980416e-6)*sj3*sj4);
IkReal x1220=((0.391670999980416)*cj3*sj4);
IkReal x1221=(x1188*x1192);
IkReal x1222=(x1188*x1193);
IkReal x1223=(x1185*x1188);
IkReal x1224=(x1188*x1199);
IkReal x1225=(x1183+x1213+x1216+x1214+x1215);
IkReal x1226=(x1204+x1203+x1222+x1221);
IkReal x1227=(x1209+x1208+x1205+x1207+x1206);
IkReal x1228=(x1224+x1223+x1212+x1210+x1211);
evalcond[0]=(x1227+(((-1.0)*x1226))+(((-1.0)*x1186*x1193))+(((-1.0)*x1186*x1192))+px+(((-1.0)*r02*x1184)));
evalcond[1]=(x1228+((x1186*x1199))+(((-1.0)*x1225))+((r22*x1184))+((x1185*x1186)));
evalcond[2]=((((-1.0)*x1185*x1218))+x1226+((x1199*x1217))+(((-1.0)*x1189*x1190))+((r22*x1219))+(((-1.0)*x1227))+((cj3*r20*x1187))+(((-1.0)*x1196*x1201))+(((-1.0)*cj4*x1187*x1189))+(((-1.0)*px))+(((-1.0)*r22*x1220))+((x1185*x1217))+((x1198*x1202)));
evalcond[3]=(x1228+(((-1.0)*x1192*x1217))+(((-1.0)*r02*x1219))+(((-1.0)*x1225))+((x1195*x1196))+((cj4*x1187*x1200))+(((-1.0)*x1197*x1198))+((x1193*x1218))+((x1190*x1200))+((r02*x1220))+(((-1.0)*cj3*cj4*r00*x1190))+(((-1.0)*cj3*r00*x1187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1229=(sj1*sj4);
IkReal x1230=(cj5*r01);
IkReal x1231=(r20*sj5);
IkReal x1232=(cj4*sj1);
IkReal x1233=(r00*sj5);
IkReal x1234=(cj1*sj4);
IkReal x1235=(cj5*r21);
IkReal x1236=(cj1*cj4);
if( IKabs(((((-1.0)*r22*x1232))+((r02*x1236))+((x1233*x1234))+((x1230*x1234))+(((-1.0)*x1229*x1231))+(((-1.0)*x1229*x1235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1234*x1235))+((r22*x1236))+((r02*x1232))+((x1231*x1234))+((x1229*x1230))+((x1229*x1233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1232))+((r02*x1236))+((x1233*x1234))+((x1230*x1234))+(((-1.0)*x1229*x1231))+(((-1.0)*x1229*x1235))))+IKsqr((((x1234*x1235))+((r22*x1236))+((r02*x1232))+((x1231*x1234))+((x1229*x1230))+((x1229*x1233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1232))+((r02*x1236))+((x1233*x1234))+((x1230*x1234))+(((-1.0)*x1229*x1231))+(((-1.0)*x1229*x1235))), (((x1234*x1235))+((r22*x1236))+((r02*x1232))+((x1231*x1234))+((x1229*x1230))+((x1229*x1233))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1237=IKcos(j2);
IkReal x1238=IKsin(j2);
IkReal x1239=(r22*sj4);
IkReal x1240=((0.99999999995)*cj3);
IkReal x1241=(r01*sj5);
IkReal x1242=((9.9999999995e-6)*cj3);
IkReal x1243=((1.36279999993186e-7)*cj4);
IkReal x1244=(cj5*r01);
IkReal x1245=(r20*sj5);
IkReal x1246=((9.9999999995e-6)*sj3);
IkReal x1247=((0.99999999995)*sj3);
IkReal x1248=(r00*sj5);
IkReal x1249=(cj5*r21);
IkReal x1250=(r02*sj4);
IkReal x1251=((1.0)*sj4);
IkReal x1252=(cj5*r20);
IkReal x1253=((1.0)*cj4);
IkReal x1254=(r21*sj5);
IkReal x1255=(cj5*r00);
IkReal x1256=(sj1*x1237);
IkReal x1257=(cj1*x1238);
IkReal x1258=(cj1*x1237);
IkReal x1259=(sj1*x1238);
IkReal x1260=(x1256+x1257);
evalcond[0]=(x1260+(((-1.0)*x1248*x1251))+(((-1.0)*x1244*x1251))+(((-1.0)*r02*x1253)));
evalcond[1]=((((-1.0)*x1249*x1251))+x1258+(((-1.0)*r22*x1253))+(((-1.0)*x1245*x1251))+(((-1.0)*x1259)));
evalcond[2]=((((-3.9e-7)*x1249))+(((-3.9e-7)*x1245))+(((0.391671)*x1258))+(((-0.391671)*x1259))+(((-1.36279999993186e-7)*x1239))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.121761000001269)*x1254))+(((-0.121761000001269)*x1252))+(((0.52362)*cj1))+((x1243*x1249))+((x1243*x1245)));
evalcond[3]=((((-3.9e-7)*x1248))+(((-3.9e-7)*x1244))+(((0.391671)*x1256))+(((0.391671)*x1257))+(((-1.36279999993186e-7)*x1250))+(((0.121761000001269)*x1241))+(((0.52362)*sj1))+(((-1.0)*px))+(((-0.121761000001269)*x1255))+(((-1.92e-6)*cj1))+((x1243*x1248))+((x1243*x1244)));
evalcond[4]=(((x1247*x1254))+(((-1.0)*x1239*x1246))+(((-1.0)*x1242*x1252))+x1260+((x1239*x1240))+(((-1.0)*x1247*x1252))+((cj4*x1245*x1246))+(((-1.0)*cj4*x1240*x1249))+(((-1.0)*cj4*x1240*x1245))+((cj4*x1246*x1249))+((x1242*x1254)));
evalcond[5]=((((-1.0)*x1242*x1255))+x1259+(((-1.0)*x1246*x1250))+(((-1.0)*x1247*x1255))+((cj4*x1244*x1246))+((x1241*x1247))+((x1241*x1242))+(((-1.0)*cj4*x1240*x1248))+(((-1.0)*cj4*x1240*x1244))+((cj4*x1246*x1248))+((x1240*x1250))+(((-1.0)*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1261=(r02*sj4);
IkReal x1262=((0.99999999995)*r00);
IkReal x1263=((9.9999999995e-6)*cj4);
IkReal x1264=(cj5*r01);
IkReal x1265=(r01*sj5);
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x1266.valid){
continue;
}
CheckValue<IkReal> x1267 = IKatan2WithCheck(IkReal(((((0.99999999995)*x1265))+(((-9.9999999995e-6)*x1261))+((r00*sj5*x1263))+(((-1.0)*cj5*x1262))+((x1263*x1264)))),IkReal(((((0.99999999995)*x1261))+(((-0.99999999995)*cj4*x1264))+(((9.9999999995e-6)*x1265))+(((-1.0)*cj4*sj5*x1262))+(((-9.9999999995e-6)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1267.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1266.value)))+(x1267.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1268=IKcos(j3);
IkReal x1269=IKsin(j3);
IkReal x1270=(r10*sj5);
IkReal x1271=(cj5*r01);
IkReal x1272=((9.9999999995e-6)*r12);
IkReal x1273=((0.99999999995)*cj4);
IkReal x1274=(cj5*r10);
IkReal x1275=(r11*sj5);
IkReal x1276=(cj5*r20);
IkReal x1277=(cj5*r21);
IkReal x1278=(r20*sj5);
IkReal x1279=((0.99999999995)*r12);
IkReal x1280=(r21*sj5);
IkReal x1281=(cj5*r11);
IkReal x1282=(r00*sj5);
IkReal x1283=(cj5*r00);
IkReal x1284=(r01*sj5);
IkReal x1285=(sj4*x1269);
IkReal x1286=((9.9999999995e-6)*x1269);
IkReal x1287=(sj4*x1268);
IkReal x1288=((0.99999999995)*x1269);
IkReal x1289=((0.99999999995)*x1268);
IkReal x1290=((9.9999999995e-6)*x1268);
IkReal x1291=(cj4*x1290);
evalcond[0]=((((-1.0)*x1276*x1289))+(((-0.99999999995)*r22*x1285))+((x1269*x1273*x1278))+((x1269*x1273*x1277))+((x1276*x1286))+((x1278*x1291))+(((-9.9999999995e-6)*r22*x1287))+((x1280*x1289))+(((-1.0)*x1280*x1286))+((x1277*x1291)));
evalcond[1]=(((x1269*x1271*x1273))+((x1284*x1289))+((x1282*x1291))+(((-0.99999999995)*r02*x1285))+(((-1.0)*x1284*x1286))+((x1283*x1286))+((x1271*x1291))+((x1269*x1273*x1282))+(((-1.0)*x1283*x1289))+(((-9.9999999995e-6)*r02*x1287)));
evalcond[2]=(((x1279*x1287))+(((-1.0)*x1274*x1290))+((cj4*x1270*x1286))+((x1275*x1288))+(((-1.0)*x1268*x1270*x1273))+(((-1.0)*x1272*x1285))+((cj4*x1281*x1286))+(((-1.0)*x1274*x1288))+((x1275*x1290))+(((-1.0)*x1268*x1273*x1281)));
evalcond[3]=((1.0)+(((-1.0)*x1275*x1286))+((x1275*x1289))+((x1281*x1291))+(((-1.0)*x1272*x1287))+((x1270*x1291))+((x1269*x1273*x1281))+(((-1.0)*x1274*x1289))+((x1274*x1286))+(((-1.0)*x1279*x1285))+((x1269*x1270*x1273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1292=(r22*sj4);
IkReal x1293=((0.232536954279117)*cj5);
IkReal x1294=(cj5*r01);
IkReal x1295=(r02*sj4);
IkReal x1296=(cj5*r21);
IkReal x1297=((9.54335107914695e-13)*cj4);
IkReal x1298=((0.748006187683308)*cj4);
IkReal x1299=((8.52662144715453e-7)*cj5);
IkReal x1300=((2.60265077711611e-7)*cj4);
IkReal x1301=(r00*sj5);
IkReal x1302=((8.52662144715453e-7)*sj5);
IkReal x1303=(r20*sj5);
IkReal x1304=((0.748006187683308)*sj4);
IkReal x1305=((0.232536954279117)*sj5);
IkReal x1306=((2.74277506655963e-6)*cj4);
IkReal x1307=((2.74277506655963e-6)*sj4);
if( IKabs((((r20*x1299))+(((7.44814942123594e-7)*x1301))+(((-1.0)*r01*x1305))+(((7.44814942123594e-7)*x1294))+(((-1.0)*r22*x1306))+(((-1.0)*x1300*x1301))+(((-1.0)*x1297*x1303))+(((-1.0)*r21*x1302))+(((2.60265077711611e-7)*x1295))+(((-1.0)*x1303*x1307))+(((-1.0)*x1296*x1307))+(((-1.0)*x1294*x1300))+(((-1.0)*x1294*x1304))+(((-1.0)*r02*x1298))+(((2.73107346716569e-12)*x1303))+(((1.90978190288101)*px))+(((-1.0)*x1301*x1304))+(((9.54335107914695e-13)*x1292))+(((-1.0)*x1296*x1297))+((r00*x1293))+(((7.00275247991204e-6)*pz))+(((2.73107346716569e-12)*x1296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1293))+(((7.44814942123594e-7)*x1303))+(((-7.00275247991204e-6)*px))+(((-1.0)*r00*x1299))+(((-2.73107346716569e-12)*x1301))+(((7.44814942123594e-7)*x1296))+(((-9.54335107914695e-13)*x1295))+((x1294*x1297))+(((-1.0)*x1300*x1303))+(((-1.0)*r21*x1305))+((x1294*x1307))+(((2.60265077711611e-7)*x1292))+(((-1.0)*x1303*x1304))+(((-1.0)*x1296*x1304))+(((-1.0)*x1296*x1300))+(((1.90978190288101)*pz))+((x1297*x1301))+((r02*x1306))+(((-1.0)*r22*x1298))+(((-2.73107346716569e-12)*x1294))+((x1301*x1307))+((r01*x1302)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1299))+(((7.44814942123594e-7)*x1301))+(((-1.0)*r01*x1305))+(((7.44814942123594e-7)*x1294))+(((-1.0)*r22*x1306))+(((-1.0)*x1300*x1301))+(((-1.0)*x1297*x1303))+(((-1.0)*r21*x1302))+(((2.60265077711611e-7)*x1295))+(((-1.0)*x1303*x1307))+(((-1.0)*x1296*x1307))+(((-1.0)*x1294*x1300))+(((-1.0)*x1294*x1304))+(((-1.0)*r02*x1298))+(((2.73107346716569e-12)*x1303))+(((1.90978190288101)*px))+(((-1.0)*x1301*x1304))+(((9.54335107914695e-13)*x1292))+(((-1.0)*x1296*x1297))+((r00*x1293))+(((7.00275247991204e-6)*pz))+(((2.73107346716569e-12)*x1296))))+IKsqr((((r20*x1293))+(((7.44814942123594e-7)*x1303))+(((-7.00275247991204e-6)*px))+(((-1.0)*r00*x1299))+(((-2.73107346716569e-12)*x1301))+(((7.44814942123594e-7)*x1296))+(((-9.54335107914695e-13)*x1295))+((x1294*x1297))+(((-1.0)*x1300*x1303))+(((-1.0)*r21*x1305))+((x1294*x1307))+(((2.60265077711611e-7)*x1292))+(((-1.0)*x1303*x1304))+(((-1.0)*x1296*x1304))+(((-1.0)*x1296*x1300))+(((1.90978190288101)*pz))+((x1297*x1301))+((r02*x1306))+(((-1.0)*r22*x1298))+(((-2.73107346716569e-12)*x1294))+((x1301*x1307))+((r01*x1302))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r20*x1299))+(((7.44814942123594e-7)*x1301))+(((-1.0)*r01*x1305))+(((7.44814942123594e-7)*x1294))+(((-1.0)*r22*x1306))+(((-1.0)*x1300*x1301))+(((-1.0)*x1297*x1303))+(((-1.0)*r21*x1302))+(((2.60265077711611e-7)*x1295))+(((-1.0)*x1303*x1307))+(((-1.0)*x1296*x1307))+(((-1.0)*x1294*x1300))+(((-1.0)*x1294*x1304))+(((-1.0)*r02*x1298))+(((2.73107346716569e-12)*x1303))+(((1.90978190288101)*px))+(((-1.0)*x1301*x1304))+(((9.54335107914695e-13)*x1292))+(((-1.0)*x1296*x1297))+((r00*x1293))+(((7.00275247991204e-6)*pz))+(((2.73107346716569e-12)*x1296))), (((r20*x1293))+(((7.44814942123594e-7)*x1303))+(((-7.00275247991204e-6)*px))+(((-1.0)*r00*x1299))+(((-2.73107346716569e-12)*x1301))+(((7.44814942123594e-7)*x1296))+(((-9.54335107914695e-13)*x1295))+((x1294*x1297))+(((-1.0)*x1300*x1303))+(((-1.0)*r21*x1305))+((x1294*x1307))+(((2.60265077711611e-7)*x1292))+(((-1.0)*x1303*x1304))+(((-1.0)*x1296*x1304))+(((-1.0)*x1296*x1300))+(((1.90978190288101)*pz))+((x1297*x1301))+((r02*x1306))+(((-1.0)*r22*x1298))+(((-2.73107346716569e-12)*x1294))+((x1301*x1307))+((r01*x1302))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1308=IKsin(j1);
IkReal x1309=IKcos(j1);
IkReal x1310=((1.0)*pz);
IkReal x1311=((0.391671)*cj4);
IkReal x1312=(r20*sj5);
IkReal x1313=((0.391671)*sj4);
IkReal x1314=((3.91670999980416e-6)*cj5);
IkReal x1315=((1.36279999993186e-7)*cj4);
IkReal x1316=(r21*sj3);
IkReal x1317=((0.391670999980416)*sj5);
IkReal x1318=((3.9e-7)*cj5);
IkReal x1319=(cj5*r01);
IkReal x1320=(r00*sj5);
IkReal x1321=((1.36279999993186e-7)*sj4);
IkReal x1322=(r01*sj5);
IkReal x1323=((3.91670999980416e-6)*cj3);
IkReal x1324=(cj5*r00);
IkReal x1325=((0.391670999980416)*sj3);
IkReal x1326=(cj5*r21);
IkReal x1327=(r01*sj3);
IkReal x1328=(r21*sj5);
IkReal x1329=(cj5*r20);
IkReal x1330=((0.121761000001269)*x1322);
IkReal x1331=((0.52362)*x1308);
IkReal x1332=(r02*x1321);
IkReal x1333=((3.9e-7)*x1320);
IkReal x1334=((0.121761000001269)*x1324);
IkReal x1335=((1.92e-6)*x1309);
IkReal x1336=(r01*x1318);
IkReal x1337=((1.92e-6)*x1308);
IkReal x1338=((0.121761000001269)*x1328);
IkReal x1339=((0.52362)*x1309);
IkReal x1340=(r21*x1318);
IkReal x1341=((3.9e-7)*x1312);
IkReal x1342=(r22*x1321);
IkReal x1343=((0.121761000001269)*x1329);
IkReal x1344=((0.391670999980416)*cj3*cj4);
IkReal x1345=((3.91670999980416e-6)*cj4*sj3);
IkReal x1346=((3.91670999980416e-6)*sj3*sj4);
IkReal x1347=((0.391670999980416)*cj3*sj4);
IkReal x1348=(x1315*x1319);
IkReal x1349=(x1315*x1320);
IkReal x1350=(x1312*x1315);
IkReal x1351=(x1315*x1326);
IkReal x1352=(x1340+x1341+x1342+x1343+x1310);
IkReal x1353=(x1348+x1349+x1331+x1330);
IkReal x1354=(x1335+x1334+x1336+x1333+x1332);
IkReal x1355=(x1351+x1350+x1339+x1338+x1337);
evalcond[0]=(x1354+(((-1.0)*x1353))+(((-1.0)*x1313*x1319))+(((-1.0)*x1313*x1320))+(((-1.0)*r02*x1311))+px);
evalcond[1]=(x1355+(((-1.0)*x1352))+((x1313*x1326))+((r22*x1311))+((x1312*x1313)));
evalcond[2]=(x1353+(((-1.0)*x1354))+((x1326*x1344))+(((-1.0)*x1323*x1328))+(((-1.0)*x1312*x1345))+((r22*x1346))+((x1312*x1344))+(((-1.0)*px))+(((-1.0)*cj4*x1314*x1316))+(((-1.0)*r22*x1347))+((x1325*x1329))+(((-1.0)*x1316*x1317))+((cj3*r20*x1314)));
evalcond[3]=(x1355+(((-1.0)*x1352))+(((-1.0)*cj3*cj4*r00*x1317))+(((-1.0)*r02*x1346))+(((-1.0)*x1324*x1325))+((x1320*x1345))+((x1322*x1323))+((r02*x1347))+(((-1.0)*x1319*x1344))+(((-1.0)*cj3*r00*x1314))+((x1317*x1327))+((cj4*x1314*x1327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1356=(sj1*sj4);
IkReal x1357=(cj5*r01);
IkReal x1358=(r20*sj5);
IkReal x1359=(cj4*sj1);
IkReal x1360=(r00*sj5);
IkReal x1361=(cj1*sj4);
IkReal x1362=(cj5*r21);
IkReal x1363=(cj1*cj4);
if( IKabs((((x1357*x1361))+((x1360*x1361))+(((-1.0)*x1356*x1362))+((r02*x1363))+(((-1.0)*x1356*x1358))+(((-1.0)*r22*x1359)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1356*x1360))+((r22*x1363))+((x1361*x1362))+((x1358*x1361))+((r02*x1359))+((x1356*x1357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1357*x1361))+((x1360*x1361))+(((-1.0)*x1356*x1362))+((r02*x1363))+(((-1.0)*x1356*x1358))+(((-1.0)*r22*x1359))))+IKsqr((((x1356*x1360))+((r22*x1363))+((x1361*x1362))+((x1358*x1361))+((r02*x1359))+((x1356*x1357))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1357*x1361))+((x1360*x1361))+(((-1.0)*x1356*x1362))+((r02*x1363))+(((-1.0)*x1356*x1358))+(((-1.0)*r22*x1359))), (((x1356*x1360))+((r22*x1363))+((x1361*x1362))+((x1358*x1361))+((r02*x1359))+((x1356*x1357))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1364=IKcos(j2);
IkReal x1365=IKsin(j2);
IkReal x1366=(r22*sj4);
IkReal x1367=((0.99999999995)*cj3);
IkReal x1368=(r01*sj5);
IkReal x1369=((9.9999999995e-6)*cj3);
IkReal x1370=((1.36279999993186e-7)*cj4);
IkReal x1371=(cj5*r01);
IkReal x1372=(r20*sj5);
IkReal x1373=((9.9999999995e-6)*sj3);
IkReal x1374=((0.99999999995)*sj3);
IkReal x1375=(r00*sj5);
IkReal x1376=(cj5*r21);
IkReal x1377=(r02*sj4);
IkReal x1378=((1.0)*sj4);
IkReal x1379=(cj5*r20);
IkReal x1380=((1.0)*cj4);
IkReal x1381=(r21*sj5);
IkReal x1382=(cj5*r00);
IkReal x1383=(sj1*x1364);
IkReal x1384=(cj1*x1365);
IkReal x1385=(cj1*x1364);
IkReal x1386=(sj1*x1365);
IkReal x1387=(x1384+x1383);
evalcond[0]=(x1387+(((-1.0)*r02*x1380))+(((-1.0)*x1371*x1378))+(((-1.0)*x1375*x1378)));
evalcond[1]=(x1385+(((-1.0)*x1372*x1378))+(((-1.0)*x1376*x1378))+(((-1.0)*x1386))+(((-1.0)*r22*x1380)));
evalcond[2]=((((-1.36279999993186e-7)*x1366))+(((0.121761000001269)*x1381))+(((-3.9e-7)*x1376))+(((-3.9e-7)*x1372))+(((1.92e-6)*sj1))+(((-0.121761000001269)*x1379))+(((-1.0)*pz))+((x1370*x1372))+((x1370*x1376))+(((-0.391671)*x1386))+(((0.52362)*cj1))+(((0.391671)*x1385)));
evalcond[3]=((((0.52362)*sj1))+(((-1.36279999993186e-7)*x1377))+(((-3.9e-7)*x1375))+(((-3.9e-7)*x1371))+(((-1.0)*px))+((x1370*x1371))+((x1370*x1375))+(((-1.92e-6)*cj1))+(((0.121761000001269)*x1368))+(((0.391671)*x1383))+(((0.391671)*x1384))+(((-0.121761000001269)*x1382)));
evalcond[4]=(x1387+((x1366*x1367))+(((-1.0)*x1374*x1379))+(((-1.0)*x1366*x1373))+(((-1.0)*cj4*x1367*x1372))+(((-1.0)*cj4*x1367*x1376))+((x1374*x1381))+((cj4*x1372*x1373))+(((-1.0)*x1369*x1379))+((x1369*x1381))+((cj4*x1373*x1376)));
evalcond[5]=(x1386+((x1367*x1377))+(((-1.0)*x1374*x1382))+((x1368*x1374))+(((-1.0)*x1385))+(((-1.0)*cj4*x1367*x1375))+(((-1.0)*cj4*x1367*x1371))+(((-1.0)*x1373*x1377))+((x1368*x1369))+(((-1.0)*x1369*x1382))+((cj4*x1373*x1375))+((cj4*x1371*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1388=(r21*sj5);
IkReal x1389=(r22*sj4);
IkReal x1390=((10000000000.5)*cj4);
IkReal x1391=(cj5*r21);
IkReal x1392=(r20*sj5);
IkReal x1393=((100000.000005)*cj4);
IkReal x1394=(cj5*r20);
IkReal x1395=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x1395;
j3eval[1]=IKsign(x1395);
j3eval[2]=((IKabs(((((100000.000005)*x1388))+(((-100000.000005)*x1394))+(((-1.0)*x1390*x1391))+(((-1.0)*x1390*x1392))+(((10000000000.5)*x1389)))))+(IKabs(((((-10000000000.5)*x1394))+(((-100000.000005)*x1389))+((x1391*x1393))+(((10000000000.5)*x1388))+((x1392*x1393))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1396=((1.0)*sj4);
IkReal x1397=((10000000000.5)*sj5);
IkReal x1398=(cj4*r00);
IkReal x1399=((100000.000005)*sj5);
IkReal x1400=(r02*sj4);
IkReal x1401=(cj5*r00);
IkReal x1402=(cj4*cj5*r01);
IkReal x1403=((((-1.0)*cj5*r21*x1396))+(((-1.0)*r20*sj5*x1396))+(((-1.0)*cj4*r22)));
j3eval[0]=x1403;
j3eval[1]=((IKabs((((x1398*x1399))+(((100000.000005)*x1402))+((r01*x1397))+(((-100000.000005)*x1400))+(((-10000000000.5)*x1401)))))+(IKabs(((((-1.0)*x1397*x1398))+(((10000000000.5)*x1400))+((r01*x1399))+(((-100000.000005)*x1401))+(((-10000000000.5)*x1402))))));
j3eval[2]=IKsign(x1403);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1404=cj4*cj4;
IkReal x1405=cj5*cj5;
IkReal x1406=r10*r10;
IkReal x1407=r11*r11;
IkReal x1408=r12*r12;
IkReal x1409=(r10*sj5);
IkReal x1410=(cj5*r10);
IkReal x1411=(r11*sj5);
IkReal x1412=(r12*sj4);
IkReal x1413=(cj4*cj5*r11);
IkReal x1414=((2.0)*x1412);
IkReal x1415=((2.0)*cj5*r11);
IkReal x1416=((1.0)*x1407);
IkReal x1417=(x1405*x1406);
IkReal x1418=((((-1.0)*x1408))+((x1413*x1414))+(((-1.0)*x1416))+((cj4*x1409*x1414))+((x1405*x1407))+((x1404*x1417))+((x1404*x1408))+(((-1.0)*x1404*x1409*x1415))+(((-1.0)*x1404*x1406))+((x1409*x1415))+(((-1.0)*x1404*x1405*x1416))+(((-1.0)*x1417)));
j3eval[0]=x1418;
j3eval[1]=IKsign(x1418);
j3eval[2]=((IKabs(((((-10000000000.5)*x1411))+(((10000000000.5)*x1410))+(((100000.000005)*x1412))+(((-100000.000005)*x1413))+(((-100000.000005)*cj4*x1409)))))+(IKabs(((((-10000000000.5)*x1413))+(((10000000000.5)*x1412))+(((-10000000000.5)*cj4*x1409))+(((100000.000005)*x1411))+(((-100000.000005)*x1410))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1419=cj4*cj4;
IkReal x1420=cj5*cj5;
IkReal x1421=r10*r10;
IkReal x1422=r11*r11;
IkReal x1423=r12*r12;
IkReal x1424=(r12*sj4);
IkReal x1425=(r11*sj5);
IkReal x1426=(cj5*r10);
IkReal x1427=((2.0)*x1426);
IkReal x1428=(cj4*cj5*r11);
IkReal x1429=((1.0)*x1422);
IkReal x1430=(cj4*r10*sj5);
IkReal x1431=(x1419*x1421);
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(IKsign((((x1425*x1427))+((x1420*x1422))+(((-1.0)*x1431))+(((-1.0)*x1419*x1420*x1429))+(((-1.0)*x1420*x1421))+(((2.0)*x1424*x1430))+(((-1.0)*x1419*x1425*x1427))+(((-1.0)*x1423))+((x1419*x1423))+((x1420*x1431))+(((2.0)*x1424*x1428))+(((-1.0)*x1429)))),-1);
if(!x1432.valid){
continue;
}
CheckValue<IkReal> x1433 = IKatan2WithCheck(IkReal(((((9.9999999995e-6)*x1425))+(((-9.9999999995e-6)*x1426))+(((-0.99999999995)*x1430))+(((0.99999999995)*x1424))+(((-0.99999999995)*x1428)))),IkReal(((((9.9999999995e-6)*x1424))+(((-9.9999999995e-6)*x1428))+(((0.99999999995)*x1426))+(((-9.9999999995e-6)*x1430))+(((-0.99999999995)*x1425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1433.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1432.value)))+(x1433.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1434=IKcos(j3);
IkReal x1435=IKsin(j3);
IkReal x1436=(r10*sj5);
IkReal x1437=(cj5*r01);
IkReal x1438=((9.9999999995e-6)*r12);
IkReal x1439=((0.99999999995)*cj4);
IkReal x1440=(cj5*r10);
IkReal x1441=(r11*sj5);
IkReal x1442=(cj5*r20);
IkReal x1443=(cj5*r21);
IkReal x1444=(r20*sj5);
IkReal x1445=((0.99999999995)*r12);
IkReal x1446=(r21*sj5);
IkReal x1447=(cj5*r11);
IkReal x1448=(r00*sj5);
IkReal x1449=(cj5*r00);
IkReal x1450=(r01*sj5);
IkReal x1451=(sj4*x1435);
IkReal x1452=((9.9999999995e-6)*x1435);
IkReal x1453=(sj4*x1434);
IkReal x1454=((0.99999999995)*x1435);
IkReal x1455=((0.99999999995)*x1434);
IkReal x1456=((9.9999999995e-6)*x1434);
IkReal x1457=(cj4*x1456);
evalcond[0]=(((x1446*x1455))+(((-9.9999999995e-6)*r22*x1453))+((x1435*x1439*x1443))+((x1435*x1439*x1444))+(((-1.0)*x1446*x1452))+(((-0.99999999995)*r22*x1451))+((x1443*x1457))+((x1442*x1452))+(((-1.0)*x1442*x1455))+((x1444*x1457)));
evalcond[1]=(((x1450*x1455))+((x1437*x1457))+((x1448*x1457))+(((-9.9999999995e-6)*r02*x1453))+((x1435*x1439*x1448))+(((-0.99999999995)*r02*x1451))+((x1435*x1437*x1439))+((x1449*x1452))+(((-1.0)*x1449*x1455))+(((-1.0)*x1450*x1452)));
evalcond[2]=(((x1445*x1453))+((cj4*x1436*x1452))+(((-1.0)*x1440*x1454))+(((-1.0)*x1440*x1456))+((cj4*x1447*x1452))+(((-1.0)*x1434*x1436*x1439))+(((-1.0)*x1434*x1439*x1447))+((x1441*x1456))+((x1441*x1454))+(((-1.0)*x1438*x1451)));
evalcond[3]=((-1.0)+(((-1.0)*x1441*x1452))+((x1447*x1457))+(((-1.0)*x1445*x1451))+(((-1.0)*x1440*x1455))+((x1435*x1439*x1447))+((x1440*x1452))+((x1435*x1436*x1439))+((x1441*x1455))+(((-1.0)*x1438*x1453))+((x1436*x1457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1458=(r22*sj4);
IkReal x1459=((0.232536954279117)*cj5);
IkReal x1460=(cj5*r01);
IkReal x1461=(r02*sj4);
IkReal x1462=(cj5*r21);
IkReal x1463=((9.54335107914695e-13)*cj4);
IkReal x1464=((0.748006187683308)*cj4);
IkReal x1465=((8.52662144715453e-7)*cj5);
IkReal x1466=((2.60265077711611e-7)*cj4);
IkReal x1467=(r00*sj5);
IkReal x1468=((8.52662144715453e-7)*sj5);
IkReal x1469=(r20*sj5);
IkReal x1470=((0.748006187683308)*sj4);
IkReal x1471=((0.232536954279117)*sj5);
IkReal x1472=((2.74277506655963e-6)*cj4);
IkReal x1473=((2.74277506655963e-6)*sj4);
if( IKabs(((((-1.0)*r22*x1472))+(((9.54335107914695e-13)*x1458))+((x1460*x1470))+((r20*x1465))+((x1467*x1470))+(((-1.0)*x1462*x1463))+((x1466*x1467))+(((-7.44814942123594e-7)*x1460))+(((-7.44814942123594e-7)*x1467))+(((-1.0)*x1463*x1469))+(((-1.0)*r21*x1468))+(((-1.0)*x1469*x1473))+((x1460*x1466))+(((-1.0)*r00*x1459))+(((2.73107346716569e-12)*x1462))+(((2.73107346716569e-12)*x1469))+((r01*x1471))+((r02*x1464))+(((-1.0)*x1462*x1473))+(((-2.60265077711611e-7)*x1461))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1471))+(((2.60265077711611e-7)*x1458))+((r20*x1459))+(((-1.0)*x1460*x1473))+(((-1.0)*r22*x1464))+(((-1.0)*x1466*x1469))+(((-1.0)*x1462*x1466))+((r00*x1465))+(((-1.0)*x1463*x1467))+(((-1.0)*r01*x1468))+(((-1.0)*x1469*x1470))+(((-1.0)*x1467*x1473))+(((1.90978190288101)*pz))+(((-1.0)*x1460*x1463))+(((2.73107346716569e-12)*x1460))+(((2.73107346716569e-12)*x1467))+(((-1.0)*r02*x1472))+(((9.54335107914695e-13)*x1461))+(((7.44814942123594e-7)*x1462))+(((7.44814942123594e-7)*x1469))+(((-1.0)*x1462*x1470))+(((7.00275247991204e-6)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1472))+(((9.54335107914695e-13)*x1458))+((x1460*x1470))+((r20*x1465))+((x1467*x1470))+(((-1.0)*x1462*x1463))+((x1466*x1467))+(((-7.44814942123594e-7)*x1460))+(((-7.44814942123594e-7)*x1467))+(((-1.0)*x1463*x1469))+(((-1.0)*r21*x1468))+(((-1.0)*x1469*x1473))+((x1460*x1466))+(((-1.0)*r00*x1459))+(((2.73107346716569e-12)*x1462))+(((2.73107346716569e-12)*x1469))+((r01*x1471))+((r02*x1464))+(((-1.0)*x1462*x1473))+(((-2.60265077711611e-7)*x1461))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px))))+IKsqr(((((-1.0)*r21*x1471))+(((2.60265077711611e-7)*x1458))+((r20*x1459))+(((-1.0)*x1460*x1473))+(((-1.0)*r22*x1464))+(((-1.0)*x1466*x1469))+(((-1.0)*x1462*x1466))+((r00*x1465))+(((-1.0)*x1463*x1467))+(((-1.0)*r01*x1468))+(((-1.0)*x1469*x1470))+(((-1.0)*x1467*x1473))+(((1.90978190288101)*pz))+(((-1.0)*x1460*x1463))+(((2.73107346716569e-12)*x1460))+(((2.73107346716569e-12)*x1467))+(((-1.0)*r02*x1472))+(((9.54335107914695e-13)*x1461))+(((7.44814942123594e-7)*x1462))+(((7.44814942123594e-7)*x1469))+(((-1.0)*x1462*x1470))+(((7.00275247991204e-6)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r22*x1472))+(((9.54335107914695e-13)*x1458))+((x1460*x1470))+((r20*x1465))+((x1467*x1470))+(((-1.0)*x1462*x1463))+((x1466*x1467))+(((-7.44814942123594e-7)*x1460))+(((-7.44814942123594e-7)*x1467))+(((-1.0)*x1463*x1469))+(((-1.0)*r21*x1468))+(((-1.0)*x1469*x1473))+((x1460*x1466))+(((-1.0)*r00*x1459))+(((2.73107346716569e-12)*x1462))+(((2.73107346716569e-12)*x1469))+((r01*x1471))+((r02*x1464))+(((-1.0)*x1462*x1473))+(((-2.60265077711611e-7)*x1461))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px))), ((((-1.0)*r21*x1471))+(((2.60265077711611e-7)*x1458))+((r20*x1459))+(((-1.0)*x1460*x1473))+(((-1.0)*r22*x1464))+(((-1.0)*x1466*x1469))+(((-1.0)*x1462*x1466))+((r00*x1465))+(((-1.0)*x1463*x1467))+(((-1.0)*r01*x1468))+(((-1.0)*x1469*x1470))+(((-1.0)*x1467*x1473))+(((1.90978190288101)*pz))+(((-1.0)*x1460*x1463))+(((2.73107346716569e-12)*x1460))+(((2.73107346716569e-12)*x1467))+(((-1.0)*r02*x1472))+(((9.54335107914695e-13)*x1461))+(((7.44814942123594e-7)*x1462))+(((7.44814942123594e-7)*x1469))+(((-1.0)*x1462*x1470))+(((7.00275247991204e-6)*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1474=IKsin(j1);
IkReal x1475=IKcos(j1);
IkReal x1476=((1.0)*px);
IkReal x1477=((0.391671)*cj4);
IkReal x1478=(r20*sj5);
IkReal x1479=((0.391671)*sj4);
IkReal x1480=((3.91670999980416e-6)*cj5);
IkReal x1481=((1.36279999993186e-7)*cj4);
IkReal x1482=(r21*sj3);
IkReal x1483=((0.391670999980416)*sj5);
IkReal x1484=((3.9e-7)*cj5);
IkReal x1485=(cj5*r01);
IkReal x1486=(r00*sj5);
IkReal x1487=((1.36279999993186e-7)*sj4);
IkReal x1488=(r01*sj5);
IkReal x1489=((3.91670999980416e-6)*cj3);
IkReal x1490=(cj5*r00);
IkReal x1491=((0.391670999980416)*sj3);
IkReal x1492=(cj5*r21);
IkReal x1493=(r01*sj3);
IkReal x1494=(r21*sj5);
IkReal x1495=(cj5*r20);
IkReal x1496=(r21*x1484);
IkReal x1497=((3.9e-7)*x1478);
IkReal x1498=(r22*x1487);
IkReal x1499=((0.121761000001269)*x1495);
IkReal x1500=((1.92e-6)*x1474);
IkReal x1501=((0.121761000001269)*x1494);
IkReal x1502=((0.52362)*x1475);
IkReal x1503=((0.121761000001269)*x1488);
IkReal x1504=((1.92e-6)*x1475);
IkReal x1505=(r02*x1487);
IkReal x1506=((3.9e-7)*x1486);
IkReal x1507=((0.52362)*x1474);
IkReal x1508=((0.121761000001269)*x1490);
IkReal x1509=(r01*x1484);
IkReal x1510=((0.391670999980416)*cj3*cj4);
IkReal x1511=((3.91670999980416e-6)*cj4*sj3);
IkReal x1512=((3.91670999980416e-6)*sj3*sj4);
IkReal x1513=((0.391670999980416)*cj3*sj4);
IkReal x1514=(x1478*x1481);
IkReal x1515=(x1481*x1492);
IkReal x1516=(x1481*x1485);
IkReal x1517=(x1481*x1486);
IkReal x1518=(x1496+x1497+x1498+x1499);
IkReal x1519=(x1503+x1504+x1517+x1516);
IkReal x1520=(x1506+x1507+x1505+x1508+x1509+x1476);
IkReal x1521=(x1502+x1500+x1501+x1515+x1514);
evalcond[0]=((((-1.0)*x1520))+((r02*x1477))+x1519+((x1479*x1485))+((x1479*x1486)));
evalcond[1]=(((x1479*x1492))+(((-1.0)*x1518))+((x1478*x1479))+((r22*x1477))+(((-1.0)*pz))+x1521);
evalcond[2]=((((-1.0)*x1485*x1510))+(((-1.0)*cj3*r00*x1480))+(((-1.0)*cj3*cj4*r00*x1483))+(((-1.0)*x1521))+x1518+(((-1.0)*r02*x1512))+((r02*x1513))+((x1483*x1493))+pz+(((-1.0)*x1490*x1491))+((x1486*x1511))+((x1488*x1489))+((cj4*x1480*x1493)));
evalcond[3]=((((-1.0)*x1492*x1510))+(((-1.0)*r22*x1512))+((x1482*x1483))+((x1489*x1494))+(((-1.0)*x1520))+x1519+(((-1.0)*cj3*r20*x1480))+(((-1.0)*x1491*x1495))+((r22*x1513))+(((-1.0)*x1478*x1510))+((x1478*x1511))+((cj4*x1480*x1482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1522=((1.0)*sj1);
IkReal x1523=(sj4*sj5);
IkReal x1524=(cj4*r22);
IkReal x1525=(cj5*sj4);
IkReal x1526=(cj4*r02);
IkReal x1527=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*x1523*x1527))+(((-1.0)*r20*x1522*x1523))+(((-1.0)*r01*x1525*x1527))+(((-1.0)*x1522*x1524))+(((-1.0)*x1526*x1527))+(((-1.0)*r21*x1522*x1525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1524))+((cj1*r21*x1525))+((cj1*r20*x1523))+(((-1.0)*r01*x1522*x1525))+(((-1.0)*x1522*x1526))+(((-1.0)*r00*x1522*x1523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1523*x1527))+(((-1.0)*r20*x1522*x1523))+(((-1.0)*r01*x1525*x1527))+(((-1.0)*x1522*x1524))+(((-1.0)*x1526*x1527))+(((-1.0)*r21*x1522*x1525))))+IKsqr((((cj1*x1524))+((cj1*r21*x1525))+((cj1*r20*x1523))+(((-1.0)*r01*x1522*x1525))+(((-1.0)*x1522*x1526))+(((-1.0)*r00*x1522*x1523))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1523*x1527))+(((-1.0)*r20*x1522*x1523))+(((-1.0)*r01*x1525*x1527))+(((-1.0)*x1522*x1524))+(((-1.0)*x1526*x1527))+(((-1.0)*r21*x1522*x1525))), (((cj1*x1524))+((cj1*r21*x1525))+((cj1*r20*x1523))+(((-1.0)*r01*x1522*x1525))+(((-1.0)*x1522*x1526))+(((-1.0)*r00*x1522*x1523))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1528=IKcos(j2);
IkReal x1529=IKsin(j2);
IkReal x1530=(r22*sj4);
IkReal x1531=((0.99999999995)*cj3);
IkReal x1532=(r01*sj5);
IkReal x1533=((9.9999999995e-6)*cj3);
IkReal x1534=((1.36279999993186e-7)*cj4);
IkReal x1535=(cj5*r01);
IkReal x1536=((0.99999999995)*sj3);
IkReal x1537=(r20*sj5);
IkReal x1538=((9.9999999995e-6)*sj3);
IkReal x1539=(r00*sj5);
IkReal x1540=(cj5*r21);
IkReal x1541=(r02*sj4);
IkReal x1542=((1.0)*sj1);
IkReal x1543=(cj5*r20);
IkReal x1544=((1.0)*sj4);
IkReal x1545=((1.0)*cj4);
IkReal x1546=((0.391671)*sj1);
IkReal x1547=(r21*sj5);
IkReal x1548=(cj5*r00);
IkReal x1549=(cj1*x1528);
IkReal x1550=(cj1*x1529);
IkReal x1551=(x1529*x1542);
evalcond[0]=((((-1.0)*x1540*x1544))+(((-1.0)*r22*x1545))+x1549+(((-1.0)*x1537*x1544))+(((-1.0)*x1551)));
evalcond[1]=((((-1.0)*x1535*x1544))+(((-1.0)*x1550))+(((-1.0)*r02*x1545))+(((-1.0)*x1539*x1544))+(((-1.0)*x1528*x1542)));
evalcond[2]=((((0.121761000001269)*x1547))+(((-3.9e-7)*x1537))+(((-0.121761000001269)*x1543))+(((-3.9e-7)*x1540))+(((1.92e-6)*sj1))+(((-1.0)*x1529*x1546))+((x1534*x1540))+(((-1.0)*pz))+(((-1.36279999993186e-7)*x1530))+(((0.391671)*x1549))+(((0.52362)*cj1))+((x1534*x1537)));
evalcond[3]=((((1.92e-6)*cj1))+(((-3.9e-7)*x1539))+(((-3.9e-7)*x1535))+(((-0.121761000001269)*x1548))+(((-1.0)*px))+(((-1.36279999993186e-7)*x1541))+(((-0.52362)*sj1))+(((-0.391671)*x1550))+((x1534*x1539))+((x1534*x1535))+(((-1.0)*x1528*x1546))+(((0.121761000001269)*x1532)));
evalcond[4]=(((x1536*x1547))+(((-1.0)*x1530*x1538))+(((-1.0)*cj4*x1531*x1537))+((sj1*x1528))+((cj4*x1537*x1538))+((x1530*x1531))+((x1533*x1547))+x1550+(((-1.0)*x1536*x1543))+(((-1.0)*x1533*x1543))+(((-1.0)*cj4*x1531*x1540))+((cj4*x1538*x1540)));
evalcond[5]=(((x1531*x1541))+((cj4*x1535*x1538))+((cj4*x1538*x1539))+(((-1.0)*cj4*x1531*x1539))+(((-1.0)*cj4*x1531*x1535))+((x1532*x1536))+((x1532*x1533))+x1549+(((-1.0)*x1536*x1548))+(((-1.0)*x1533*x1548))+(((-1.0)*x1551))+(((-1.0)*x1538*x1541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1552=(r02*sj4);
IkReal x1553=((1.0)*sj4);
IkReal x1554=((0.99999999995)*r00);
IkReal x1555=((9.9999999995e-6)*cj4);
IkReal x1556=(cj5*r01);
IkReal x1557=(r01*sj5);
CheckValue<IkReal> x1558 = IKatan2WithCheck(IkReal((((r00*sj5*x1555))+(((-1.0)*cj5*x1554))+((x1555*x1556))+(((0.99999999995)*x1557))+(((-9.9999999995e-6)*x1552)))),IkReal(((((-1.0)*cj4*sj5*x1554))+(((0.99999999995)*x1552))+(((-0.99999999995)*cj4*x1556))+(((-9.9999999995e-6)*cj5*r00))+(((9.9999999995e-6)*x1557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1558.valid){
continue;
}
CheckValue<IkReal> x1559=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x1553))+(((-1.0)*cj4*r22))+(((-1.0)*cj5*r21*x1553)))),-1);
if(!x1559.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1558.value)+(((1.5707963267949)*(x1559.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1560=IKcos(j3);
IkReal x1561=IKsin(j3);
IkReal x1562=(r10*sj5);
IkReal x1563=(cj5*r01);
IkReal x1564=((9.9999999995e-6)*r12);
IkReal x1565=((0.99999999995)*cj4);
IkReal x1566=(cj5*r10);
IkReal x1567=(r11*sj5);
IkReal x1568=(cj5*r20);
IkReal x1569=(cj5*r21);
IkReal x1570=(r20*sj5);
IkReal x1571=((0.99999999995)*r12);
IkReal x1572=(r21*sj5);
IkReal x1573=(cj5*r11);
IkReal x1574=(r00*sj5);
IkReal x1575=(cj5*r00);
IkReal x1576=(r01*sj5);
IkReal x1577=(sj4*x1561);
IkReal x1578=((9.9999999995e-6)*x1561);
IkReal x1579=(sj4*x1560);
IkReal x1580=((0.99999999995)*x1561);
IkReal x1581=((0.99999999995)*x1560);
IkReal x1582=((9.9999999995e-6)*x1560);
IkReal x1583=(cj4*x1582);
evalcond[0]=(((x1570*x1583))+(((-9.9999999995e-6)*r22*x1579))+(((-1.0)*x1572*x1578))+((x1561*x1565*x1570))+((x1561*x1565*x1569))+((x1568*x1578))+(((-1.0)*x1568*x1581))+(((-0.99999999995)*r22*x1577))+((x1572*x1581))+((x1569*x1583)));
evalcond[1]=((((-1.0)*x1576*x1578))+((x1561*x1565*x1574))+((x1576*x1581))+((x1575*x1578))+((x1561*x1563*x1565))+(((-0.99999999995)*r02*x1577))+(((-9.9999999995e-6)*r02*x1579))+((x1574*x1583))+((x1563*x1583))+(((-1.0)*x1575*x1581)));
evalcond[2]=(((x1571*x1579))+((x1567*x1580))+((x1567*x1582))+(((-1.0)*x1560*x1562*x1565))+((cj4*x1562*x1578))+(((-1.0)*x1560*x1565*x1573))+((cj4*x1573*x1578))+(((-1.0)*x1564*x1577))+(((-1.0)*x1566*x1582))+(((-1.0)*x1566*x1580)));
evalcond[3]=((-1.0)+(((-1.0)*x1571*x1577))+((x1566*x1578))+((x1567*x1581))+((x1561*x1565*x1573))+(((-1.0)*x1567*x1578))+((x1573*x1583))+(((-1.0)*x1564*x1579))+(((-1.0)*x1566*x1581))+((x1562*x1583))+((x1561*x1562*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1584=(r22*sj4);
IkReal x1585=((0.232536954279117)*cj5);
IkReal x1586=(cj5*r01);
IkReal x1587=(r02*sj4);
IkReal x1588=(cj5*r21);
IkReal x1589=((9.54335107914695e-13)*cj4);
IkReal x1590=((0.748006187683308)*cj4);
IkReal x1591=((8.52662144715453e-7)*cj5);
IkReal x1592=((2.60265077711611e-7)*cj4);
IkReal x1593=(r00*sj5);
IkReal x1594=((8.52662144715453e-7)*sj5);
IkReal x1595=(r20*sj5);
IkReal x1596=((0.748006187683308)*sj4);
IkReal x1597=((0.232536954279117)*sj5);
IkReal x1598=((2.74277506655963e-6)*cj4);
IkReal x1599=((2.74277506655963e-6)*sj4);
if( IKabs((((x1586*x1596))+((x1586*x1592))+((r01*x1597))+((r20*x1591))+((x1593*x1596))+((x1592*x1593))+(((-1.0)*x1595*x1599))+(((2.73107346716569e-12)*x1588))+(((9.54335107914695e-13)*x1584))+(((-1.0)*x1588*x1599))+(((2.73107346716569e-12)*x1595))+(((-1.0)*r00*x1585))+(((-1.0)*x1588*x1589))+(((-1.0)*x1589*x1595))+(((-7.44814942123594e-7)*x1593))+(((-7.44814942123594e-7)*x1586))+(((-1.0)*r22*x1598))+((r02*x1590))+(((-1.0)*r21*x1594))+(((-2.60265077711611e-7)*x1587))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1591))+(((-1.0)*x1592*x1595))+((r20*x1585))+(((-1.0)*x1593*x1599))+(((-1.0)*x1595*x1596))+(((-1.0)*r02*x1598))+(((2.73107346716569e-12)*x1586))+(((9.54335107914695e-13)*x1587))+(((-1.0)*x1588*x1596))+(((-1.0)*x1588*x1592))+(((2.73107346716569e-12)*x1593))+(((-1.0)*r01*x1594))+(((7.44814942123594e-7)*x1595))+(((7.44814942123594e-7)*x1588))+(((-1.0)*x1589*x1593))+(((2.60265077711611e-7)*x1584))+(((-1.0)*r22*x1590))+(((1.90978190288101)*pz))+(((-1.0)*x1586*x1599))+(((-1.0)*x1586*x1589))+(((-1.0)*r21*x1597))+(((7.00275247991204e-6)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1586*x1596))+((x1586*x1592))+((r01*x1597))+((r20*x1591))+((x1593*x1596))+((x1592*x1593))+(((-1.0)*x1595*x1599))+(((2.73107346716569e-12)*x1588))+(((9.54335107914695e-13)*x1584))+(((-1.0)*x1588*x1599))+(((2.73107346716569e-12)*x1595))+(((-1.0)*r00*x1585))+(((-1.0)*x1588*x1589))+(((-1.0)*x1589*x1595))+(((-7.44814942123594e-7)*x1593))+(((-7.44814942123594e-7)*x1586))+(((-1.0)*r22*x1598))+((r02*x1590))+(((-1.0)*r21*x1594))+(((-2.60265077711611e-7)*x1587))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px))))+IKsqr((((r00*x1591))+(((-1.0)*x1592*x1595))+((r20*x1585))+(((-1.0)*x1593*x1599))+(((-1.0)*x1595*x1596))+(((-1.0)*r02*x1598))+(((2.73107346716569e-12)*x1586))+(((9.54335107914695e-13)*x1587))+(((-1.0)*x1588*x1596))+(((-1.0)*x1588*x1592))+(((2.73107346716569e-12)*x1593))+(((-1.0)*r01*x1594))+(((7.44814942123594e-7)*x1595))+(((7.44814942123594e-7)*x1588))+(((-1.0)*x1589*x1593))+(((2.60265077711611e-7)*x1584))+(((-1.0)*r22*x1590))+(((1.90978190288101)*pz))+(((-1.0)*x1586*x1599))+(((-1.0)*x1586*x1589))+(((-1.0)*r21*x1597))+(((7.00275247991204e-6)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x1586*x1596))+((x1586*x1592))+((r01*x1597))+((r20*x1591))+((x1593*x1596))+((x1592*x1593))+(((-1.0)*x1595*x1599))+(((2.73107346716569e-12)*x1588))+(((9.54335107914695e-13)*x1584))+(((-1.0)*x1588*x1599))+(((2.73107346716569e-12)*x1595))+(((-1.0)*r00*x1585))+(((-1.0)*x1588*x1589))+(((-1.0)*x1589*x1595))+(((-7.44814942123594e-7)*x1593))+(((-7.44814942123594e-7)*x1586))+(((-1.0)*r22*x1598))+((r02*x1590))+(((-1.0)*r21*x1594))+(((-2.60265077711611e-7)*x1587))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px))), (((r00*x1591))+(((-1.0)*x1592*x1595))+((r20*x1585))+(((-1.0)*x1593*x1599))+(((-1.0)*x1595*x1596))+(((-1.0)*r02*x1598))+(((2.73107346716569e-12)*x1586))+(((9.54335107914695e-13)*x1587))+(((-1.0)*x1588*x1596))+(((-1.0)*x1588*x1592))+(((2.73107346716569e-12)*x1593))+(((-1.0)*r01*x1594))+(((7.44814942123594e-7)*x1595))+(((7.44814942123594e-7)*x1588))+(((-1.0)*x1589*x1593))+(((2.60265077711611e-7)*x1584))+(((-1.0)*r22*x1590))+(((1.90978190288101)*pz))+(((-1.0)*x1586*x1599))+(((-1.0)*x1586*x1589))+(((-1.0)*r21*x1597))+(((7.00275247991204e-6)*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1600=IKsin(j1);
IkReal x1601=IKcos(j1);
IkReal x1602=((1.0)*px);
IkReal x1603=((0.391671)*cj4);
IkReal x1604=(r20*sj5);
IkReal x1605=((0.391671)*sj4);
IkReal x1606=((3.91670999980416e-6)*cj5);
IkReal x1607=((1.36279999993186e-7)*cj4);
IkReal x1608=(r21*sj3);
IkReal x1609=((0.391670999980416)*sj5);
IkReal x1610=((3.9e-7)*cj5);
IkReal x1611=(cj5*r01);
IkReal x1612=(r00*sj5);
IkReal x1613=((1.36279999993186e-7)*sj4);
IkReal x1614=(r01*sj5);
IkReal x1615=((3.91670999980416e-6)*cj3);
IkReal x1616=(cj5*r00);
IkReal x1617=((0.391670999980416)*sj3);
IkReal x1618=(cj5*r21);
IkReal x1619=(r01*sj3);
IkReal x1620=(r21*sj5);
IkReal x1621=(cj5*r20);
IkReal x1622=(r21*x1610);
IkReal x1623=((3.9e-7)*x1604);
IkReal x1624=(r22*x1613);
IkReal x1625=((0.121761000001269)*x1621);
IkReal x1626=((1.92e-6)*x1600);
IkReal x1627=((0.121761000001269)*x1620);
IkReal x1628=((0.52362)*x1601);
IkReal x1629=((0.121761000001269)*x1614);
IkReal x1630=((1.92e-6)*x1601);
IkReal x1631=(r02*x1613);
IkReal x1632=((3.9e-7)*x1612);
IkReal x1633=((0.52362)*x1600);
IkReal x1634=((0.121761000001269)*x1616);
IkReal x1635=(r01*x1610);
IkReal x1636=((0.391670999980416)*cj3*cj4);
IkReal x1637=((3.91670999980416e-6)*cj4*sj3);
IkReal x1638=((3.91670999980416e-6)*sj3*sj4);
IkReal x1639=((0.391670999980416)*cj3*sj4);
IkReal x1640=(x1604*x1607);
IkReal x1641=(x1607*x1618);
IkReal x1642=(x1607*x1611);
IkReal x1643=(x1607*x1612);
IkReal x1644=(x1623+x1622+x1625+x1624);
IkReal x1645=(x1629+x1643+x1642+x1630);
IkReal x1646=(x1602+x1631+x1632+x1633+x1634+x1635);
IkReal x1647=(x1627+x1626+x1628+x1641+x1640);
evalcond[0]=(x1645+(((-1.0)*x1646))+((x1605*x1612))+((x1605*x1611))+((r02*x1603)));
evalcond[1]=(x1647+(((-1.0)*x1644))+(((-1.0)*pz))+((r22*x1603))+((x1605*x1618))+((x1604*x1605)));
evalcond[2]=((((-1.0)*cj3*cj4*r00*x1609))+((r02*x1639))+(((-1.0)*x1616*x1617))+x1644+(((-1.0)*cj3*r00*x1606))+((x1609*x1619))+((x1614*x1615))+(((-1.0)*x1647))+((cj4*x1606*x1619))+(((-1.0)*x1611*x1636))+pz+((x1612*x1637))+(((-1.0)*r02*x1638)));
evalcond[3]=(((x1604*x1637))+(((-1.0)*r22*x1638))+(((-1.0)*cj3*r20*x1606))+x1645+((cj4*x1606*x1608))+(((-1.0)*x1617*x1621))+(((-1.0)*x1646))+((x1608*x1609))+((x1615*x1620))+(((-1.0)*x1604*x1636))+(((-1.0)*x1618*x1636))+((r22*x1639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1648=((1.0)*sj1);
IkReal x1649=(sj4*sj5);
IkReal x1650=(cj4*r22);
IkReal x1651=(cj5*sj4);
IkReal x1652=(cj4*r02);
IkReal x1653=((1.0)*cj1);
if( IKabs(((((-1.0)*r01*x1651*x1653))+(((-1.0)*r21*x1648*x1651))+(((-1.0)*x1652*x1653))+(((-1.0)*r20*x1648*x1649))+(((-1.0)*r00*x1649*x1653))+(((-1.0)*x1648*x1650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x1651))+((cj1*r20*x1649))+((cj1*x1650))+(((-1.0)*r01*x1648*x1651))+(((-1.0)*r00*x1648*x1649))+(((-1.0)*x1648*x1652)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1651*x1653))+(((-1.0)*r21*x1648*x1651))+(((-1.0)*x1652*x1653))+(((-1.0)*r20*x1648*x1649))+(((-1.0)*r00*x1649*x1653))+(((-1.0)*x1648*x1650))))+IKsqr((((cj1*r21*x1651))+((cj1*r20*x1649))+((cj1*x1650))+(((-1.0)*r01*x1648*x1651))+(((-1.0)*r00*x1648*x1649))+(((-1.0)*x1648*x1652))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1651*x1653))+(((-1.0)*r21*x1648*x1651))+(((-1.0)*x1652*x1653))+(((-1.0)*r20*x1648*x1649))+(((-1.0)*r00*x1649*x1653))+(((-1.0)*x1648*x1650))), (((cj1*r21*x1651))+((cj1*r20*x1649))+((cj1*x1650))+(((-1.0)*r01*x1648*x1651))+(((-1.0)*r00*x1648*x1649))+(((-1.0)*x1648*x1652))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1654=IKcos(j2);
IkReal x1655=IKsin(j2);
IkReal x1656=(r22*sj4);
IkReal x1657=((0.99999999995)*cj3);
IkReal x1658=(r01*sj5);
IkReal x1659=((9.9999999995e-6)*cj3);
IkReal x1660=((1.36279999993186e-7)*cj4);
IkReal x1661=(cj5*r01);
IkReal x1662=((0.99999999995)*sj3);
IkReal x1663=(r20*sj5);
IkReal x1664=((9.9999999995e-6)*sj3);
IkReal x1665=(r00*sj5);
IkReal x1666=(cj5*r21);
IkReal x1667=(r02*sj4);
IkReal x1668=((1.0)*sj1);
IkReal x1669=(cj5*r20);
IkReal x1670=((1.0)*sj4);
IkReal x1671=((1.0)*cj4);
IkReal x1672=((0.391671)*sj1);
IkReal x1673=(r21*sj5);
IkReal x1674=(cj5*r00);
IkReal x1675=(cj1*x1654);
IkReal x1676=(cj1*x1655);
IkReal x1677=(x1655*x1668);
evalcond[0]=((((-1.0)*x1663*x1670))+x1675+(((-1.0)*x1666*x1670))+(((-1.0)*x1677))+(((-1.0)*r22*x1671)));
evalcond[1]=((((-1.0)*r02*x1671))+(((-1.0)*x1654*x1668))+(((-1.0)*x1661*x1670))+(((-1.0)*x1676))+(((-1.0)*x1665*x1670)));
evalcond[2]=(((x1660*x1666))+((x1660*x1663))+(((-3.9e-7)*x1666))+(((-3.9e-7)*x1663))+(((-1.0)*x1655*x1672))+(((-0.121761000001269)*x1669))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((0.391671)*x1675))+(((-1.36279999993186e-7)*x1656))+(((0.121761000001269)*x1673)));
evalcond[3]=(((x1660*x1661))+((x1660*x1665))+(((1.92e-6)*cj1))+(((-3.9e-7)*x1661))+(((-3.9e-7)*x1665))+(((-0.121761000001269)*x1674))+(((-1.0)*x1654*x1672))+(((-1.0)*px))+(((-0.52362)*sj1))+(((-0.391671)*x1676))+(((-1.36279999993186e-7)*x1667))+(((0.121761000001269)*x1658)));
evalcond[4]=(((x1656*x1657))+((sj1*x1654))+(((-1.0)*x1656*x1664))+(((-1.0)*x1662*x1669))+x1676+(((-1.0)*cj4*x1657*x1666))+(((-1.0)*cj4*x1657*x1663))+((x1662*x1673))+((cj4*x1664*x1666))+((cj4*x1663*x1664))+((x1659*x1673))+(((-1.0)*x1659*x1669)));
evalcond[5]=(x1675+(((-1.0)*cj4*x1657*x1661))+(((-1.0)*cj4*x1657*x1665))+(((-1.0)*x1659*x1674))+((cj4*x1661*x1664))+((cj4*x1664*x1665))+(((-1.0)*x1662*x1674))+((x1658*x1659))+((x1658*x1662))+((x1657*x1667))+(((-1.0)*x1677))+(((-1.0)*x1664*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1678=((0.99999999995)*cj4);
IkReal x1679=(r20*sj5);
IkReal x1680=(cj5*r21);
IkReal x1681=(r21*sj5);
IkReal x1682=(r22*sj4);
IkReal x1683=(cj5*r20);
IkReal x1684=((9.9999999995e-6)*cj4);
CheckValue<IkReal> x1685 = IKatan2WithCheck(IkReal(((((-9.9999999995e-6)*x1682))+((x1680*x1684))+(((-0.99999999995)*x1683))+(((0.99999999995)*x1681))+((x1679*x1684)))),IkReal(((((-9.9999999995e-6)*x1683))+(((-1.0)*x1678*x1679))+(((-1.0)*x1678*x1680))+(((0.99999999995)*x1682))+(((9.9999999995e-6)*x1681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1685.valid){
continue;
}
CheckValue<IkReal> x1686=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x1686.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1685.value)+(((1.5707963267949)*(x1686.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1687=IKcos(j3);
IkReal x1688=IKsin(j3);
IkReal x1689=(r10*sj5);
IkReal x1690=(cj5*r01);
IkReal x1691=((9.9999999995e-6)*r12);
IkReal x1692=((0.99999999995)*cj4);
IkReal x1693=(cj5*r10);
IkReal x1694=(r11*sj5);
IkReal x1695=(cj5*r20);
IkReal x1696=(cj5*r21);
IkReal x1697=(r20*sj5);
IkReal x1698=((0.99999999995)*r12);
IkReal x1699=(r21*sj5);
IkReal x1700=(cj5*r11);
IkReal x1701=(r00*sj5);
IkReal x1702=(cj5*r00);
IkReal x1703=(r01*sj5);
IkReal x1704=(sj4*x1688);
IkReal x1705=((9.9999999995e-6)*x1688);
IkReal x1706=(sj4*x1687);
IkReal x1707=((0.99999999995)*x1688);
IkReal x1708=((0.99999999995)*x1687);
IkReal x1709=((9.9999999995e-6)*x1687);
IkReal x1710=(cj4*x1709);
evalcond[0]=(((x1697*x1710))+((x1696*x1710))+(((-1.0)*x1699*x1705))+(((-0.99999999995)*r22*x1704))+(((-1.0)*x1695*x1708))+((x1695*x1705))+(((-9.9999999995e-6)*r22*x1706))+((x1688*x1692*x1696))+((x1688*x1692*x1697))+((x1699*x1708)));
evalcond[1]=((((-0.99999999995)*r02*x1704))+(((-1.0)*x1702*x1708))+((x1688*x1692*x1701))+((x1703*x1708))+(((-9.9999999995e-6)*r02*x1706))+(((-1.0)*x1703*x1705))+((x1702*x1705))+((x1701*x1710))+((x1688*x1690*x1692))+((x1690*x1710)));
evalcond[2]=(((cj4*x1700*x1705))+(((-1.0)*x1687*x1692*x1700))+((cj4*x1689*x1705))+((x1694*x1707))+((x1694*x1709))+(((-1.0)*x1691*x1704))+(((-1.0)*x1687*x1689*x1692))+(((-1.0)*x1693*x1709))+(((-1.0)*x1693*x1707))+((x1698*x1706)));
evalcond[3]=((-1.0)+(((-1.0)*x1698*x1704))+((x1693*x1705))+((x1688*x1692*x1700))+((x1694*x1708))+((x1688*x1689*x1692))+((x1700*x1710))+(((-1.0)*x1691*x1706))+(((-1.0)*x1693*x1708))+(((-1.0)*x1694*x1705))+((x1689*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1711=(r22*sj4);
IkReal x1712=((0.232536954279117)*cj5);
IkReal x1713=(cj5*r01);
IkReal x1714=(r02*sj4);
IkReal x1715=(cj5*r21);
IkReal x1716=((9.54335107914695e-13)*cj4);
IkReal x1717=((0.748006187683308)*cj4);
IkReal x1718=((8.52662144715453e-7)*cj5);
IkReal x1719=((2.60265077711611e-7)*cj4);
IkReal x1720=(r00*sj5);
IkReal x1721=((8.52662144715453e-7)*sj5);
IkReal x1722=(r20*sj5);
IkReal x1723=((0.748006187683308)*sj4);
IkReal x1724=((0.232536954279117)*sj5);
IkReal x1725=((2.74277506655963e-6)*cj4);
IkReal x1726=((2.74277506655963e-6)*sj4);
if( IKabs(((((-1.0)*r00*x1712))+(((-1.0)*r22*x1725))+((r02*x1717))+((r01*x1724))+(((-1.0)*x1715*x1726))+(((2.73107346716569e-12)*x1722))+(((-1.0)*x1722*x1726))+((x1713*x1719))+((r20*x1718))+(((-7.44814942123594e-7)*x1720))+(((9.54335107914695e-13)*x1711))+((x1720*x1723))+(((2.73107346716569e-12)*x1715))+(((-1.0)*x1715*x1716))+(((-2.60265077711611e-7)*x1714))+(((-7.44814942123594e-7)*x1713))+((x1713*x1723))+(((-1.0)*r21*x1721))+((x1719*x1720))+(((-1.0)*x1716*x1722))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.44814942123594e-7)*x1722))+(((-1.0)*x1715*x1723))+(((2.73107346716569e-12)*x1720))+(((-1.0)*x1713*x1716))+(((-1.0)*x1722*x1723))+((r20*x1712))+(((-1.0)*r01*x1721))+(((-1.0)*x1720*x1726))+(((7.44814942123594e-7)*x1715))+(((9.54335107914695e-13)*x1714))+(((2.73107346716569e-12)*x1713))+((r00*x1718))+(((-1.0)*r22*x1717))+(((1.90978190288101)*pz))+(((-1.0)*x1715*x1719))+(((2.60265077711611e-7)*x1711))+(((-1.0)*x1713*x1726))+(((-1.0)*r21*x1724))+(((-1.0)*x1719*x1722))+(((-1.0)*x1716*x1720))+(((-1.0)*r02*x1725))+(((7.00275247991204e-6)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1712))+(((-1.0)*r22*x1725))+((r02*x1717))+((r01*x1724))+(((-1.0)*x1715*x1726))+(((2.73107346716569e-12)*x1722))+(((-1.0)*x1722*x1726))+((x1713*x1719))+((r20*x1718))+(((-7.44814942123594e-7)*x1720))+(((9.54335107914695e-13)*x1711))+((x1720*x1723))+(((2.73107346716569e-12)*x1715))+(((-1.0)*x1715*x1716))+(((-2.60265077711611e-7)*x1714))+(((-7.44814942123594e-7)*x1713))+((x1713*x1723))+(((-1.0)*r21*x1721))+((x1719*x1720))+(((-1.0)*x1716*x1722))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px))))+IKsqr(((((7.44814942123594e-7)*x1722))+(((-1.0)*x1715*x1723))+(((2.73107346716569e-12)*x1720))+(((-1.0)*x1713*x1716))+(((-1.0)*x1722*x1723))+((r20*x1712))+(((-1.0)*r01*x1721))+(((-1.0)*x1720*x1726))+(((7.44814942123594e-7)*x1715))+(((9.54335107914695e-13)*x1714))+(((2.73107346716569e-12)*x1713))+((r00*x1718))+(((-1.0)*r22*x1717))+(((1.90978190288101)*pz))+(((-1.0)*x1715*x1719))+(((2.60265077711611e-7)*x1711))+(((-1.0)*x1713*x1726))+(((-1.0)*r21*x1724))+(((-1.0)*x1719*x1722))+(((-1.0)*x1716*x1720))+(((-1.0)*r02*x1725))+(((7.00275247991204e-6)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1712))+(((-1.0)*r22*x1725))+((r02*x1717))+((r01*x1724))+(((-1.0)*x1715*x1726))+(((2.73107346716569e-12)*x1722))+(((-1.0)*x1722*x1726))+((x1713*x1719))+((r20*x1718))+(((-7.44814942123594e-7)*x1720))+(((9.54335107914695e-13)*x1711))+((x1720*x1723))+(((2.73107346716569e-12)*x1715))+(((-1.0)*x1715*x1716))+(((-2.60265077711611e-7)*x1714))+(((-7.44814942123594e-7)*x1713))+((x1713*x1723))+(((-1.0)*r21*x1721))+((x1719*x1720))+(((-1.0)*x1716*x1722))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px))), ((((7.44814942123594e-7)*x1722))+(((-1.0)*x1715*x1723))+(((2.73107346716569e-12)*x1720))+(((-1.0)*x1713*x1716))+(((-1.0)*x1722*x1723))+((r20*x1712))+(((-1.0)*r01*x1721))+(((-1.0)*x1720*x1726))+(((7.44814942123594e-7)*x1715))+(((9.54335107914695e-13)*x1714))+(((2.73107346716569e-12)*x1713))+((r00*x1718))+(((-1.0)*r22*x1717))+(((1.90978190288101)*pz))+(((-1.0)*x1715*x1719))+(((2.60265077711611e-7)*x1711))+(((-1.0)*x1713*x1726))+(((-1.0)*r21*x1724))+(((-1.0)*x1719*x1722))+(((-1.0)*x1716*x1720))+(((-1.0)*r02*x1725))+(((7.00275247991204e-6)*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1727=IKsin(j1);
IkReal x1728=IKcos(j1);
IkReal x1729=((1.0)*px);
IkReal x1730=((0.391671)*cj4);
IkReal x1731=(r20*sj5);
IkReal x1732=((0.391671)*sj4);
IkReal x1733=((3.91670999980416e-6)*cj5);
IkReal x1734=((1.36279999993186e-7)*cj4);
IkReal x1735=(r21*sj3);
IkReal x1736=((0.391670999980416)*sj5);
IkReal x1737=((3.9e-7)*cj5);
IkReal x1738=(cj5*r01);
IkReal x1739=(r00*sj5);
IkReal x1740=((1.36279999993186e-7)*sj4);
IkReal x1741=(r01*sj5);
IkReal x1742=((3.91670999980416e-6)*cj3);
IkReal x1743=(cj5*r00);
IkReal x1744=((0.391670999980416)*sj3);
IkReal x1745=(cj5*r21);
IkReal x1746=(r01*sj3);
IkReal x1747=(r21*sj5);
IkReal x1748=(cj5*r20);
IkReal x1749=(r21*x1737);
IkReal x1750=((3.9e-7)*x1731);
IkReal x1751=(r22*x1740);
IkReal x1752=((0.121761000001269)*x1748);
IkReal x1753=((1.92e-6)*x1727);
IkReal x1754=((0.121761000001269)*x1747);
IkReal x1755=((0.52362)*x1728);
IkReal x1756=((0.121761000001269)*x1741);
IkReal x1757=((1.92e-6)*x1728);
IkReal x1758=(r02*x1740);
IkReal x1759=((3.9e-7)*x1739);
IkReal x1760=((0.52362)*x1727);
IkReal x1761=((0.121761000001269)*x1743);
IkReal x1762=(r01*x1737);
IkReal x1763=((0.391670999980416)*cj3*cj4);
IkReal x1764=((3.91670999980416e-6)*cj4*sj3);
IkReal x1765=((3.91670999980416e-6)*sj3*sj4);
IkReal x1766=((0.391670999980416)*cj3*sj4);
IkReal x1767=(x1731*x1734);
IkReal x1768=(x1734*x1745);
IkReal x1769=(x1734*x1738);
IkReal x1770=(x1734*x1739);
IkReal x1771=(x1749+x1752+x1751+x1750);
IkReal x1772=(x1769+x1770+x1757+x1756);
IkReal x1773=(x1729+x1762+x1760+x1761+x1759+x1758);
IkReal x1774=(x1768+x1767+x1755+x1754+x1753);
evalcond[0]=(x1772+((r02*x1730))+(((-1.0)*x1773))+((x1732*x1738))+((x1732*x1739)));
evalcond[1]=(((x1731*x1732))+x1774+((r22*x1730))+(((-1.0)*pz))+(((-1.0)*x1771))+((x1732*x1745)));
evalcond[2]=(((x1736*x1746))+x1771+(((-1.0)*r02*x1765))+((x1739*x1764))+(((-1.0)*x1774))+pz+(((-1.0)*x1738*x1763))+((r02*x1766))+((cj4*x1733*x1746))+((x1741*x1742))+(((-1.0)*cj3*cj4*r00*x1736))+(((-1.0)*cj3*r00*x1733))+(((-1.0)*x1743*x1744)));
evalcond[3]=(((cj4*x1733*x1735))+(((-1.0)*x1745*x1763))+x1772+(((-1.0)*x1731*x1763))+(((-1.0)*cj3*r20*x1733))+((x1735*x1736))+(((-1.0)*x1773))+((x1742*x1747))+(((-1.0)*r22*x1765))+(((-1.0)*x1744*x1748))+((r22*x1766))+((x1731*x1764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1775=((1.0)*sj1);
IkReal x1776=(sj4*sj5);
IkReal x1777=(cj4*r22);
IkReal x1778=(cj5*sj4);
IkReal x1779=(cj4*r02);
IkReal x1780=((1.0)*cj1);
if( IKabs(((((-1.0)*r21*x1775*x1778))+(((-1.0)*r00*x1776*x1780))+(((-1.0)*r20*x1775*x1776))+(((-1.0)*x1779*x1780))+(((-1.0)*x1775*x1777))+(((-1.0)*r01*x1778*x1780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1775*x1778))+((cj1*r21*x1778))+((cj1*r20*x1776))+(((-1.0)*x1775*x1779))+(((-1.0)*r00*x1775*x1776))+((cj1*x1777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1775*x1778))+(((-1.0)*r00*x1776*x1780))+(((-1.0)*r20*x1775*x1776))+(((-1.0)*x1779*x1780))+(((-1.0)*x1775*x1777))+(((-1.0)*r01*x1778*x1780))))+IKsqr(((((-1.0)*r01*x1775*x1778))+((cj1*r21*x1778))+((cj1*r20*x1776))+(((-1.0)*x1775*x1779))+(((-1.0)*r00*x1775*x1776))+((cj1*x1777))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x1775*x1778))+(((-1.0)*r00*x1776*x1780))+(((-1.0)*r20*x1775*x1776))+(((-1.0)*x1779*x1780))+(((-1.0)*x1775*x1777))+(((-1.0)*r01*x1778*x1780))), ((((-1.0)*r01*x1775*x1778))+((cj1*r21*x1778))+((cj1*r20*x1776))+(((-1.0)*x1775*x1779))+(((-1.0)*r00*x1775*x1776))+((cj1*x1777))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1781=IKcos(j2);
IkReal x1782=IKsin(j2);
IkReal x1783=(r22*sj4);
IkReal x1784=((0.99999999995)*cj3);
IkReal x1785=(r01*sj5);
IkReal x1786=((9.9999999995e-6)*cj3);
IkReal x1787=((1.36279999993186e-7)*cj4);
IkReal x1788=(cj5*r01);
IkReal x1789=((0.99999999995)*sj3);
IkReal x1790=(r20*sj5);
IkReal x1791=((9.9999999995e-6)*sj3);
IkReal x1792=(r00*sj5);
IkReal x1793=(cj5*r21);
IkReal x1794=(r02*sj4);
IkReal x1795=((1.0)*sj1);
IkReal x1796=(cj5*r20);
IkReal x1797=((1.0)*sj4);
IkReal x1798=((1.0)*cj4);
IkReal x1799=((0.391671)*sj1);
IkReal x1800=(r21*sj5);
IkReal x1801=(cj5*r00);
IkReal x1802=(cj1*x1781);
IkReal x1803=(cj1*x1782);
IkReal x1804=(x1782*x1795);
evalcond[0]=((((-1.0)*r22*x1798))+(((-1.0)*x1790*x1797))+(((-1.0)*x1793*x1797))+(((-1.0)*x1804))+x1802);
evalcond[1]=((((-1.0)*x1792*x1797))+(((-1.0)*x1788*x1797))+(((-1.0)*r02*x1798))+(((-1.0)*x1781*x1795))+(((-1.0)*x1803)));
evalcond[2]=((((0.391671)*x1802))+((x1787*x1790))+((x1787*x1793))+(((-3.9e-7)*x1790))+(((-3.9e-7)*x1793))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x1783))+(((-1.0)*x1782*x1799))+(((-0.121761000001269)*x1796))+(((0.121761000001269)*x1800)));
evalcond[3]=((((1.92e-6)*cj1))+(((-0.121761000001269)*x1801))+(((0.121761000001269)*x1785))+(((-3.9e-7)*x1788))+((x1787*x1792))+(((-3.9e-7)*x1792))+(((-1.0)*px))+((x1787*x1788))+(((-1.36279999993186e-7)*x1794))+(((-0.52362)*sj1))+(((-0.391671)*x1803))+(((-1.0)*x1781*x1799)));
evalcond[4]=(((x1783*x1784))+((sj1*x1781))+((x1786*x1800))+(((-1.0)*x1789*x1796))+x1803+((x1789*x1800))+((cj4*x1791*x1793))+(((-1.0)*x1786*x1796))+(((-1.0)*cj4*x1784*x1793))+(((-1.0)*cj4*x1784*x1790))+((cj4*x1790*x1791))+(((-1.0)*x1783*x1791)));
evalcond[5]=((((-1.0)*x1789*x1801))+((cj4*x1788*x1791))+(((-1.0)*x1804))+x1802+((cj4*x1791*x1792))+((x1784*x1794))+((x1785*x1789))+((x1785*x1786))+(((-1.0)*x1786*x1801))+(((-1.0)*cj4*x1784*x1792))+(((-1.0)*cj4*x1784*x1788))+(((-1.0)*x1791*x1794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1805=((9.9999999995e-6)*cj4);
IkReal x1806=(r01*sj0);
IkReal x1807=((9.9999999995e-6)*sj5);
IkReal x1808=((0.99999999995)*cj4);
IkReal x1809=(cj0*r11);
IkReal x1810=((1.0)*sj4);
IkReal x1811=((0.99999999995)*cj0);
IkReal x1812=(r12*sj4);
IkReal x1813=((0.99999999995)*sj5);
IkReal x1814=(cj5*r10);
IkReal x1815=((9.9999999995e-6)*cj0);
IkReal x1816=(cj0*r10*sj5);
IkReal x1817=(cj5*r00*sj0);
IkReal x1818=(r02*sj0*sj4);
IkReal x1819=(r00*sj0*sj5);
CheckValue<IkReal> x1820 = IKatan2WithCheck(IkReal(((((-1.0)*x1812*x1815))+(((-1.0)*x1805*x1819))+((x1805*x1816))+(((-1.0)*x1811*x1814))+((x1809*x1813))+((cj5*x1805*x1809))+(((-1.0)*x1806*x1813))+(((9.9999999995e-6)*x1818))+(((0.99999999995)*x1817))+(((-1.0)*cj5*x1805*x1806)))),IkReal(((((-1.0)*cj5*x1808*x1809))+(((-1.0)*x1808*x1816))+((x1808*x1819))+(((-1.0)*x1814*x1815))+(((-1.0)*x1806*x1807))+(((9.9999999995e-6)*x1817))+((x1811*x1812))+((x1807*x1809))+((cj5*x1806*x1808))+(((-0.99999999995)*x1818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x1810))+(((-1.0)*cj5*r21*x1810))+(((-1.0)*cj4*r22)))),-1);
if(!x1821.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1820.value)+(((1.5707963267949)*(x1821.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1822=IKcos(j3);
IkReal x1823=IKsin(j3);
IkReal x1824=(r10*sj5);
IkReal x1825=(cj5*r01);
IkReal x1826=(r22*sj4);
IkReal x1827=(cj5*r10);
IkReal x1828=(r02*sj4);
IkReal x1829=(r11*sj5);
IkReal x1830=(cj5*r20);
IkReal x1831=(cj5*r21);
IkReal x1832=(r20*sj5);
IkReal x1833=(r12*sj4);
IkReal x1834=(r21*sj5);
IkReal x1835=(r00*sj5);
IkReal x1836=(cj5*r00);
IkReal x1837=(r01*sj5);
IkReal x1838=(cj5*r11);
IkReal x1839=((0.99999999995)*x1823);
IkReal x1840=((9.9999999995e-6)*x1823);
IkReal x1841=((9.9999999995e-6)*x1822);
IkReal x1842=((0.99999999995)*x1822);
IkReal x1843=(cj4*x1841);
evalcond[0]=((((-1.0)*x1830*x1842))+((x1834*x1842))+((x1832*x1843))+((x1830*x1840))+((x1831*x1843))+(((-1.0)*x1826*x1839))+((cj4*x1832*x1839))+(((-1.0)*x1826*x1841))+((cj4*x1831*x1839))+(((-1.0)*x1834*x1840)));
evalcond[1]=(((cj4*x1835*x1839))+((x1825*x1843))+((x1836*x1840))+cj0+((x1837*x1842))+(((-1.0)*x1828*x1839))+(((-1.0)*x1828*x1841))+(((-1.0)*x1836*x1842))+((cj4*x1825*x1839))+(((-1.0)*x1837*x1840))+((x1835*x1843)));
evalcond[2]=(((x1838*x1843))+((x1824*x1843))+sj0+((cj4*x1838*x1839))+(((-1.0)*x1833*x1839))+((x1827*x1840))+((cj4*x1824*x1839))+(((-1.0)*x1827*x1842))+((x1829*x1842))+(((-1.0)*x1833*x1841))+(((-1.0)*x1829*x1840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x1844=cj0*cj0;
j1eval[0]=x1844;
j1eval[1]=IKsign(x1844);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1845=sj0*sj0;
j1eval[0]=x1845;
j1eval[1]=IKsign(x1845);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=cj0;
j1eval[1]=IKsign(cj0);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1846=(r22*sj4);
IkReal x1847=((0.232536954279117)*cj5);
IkReal x1848=(cj5*r01);
IkReal x1849=(r02*sj4);
IkReal x1850=(cj5*r21);
IkReal x1851=((9.54335107914695e-13)*cj4);
IkReal x1852=((0.748006187683308)*cj4);
IkReal x1853=((8.52662144715453e-7)*cj5);
IkReal x1854=((2.60265077711611e-7)*cj4);
IkReal x1855=(r00*sj5);
IkReal x1856=((8.52662144715453e-7)*sj5);
IkReal x1857=(r20*sj5);
IkReal x1858=((0.748006187683308)*sj4);
IkReal x1859=((0.232536954279117)*sj5);
IkReal x1860=((2.74277506655963e-6)*cj4);
IkReal x1861=((2.74277506655963e-6)*sj4);
if( IKabs(((((-1.0)*x1848*x1858))+(((-1.0)*x1848*x1854))+(((2.73107346716569e-12)*x1850))+(((2.73107346716569e-12)*x1857))+(((7.44814942123594e-7)*x1848))+(((9.54335107914695e-13)*x1846))+(((-1.0)*x1850*x1861))+(((-1.0)*x1851*x1857))+(((-1.0)*x1850*x1851))+(((-1.0)*r01*x1859))+((r00*x1847))+(((-1.0)*r02*x1852))+(((1.90978190288101)*px))+(((7.44814942123594e-7)*x1855))+(((-1.0)*x1855*x1858))+(((-1.0)*x1854*x1855))+(((-1.0)*r22*x1860))+((r20*x1853))+(((-1.0)*r21*x1856))+(((-1.0)*x1857*x1861))+(((2.60265077711611e-7)*x1849))+(((7.00275247991204e-6)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1848*x1861))+(((-7.00275247991204e-6)*px))+(((-9.54335107914695e-13)*x1849))+((x1851*x1855))+((x1848*x1851))+((r01*x1856))+(((-2.73107346716569e-12)*x1855))+((r02*x1860))+(((-1.0)*x1857*x1858))+(((-1.0)*r22*x1852))+(((-1.0)*x1850*x1854))+(((-1.0)*x1850*x1858))+(((-1.0)*r00*x1853))+((r20*x1847))+(((1.90978190288101)*pz))+(((7.44814942123594e-7)*x1850))+(((7.44814942123594e-7)*x1857))+(((-2.73107346716569e-12)*x1848))+(((-1.0)*x1854*x1857))+((x1855*x1861))+(((-1.0)*r21*x1859))+(((2.60265077711611e-7)*x1846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1848*x1858))+(((-1.0)*x1848*x1854))+(((2.73107346716569e-12)*x1850))+(((2.73107346716569e-12)*x1857))+(((7.44814942123594e-7)*x1848))+(((9.54335107914695e-13)*x1846))+(((-1.0)*x1850*x1861))+(((-1.0)*x1851*x1857))+(((-1.0)*x1850*x1851))+(((-1.0)*r01*x1859))+((r00*x1847))+(((-1.0)*r02*x1852))+(((1.90978190288101)*px))+(((7.44814942123594e-7)*x1855))+(((-1.0)*x1855*x1858))+(((-1.0)*x1854*x1855))+(((-1.0)*r22*x1860))+((r20*x1853))+(((-1.0)*r21*x1856))+(((-1.0)*x1857*x1861))+(((2.60265077711611e-7)*x1849))+(((7.00275247991204e-6)*pz))))+IKsqr((((x1848*x1861))+(((-7.00275247991204e-6)*px))+(((-9.54335107914695e-13)*x1849))+((x1851*x1855))+((x1848*x1851))+((r01*x1856))+(((-2.73107346716569e-12)*x1855))+((r02*x1860))+(((-1.0)*x1857*x1858))+(((-1.0)*r22*x1852))+(((-1.0)*x1850*x1854))+(((-1.0)*x1850*x1858))+(((-1.0)*r00*x1853))+((r20*x1847))+(((1.90978190288101)*pz))+(((7.44814942123594e-7)*x1850))+(((7.44814942123594e-7)*x1857))+(((-2.73107346716569e-12)*x1848))+(((-1.0)*x1854*x1857))+((x1855*x1861))+(((-1.0)*r21*x1859))+(((2.60265077711611e-7)*x1846))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x1848*x1858))+(((-1.0)*x1848*x1854))+(((2.73107346716569e-12)*x1850))+(((2.73107346716569e-12)*x1857))+(((7.44814942123594e-7)*x1848))+(((9.54335107914695e-13)*x1846))+(((-1.0)*x1850*x1861))+(((-1.0)*x1851*x1857))+(((-1.0)*x1850*x1851))+(((-1.0)*r01*x1859))+((r00*x1847))+(((-1.0)*r02*x1852))+(((1.90978190288101)*px))+(((7.44814942123594e-7)*x1855))+(((-1.0)*x1855*x1858))+(((-1.0)*x1854*x1855))+(((-1.0)*r22*x1860))+((r20*x1853))+(((-1.0)*r21*x1856))+(((-1.0)*x1857*x1861))+(((2.60265077711611e-7)*x1849))+(((7.00275247991204e-6)*pz))), (((x1848*x1861))+(((-7.00275247991204e-6)*px))+(((-9.54335107914695e-13)*x1849))+((x1851*x1855))+((x1848*x1851))+((r01*x1856))+(((-2.73107346716569e-12)*x1855))+((r02*x1860))+(((-1.0)*x1857*x1858))+(((-1.0)*r22*x1852))+(((-1.0)*x1850*x1854))+(((-1.0)*x1850*x1858))+(((-1.0)*r00*x1853))+((r20*x1847))+(((1.90978190288101)*pz))+(((7.44814942123594e-7)*x1850))+(((7.44814942123594e-7)*x1857))+(((-2.73107346716569e-12)*x1848))+(((-1.0)*x1854*x1857))+((x1855*x1861))+(((-1.0)*r21*x1859))+(((2.60265077711611e-7)*x1846))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1862=IKsin(j1);
IkReal x1863=IKcos(j1);
IkReal x1864=((1.0)*pz);
IkReal x1865=((0.391671)*cj4);
IkReal x1866=(r20*sj5);
IkReal x1867=((0.391671)*sj4);
IkReal x1868=((3.91670999980416e-6)*cj5);
IkReal x1869=((1.36279999993186e-7)*cj4);
IkReal x1870=(r21*sj3);
IkReal x1871=((0.391670999980416)*sj5);
IkReal x1872=((3.9e-7)*cj5);
IkReal x1873=(cj5*r01);
IkReal x1874=(r00*sj5);
IkReal x1875=((1.36279999993186e-7)*sj4);
IkReal x1876=(r01*sj5);
IkReal x1877=((3.91670999980416e-6)*cj3);
IkReal x1878=(cj5*r00);
IkReal x1879=((0.391670999980416)*sj3);
IkReal x1880=(cj5*r21);
IkReal x1881=(r01*sj3);
IkReal x1882=(r21*sj5);
IkReal x1883=(cj5*r20);
IkReal x1884=((0.121761000001269)*x1876);
IkReal x1885=((0.52362)*x1862);
IkReal x1886=(r02*x1875);
IkReal x1887=((3.9e-7)*x1874);
IkReal x1888=((0.121761000001269)*x1878);
IkReal x1889=((1.92e-6)*x1863);
IkReal x1890=(r01*x1872);
IkReal x1891=((1.92e-6)*x1862);
IkReal x1892=((0.121761000001269)*x1882);
IkReal x1893=((0.52362)*x1863);
IkReal x1894=(r21*x1872);
IkReal x1895=((3.9e-7)*x1866);
IkReal x1896=(r22*x1875);
IkReal x1897=((0.121761000001269)*x1883);
IkReal x1898=((0.391670999980416)*cj3*cj4);
IkReal x1899=((3.91670999980416e-6)*cj4*sj3);
IkReal x1900=((3.91670999980416e-6)*sj3*sj4);
IkReal x1901=((0.391670999980416)*cj3*sj4);
IkReal x1902=(x1869*x1873);
IkReal x1903=(x1869*x1874);
IkReal x1904=(x1866*x1869);
IkReal x1905=(x1869*x1880);
IkReal x1906=(x1864+x1894+x1895+x1896+x1897);
IkReal x1907=(x1902+x1903+x1885+x1884);
IkReal x1908=(x1890+x1889+x1888+x1887+x1886);
IkReal x1909=(x1904+x1905+x1891+x1892+x1893);
evalcond[0]=((((-1.0)*r02*x1865))+(((-1.0)*x1867*x1873))+(((-1.0)*x1867*x1874))+x1908+px+(((-1.0)*x1907)));
evalcond[1]=(((x1866*x1867))+((r22*x1865))+x1909+((x1867*x1880))+(((-1.0)*x1906)));
evalcond[2]=((((-1.0)*cj4*x1868*x1870))+((x1879*x1883))+((x1880*x1898))+(((-1.0)*x1870*x1871))+(((-1.0)*r22*x1901))+(((-1.0)*px))+x1907+((r22*x1900))+(((-1.0)*x1866*x1899))+((cj3*r20*x1868))+((x1866*x1898))+(((-1.0)*x1877*x1882))+(((-1.0)*x1908)));
evalcond[3]=((((-1.0)*cj3*cj4*r00*x1871))+((x1876*x1877))+(((-1.0)*x1873*x1898))+(((-1.0)*x1878*x1879))+(((-1.0)*cj3*r00*x1868))+x1909+((x1871*x1881))+((r02*x1901))+(((-1.0)*r02*x1900))+((cj4*x1868*x1881))+((x1874*x1899))+(((-1.0)*x1906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1910=(sj1*sj4);
IkReal x1911=(cj5*r01);
IkReal x1912=(r20*sj5);
IkReal x1913=(cj4*sj1);
IkReal x1914=(r00*sj5);
IkReal x1915=(cj1*sj4);
IkReal x1916=(cj5*r21);
IkReal x1917=(cj1*cj4);
if( IKabs(((((-1.0)*x1910*x1916))+(((-1.0)*x1910*x1912))+((x1914*x1915))+((x1911*x1915))+((r02*x1917))+(((-1.0)*r22*x1913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1912*x1915))+((r22*x1917))+((x1910*x1914))+((x1910*x1911))+((r02*x1913))+((x1915*x1916)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1910*x1916))+(((-1.0)*x1910*x1912))+((x1914*x1915))+((x1911*x1915))+((r02*x1917))+(((-1.0)*r22*x1913))))+IKsqr((((x1912*x1915))+((r22*x1917))+((x1910*x1914))+((x1910*x1911))+((r02*x1913))+((x1915*x1916))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1910*x1916))+(((-1.0)*x1910*x1912))+((x1914*x1915))+((x1911*x1915))+((r02*x1917))+(((-1.0)*r22*x1913))), (((x1912*x1915))+((r22*x1917))+((x1910*x1914))+((x1910*x1911))+((r02*x1913))+((x1915*x1916))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1918=IKcos(j2);
IkReal x1919=IKsin(j2);
IkReal x1920=(r22*sj4);
IkReal x1921=((0.99999999995)*cj3);
IkReal x1922=(r01*sj5);
IkReal x1923=((9.9999999995e-6)*cj3);
IkReal x1924=((1.36279999993186e-7)*cj4);
IkReal x1925=(cj5*r01);
IkReal x1926=(r20*sj5);
IkReal x1927=((9.9999999995e-6)*sj3);
IkReal x1928=((0.99999999995)*sj3);
IkReal x1929=(r00*sj5);
IkReal x1930=(cj5*r21);
IkReal x1931=(r02*sj4);
IkReal x1932=((1.0)*sj4);
IkReal x1933=(cj5*r20);
IkReal x1934=((1.0)*cj4);
IkReal x1935=(r21*sj5);
IkReal x1936=(cj5*r00);
IkReal x1937=(sj1*x1918);
IkReal x1938=(cj1*x1919);
IkReal x1939=(cj1*x1918);
IkReal x1940=(sj1*x1919);
IkReal x1941=(x1937+x1938);
evalcond[0]=((((-1.0)*x1925*x1932))+x1941+(((-1.0)*x1929*x1932))+(((-1.0)*r02*x1934)));
evalcond[1]=((((-1.0)*x1930*x1932))+(((-1.0)*r22*x1934))+(((-1.0)*x1926*x1932))+x1939+(((-1.0)*x1940)));
evalcond[2]=((((-0.121761000001269)*x1933))+(((-3.9e-7)*x1930))+((x1924*x1930))+(((0.121761000001269)*x1935))+(((1.92e-6)*sj1))+(((-1.36279999993186e-7)*x1920))+(((-1.0)*pz))+(((-3.9e-7)*x1926))+(((0.52362)*cj1))+(((0.391671)*x1939))+(((-0.391671)*x1940))+((x1924*x1926)));
evalcond[3]=((((-0.121761000001269)*x1936))+(((0.52362)*sj1))+(((-1.0)*px))+(((-3.9e-7)*x1929))+(((-3.9e-7)*x1925))+(((-1.92e-6)*cj1))+(((-1.36279999993186e-7)*x1931))+(((0.391671)*x1938))+(((0.391671)*x1937))+((x1924*x1925))+((x1924*x1929))+(((0.121761000001269)*x1922)));
evalcond[4]=((((-1.0)*x1928*x1933))+(((-1.0)*cj4*x1921*x1926))+(((-1.0)*x1923*x1933))+((cj4*x1927*x1930))+x1941+((x1920*x1921))+(((-1.0)*cj4*x1921*x1930))+((cj4*x1926*x1927))+((x1928*x1935))+((x1923*x1935))+(((-1.0)*x1920*x1927)));
evalcond[5]=((((-1.0)*x1928*x1936))+((x1921*x1931))+(((-1.0)*cj4*x1921*x1929))+(((-1.0)*cj4*x1921*x1925))+(((-1.0)*x1923*x1936))+(((-1.0)*x1939))+x1940+((cj4*x1927*x1929))+((cj4*x1925*x1927))+(((-1.0)*x1927*x1931))+((x1922*x1923))+((x1922*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1942=(r22*sj4);
IkReal x1943=((0.232536954279117)*cj5);
IkReal x1944=(cj5*r01);
IkReal x1945=(r02*sj4);
IkReal x1946=(cj5*r21);
IkReal x1947=((9.54335107914695e-13)*cj4);
IkReal x1948=((0.748006187683308)*cj4);
IkReal x1949=((8.52662144715453e-7)*cj5);
IkReal x1950=((2.60265077711611e-7)*cj4);
IkReal x1951=(r00*sj5);
IkReal x1952=((8.52662144715453e-7)*sj5);
IkReal x1953=(r20*sj5);
IkReal x1954=((0.748006187683308)*sj4);
IkReal x1955=((0.232536954279117)*sj5);
IkReal x1956=((2.74277506655963e-6)*cj4);
IkReal x1957=((2.74277506655963e-6)*sj4);
if( IKabs(((((-7.44814942123594e-7)*x1951))+(((-1.0)*r22*x1956))+(((-7.44814942123594e-7)*x1944))+((x1944*x1954))+((x1944*x1950))+((r20*x1949))+(((2.73107346716569e-12)*x1946))+((x1950*x1951))+(((2.73107346716569e-12)*x1953))+((x1951*x1954))+(((-1.0)*x1947*x1953))+(((-2.60265077711611e-7)*x1945))+(((-1.0)*x1946*x1947))+(((-1.0)*x1946*x1957))+(((-1.0)*r00*x1943))+(((-1.0)*x1953*x1957))+((r01*x1955))+(((-1.0)*r21*x1952))+(((7.00275247991204e-6)*pz))+((r02*x1948))+(((-1.90978190288101)*px))+(((9.54335107914695e-13)*x1942)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1948))+((r20*x1943))+(((-1.0)*x1950*x1953))+(((2.73107346716569e-12)*x1944))+(((-1.0)*r02*x1956))+(((2.73107346716569e-12)*x1951))+(((-1.0)*x1944*x1957))+(((7.44814942123594e-7)*x1946))+(((-1.0)*x1947*x1951))+(((7.44814942123594e-7)*x1953))+(((-1.0)*x1944*x1947))+(((-1.0)*x1951*x1957))+(((-1.0)*x1946*x1950))+(((-1.0)*x1946*x1954))+(((-1.0)*r01*x1952))+((r00*x1949))+(((1.90978190288101)*pz))+(((-1.0)*x1953*x1954))+(((2.60265077711611e-7)*x1942))+(((-1.0)*r21*x1955))+(((7.00275247991204e-6)*px))+(((9.54335107914695e-13)*x1945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.44814942123594e-7)*x1951))+(((-1.0)*r22*x1956))+(((-7.44814942123594e-7)*x1944))+((x1944*x1954))+((x1944*x1950))+((r20*x1949))+(((2.73107346716569e-12)*x1946))+((x1950*x1951))+(((2.73107346716569e-12)*x1953))+((x1951*x1954))+(((-1.0)*x1947*x1953))+(((-2.60265077711611e-7)*x1945))+(((-1.0)*x1946*x1947))+(((-1.0)*x1946*x1957))+(((-1.0)*r00*x1943))+(((-1.0)*x1953*x1957))+((r01*x1955))+(((-1.0)*r21*x1952))+(((7.00275247991204e-6)*pz))+((r02*x1948))+(((-1.90978190288101)*px))+(((9.54335107914695e-13)*x1942))))+IKsqr(((((-1.0)*r22*x1948))+((r20*x1943))+(((-1.0)*x1950*x1953))+(((2.73107346716569e-12)*x1944))+(((-1.0)*r02*x1956))+(((2.73107346716569e-12)*x1951))+(((-1.0)*x1944*x1957))+(((7.44814942123594e-7)*x1946))+(((-1.0)*x1947*x1951))+(((7.44814942123594e-7)*x1953))+(((-1.0)*x1944*x1947))+(((-1.0)*x1951*x1957))+(((-1.0)*x1946*x1950))+(((-1.0)*x1946*x1954))+(((-1.0)*r01*x1952))+((r00*x1949))+(((1.90978190288101)*pz))+(((-1.0)*x1953*x1954))+(((2.60265077711611e-7)*x1942))+(((-1.0)*r21*x1955))+(((7.00275247991204e-6)*px))+(((9.54335107914695e-13)*x1945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-7.44814942123594e-7)*x1951))+(((-1.0)*r22*x1956))+(((-7.44814942123594e-7)*x1944))+((x1944*x1954))+((x1944*x1950))+((r20*x1949))+(((2.73107346716569e-12)*x1946))+((x1950*x1951))+(((2.73107346716569e-12)*x1953))+((x1951*x1954))+(((-1.0)*x1947*x1953))+(((-2.60265077711611e-7)*x1945))+(((-1.0)*x1946*x1947))+(((-1.0)*x1946*x1957))+(((-1.0)*r00*x1943))+(((-1.0)*x1953*x1957))+((r01*x1955))+(((-1.0)*r21*x1952))+(((7.00275247991204e-6)*pz))+((r02*x1948))+(((-1.90978190288101)*px))+(((9.54335107914695e-13)*x1942))), ((((-1.0)*r22*x1948))+((r20*x1943))+(((-1.0)*x1950*x1953))+(((2.73107346716569e-12)*x1944))+(((-1.0)*r02*x1956))+(((2.73107346716569e-12)*x1951))+(((-1.0)*x1944*x1957))+(((7.44814942123594e-7)*x1946))+(((-1.0)*x1947*x1951))+(((7.44814942123594e-7)*x1953))+(((-1.0)*x1944*x1947))+(((-1.0)*x1951*x1957))+(((-1.0)*x1946*x1950))+(((-1.0)*x1946*x1954))+(((-1.0)*r01*x1952))+((r00*x1949))+(((1.90978190288101)*pz))+(((-1.0)*x1953*x1954))+(((2.60265077711611e-7)*x1942))+(((-1.0)*r21*x1955))+(((7.00275247991204e-6)*px))+(((9.54335107914695e-13)*x1945))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1958=IKsin(j1);
IkReal x1959=IKcos(j1);
IkReal x1960=((1.0)*px);
IkReal x1961=((0.391671)*cj4);
IkReal x1962=(r20*sj5);
IkReal x1963=((0.391671)*sj4);
IkReal x1964=((3.91670999980416e-6)*cj5);
IkReal x1965=((1.36279999993186e-7)*cj4);
IkReal x1966=(r21*sj3);
IkReal x1967=((0.391670999980416)*sj5);
IkReal x1968=((3.9e-7)*cj5);
IkReal x1969=(cj5*r01);
IkReal x1970=(r00*sj5);
IkReal x1971=((1.36279999993186e-7)*sj4);
IkReal x1972=(r01*sj5);
IkReal x1973=((3.91670999980416e-6)*cj3);
IkReal x1974=(cj5*r00);
IkReal x1975=((0.391670999980416)*sj3);
IkReal x1976=(cj5*r21);
IkReal x1977=(r01*sj3);
IkReal x1978=(r21*sj5);
IkReal x1979=(cj5*r20);
IkReal x1980=(r21*x1968);
IkReal x1981=((3.9e-7)*x1962);
IkReal x1982=(r22*x1971);
IkReal x1983=((0.121761000001269)*x1979);
IkReal x1984=((1.92e-6)*x1958);
IkReal x1985=((0.121761000001269)*x1978);
IkReal x1986=((0.52362)*x1959);
IkReal x1987=((0.121761000001269)*x1972);
IkReal x1988=((1.92e-6)*x1959);
IkReal x1989=(r02*x1971);
IkReal x1990=((3.9e-7)*x1970);
IkReal x1991=((0.52362)*x1958);
IkReal x1992=((0.121761000001269)*x1974);
IkReal x1993=(r01*x1968);
IkReal x1994=((0.391670999980416)*cj3*cj4);
IkReal x1995=((3.91670999980416e-6)*cj4*sj3);
IkReal x1996=((3.91670999980416e-6)*sj3*sj4);
IkReal x1997=((0.391670999980416)*cj3*sj4);
IkReal x1998=(x1962*x1965);
IkReal x1999=(x1965*x1976);
IkReal x2000=(x1965*x1969);
IkReal x2001=(x1965*x1970);
IkReal x2002=(x1982+x1983+x1980+x1981);
IkReal x2003=(x2000+x2001+x1987+x1988);
IkReal x2004=(x1989+x1991+x1990+x1993+x1992+x1960);
IkReal x2005=(x1986+x1984+x1985+x1999+x1998);
evalcond[0]=(((r02*x1961))+x2003+(((-1.0)*x2004))+((x1963*x1969))+((x1963*x1970)));
evalcond[1]=(x2005+(((-1.0)*pz))+((r22*x1961))+(((-1.0)*x2002))+((x1962*x1963))+((x1963*x1976)));
evalcond[2]=(((x1967*x1977))+((x1970*x1995))+((x1972*x1973))+(((-1.0)*cj3*r00*x1964))+x2002+(((-1.0)*x1974*x1975))+(((-1.0)*r02*x1996))+((r02*x1997))+((cj4*x1964*x1977))+pz+(((-1.0)*x2005))+(((-1.0)*cj3*cj4*r00*x1967))+(((-1.0)*x1969*x1994)));
evalcond[3]=((((-1.0)*x1975*x1979))+x2003+(((-1.0)*x1962*x1994))+(((-1.0)*cj3*r20*x1964))+(((-1.0)*x1976*x1994))+((cj4*x1964*x1966))+(((-1.0)*x2004))+((x1973*x1978))+((x1966*x1967))+((x1962*x1995))+(((-1.0)*r22*x1996))+((r22*x1997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2006=((1.0)*sj1);
IkReal x2007=(sj4*sj5);
IkReal x2008=(cj4*r22);
IkReal x2009=(cj5*sj4);
IkReal x2010=(cj4*r02);
IkReal x2011=((1.0)*cj1);
if( IKabs(((((-1.0)*x2006*x2008))+(((-1.0)*r00*x2007*x2011))+(((-1.0)*x2010*x2011))+(((-1.0)*r20*x2006*x2007))+(((-1.0)*r01*x2009*x2011))+(((-1.0)*r21*x2006*x2009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2007))+(((-1.0)*x2006*x2010))+(((-1.0)*r00*x2006*x2007))+(((-1.0)*r01*x2006*x2009))+((cj1*r21*x2009))+((cj1*x2008)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2006*x2008))+(((-1.0)*r00*x2007*x2011))+(((-1.0)*x2010*x2011))+(((-1.0)*r20*x2006*x2007))+(((-1.0)*r01*x2009*x2011))+(((-1.0)*r21*x2006*x2009))))+IKsqr((((cj1*r20*x2007))+(((-1.0)*x2006*x2010))+(((-1.0)*r00*x2006*x2007))+(((-1.0)*r01*x2006*x2009))+((cj1*r21*x2009))+((cj1*x2008))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2006*x2008))+(((-1.0)*r00*x2007*x2011))+(((-1.0)*x2010*x2011))+(((-1.0)*r20*x2006*x2007))+(((-1.0)*r01*x2009*x2011))+(((-1.0)*r21*x2006*x2009))), (((cj1*r20*x2007))+(((-1.0)*x2006*x2010))+(((-1.0)*r00*x2006*x2007))+(((-1.0)*r01*x2006*x2009))+((cj1*r21*x2009))+((cj1*x2008))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2012=IKcos(j2);
IkReal x2013=IKsin(j2);
IkReal x2014=(r22*sj4);
IkReal x2015=((0.99999999995)*cj3);
IkReal x2016=(r01*sj5);
IkReal x2017=((9.9999999995e-6)*cj3);
IkReal x2018=((1.36279999993186e-7)*cj4);
IkReal x2019=(cj5*r01);
IkReal x2020=((0.99999999995)*sj3);
IkReal x2021=(r20*sj5);
IkReal x2022=((9.9999999995e-6)*sj3);
IkReal x2023=(r00*sj5);
IkReal x2024=(cj5*r21);
IkReal x2025=(r02*sj4);
IkReal x2026=((1.0)*sj1);
IkReal x2027=(cj5*r20);
IkReal x2028=((1.0)*sj4);
IkReal x2029=((1.0)*cj4);
IkReal x2030=((0.391671)*sj1);
IkReal x2031=(r21*sj5);
IkReal x2032=(cj5*r00);
IkReal x2033=(cj1*x2012);
IkReal x2034=(cj1*x2013);
IkReal x2035=(x2013*x2026);
evalcond[0]=((((-1.0)*x2021*x2028))+(((-1.0)*r22*x2029))+x2033+(((-1.0)*x2024*x2028))+(((-1.0)*x2035)));
evalcond[1]=((((-1.0)*x2023*x2028))+(((-1.0)*r02*x2029))+(((-1.0)*x2019*x2028))+(((-1.0)*x2034))+(((-1.0)*x2012*x2026)));
evalcond[2]=((((-3.9e-7)*x2021))+(((-3.9e-7)*x2024))+(((-1.36279999993186e-7)*x2014))+((x2018*x2024))+((x2018*x2021))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-1.0)*x2013*x2030))+(((0.391671)*x2033))+(((0.52362)*cj1))+(((0.121761000001269)*x2031))+(((-0.121761000001269)*x2027)));
evalcond[3]=((((-3.9e-7)*x2023))+(((-0.121761000001269)*x2032))+(((1.92e-6)*cj1))+((x2018*x2023))+(((0.121761000001269)*x2016))+(((-1.0)*px))+(((-0.52362)*sj1))+(((-3.9e-7)*x2019))+(((-0.391671)*x2034))+(((-1.36279999993186e-7)*x2025))+(((-1.0)*x2012*x2030))+((x2018*x2019)));
evalcond[4]=(((cj4*x2021*x2022))+((sj1*x2012))+((x2017*x2031))+((x2014*x2015))+x2034+(((-1.0)*x2017*x2027))+(((-1.0)*cj4*x2015*x2021))+(((-1.0)*cj4*x2015*x2024))+((cj4*x2022*x2024))+(((-1.0)*x2014*x2022))+((x2020*x2031))+(((-1.0)*x2020*x2027)));
evalcond[5]=((((-1.0)*x2022*x2025))+(((-1.0)*x2020*x2032))+x2033+((cj4*x2019*x2022))+((x2016*x2017))+(((-1.0)*cj4*x2015*x2023))+((x2016*x2020))+((cj4*x2022*x2023))+(((-1.0)*x2035))+(((-1.0)*x2017*x2032))+(((-1.0)*cj4*x2015*x2019))+((x2015*x2025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2036=(r22*sj4);
IkReal x2037=((0.232536954279117)*cj5);
IkReal x2038=((9.54335107914695e-13)*cj4);
IkReal x2039=(cj5*r21);
IkReal x2040=(cj4*r22);
IkReal x2041=(cj4*r12);
IkReal x2042=(r10*sj5);
IkReal x2043=((2.60265077711611e-7)*cj4);
IkReal x2044=(r21*sj5);
IkReal x2045=(r11*sj5);
IkReal x2046=(cj5*r11);
IkReal x2047=((8.52662144715453e-7)*cj5);
IkReal x2048=((0.748006187683308)*sj4);
IkReal x2049=(r20*sj5);
IkReal x2050=((2.74277506655963e-6)*sj4);
IkReal x2051=(r12*sj4);
if( IKabs((((x2043*x2046))+(((-2.60265077711611e-7)*x2051))+((x2042*x2048))+((x2042*x2043))+(((-8.52662144715453e-7)*x2044))+((r20*x2047))+(((9.54335107914695e-13)*x2036))+(((-1.0)*x2039*x2050))+(((-1.0)*r10*x2037))+(((2.73107346716569e-12)*x2039))+(((0.232536954279117)*x2045))+(((-1.0)*x2049*x2050))+((x2046*x2048))+(((-2.74277506655963e-6)*x2040))+(((2.73107346716569e-12)*x2049))+(((0.748006187683308)*x2041))+(((-1.0)*x2038*x2039))+(((-7.44814942123594e-7)*x2046))+(((-7.44814942123594e-7)*x2042))+(((-1.0)*x2038*x2049))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((9.54335107914695e-13)*x2051))+(((-8.52662144715453e-7)*x2045))+(((-1.0)*x2039*x2048))+(((-1.0)*x2039*x2043))+(((7.44814942123594e-7)*x2049))+(((7.44814942123594e-7)*x2039))+(((-0.232536954279117)*x2044))+(((-1.0)*x2046*x2050))+(((-1.0)*x2042*x2050))+(((1.90978190288101)*pz))+(((-1.0)*x2043*x2049))+(((-2.74277506655963e-6)*x2041))+(((2.60265077711611e-7)*x2036))+((r20*x2037))+((r10*x2047))+(((2.73107346716569e-12)*x2042))+(((2.73107346716569e-12)*x2046))+(((-1.0)*x2048*x2049))+(((-1.0)*x2038*x2042))+(((-1.0)*x2038*x2046))+(((-0.748006187683308)*x2040))+(((7.00275247991204e-6)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2043*x2046))+(((-2.60265077711611e-7)*x2051))+((x2042*x2048))+((x2042*x2043))+(((-8.52662144715453e-7)*x2044))+((r20*x2047))+(((9.54335107914695e-13)*x2036))+(((-1.0)*x2039*x2050))+(((-1.0)*r10*x2037))+(((2.73107346716569e-12)*x2039))+(((0.232536954279117)*x2045))+(((-1.0)*x2049*x2050))+((x2046*x2048))+(((-2.74277506655963e-6)*x2040))+(((2.73107346716569e-12)*x2049))+(((0.748006187683308)*x2041))+(((-1.0)*x2038*x2039))+(((-7.44814942123594e-7)*x2046))+(((-7.44814942123594e-7)*x2042))+(((-1.0)*x2038*x2049))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))))+IKsqr(((((9.54335107914695e-13)*x2051))+(((-8.52662144715453e-7)*x2045))+(((-1.0)*x2039*x2048))+(((-1.0)*x2039*x2043))+(((7.44814942123594e-7)*x2049))+(((7.44814942123594e-7)*x2039))+(((-0.232536954279117)*x2044))+(((-1.0)*x2046*x2050))+(((-1.0)*x2042*x2050))+(((1.90978190288101)*pz))+(((-1.0)*x2043*x2049))+(((-2.74277506655963e-6)*x2041))+(((2.60265077711611e-7)*x2036))+((r20*x2037))+((r10*x2047))+(((2.73107346716569e-12)*x2042))+(((2.73107346716569e-12)*x2046))+(((-1.0)*x2048*x2049))+(((-1.0)*x2038*x2042))+(((-1.0)*x2038*x2046))+(((-0.748006187683308)*x2040))+(((7.00275247991204e-6)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x2043*x2046))+(((-2.60265077711611e-7)*x2051))+((x2042*x2048))+((x2042*x2043))+(((-8.52662144715453e-7)*x2044))+((r20*x2047))+(((9.54335107914695e-13)*x2036))+(((-1.0)*x2039*x2050))+(((-1.0)*r10*x2037))+(((2.73107346716569e-12)*x2039))+(((0.232536954279117)*x2045))+(((-1.0)*x2049*x2050))+((x2046*x2048))+(((-2.74277506655963e-6)*x2040))+(((2.73107346716569e-12)*x2049))+(((0.748006187683308)*x2041))+(((-1.0)*x2038*x2039))+(((-7.44814942123594e-7)*x2046))+(((-7.44814942123594e-7)*x2042))+(((-1.0)*x2038*x2049))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))), ((((9.54335107914695e-13)*x2051))+(((-8.52662144715453e-7)*x2045))+(((-1.0)*x2039*x2048))+(((-1.0)*x2039*x2043))+(((7.44814942123594e-7)*x2049))+(((7.44814942123594e-7)*x2039))+(((-0.232536954279117)*x2044))+(((-1.0)*x2046*x2050))+(((-1.0)*x2042*x2050))+(((1.90978190288101)*pz))+(((-1.0)*x2043*x2049))+(((-2.74277506655963e-6)*x2041))+(((2.60265077711611e-7)*x2036))+((r20*x2037))+((r10*x2047))+(((2.73107346716569e-12)*x2042))+(((2.73107346716569e-12)*x2046))+(((-1.0)*x2048*x2049))+(((-1.0)*x2038*x2042))+(((-1.0)*x2038*x2046))+(((-0.748006187683308)*x2040))+(((7.00275247991204e-6)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2052=IKsin(j1);
IkReal x2053=IKcos(j1);
IkReal x2054=((1.0)*py);
IkReal x2055=(cj5*r10);
IkReal x2056=((3.91670999980416e-6)*sj3);
IkReal x2057=(r12*sj4);
IkReal x2058=(r20*sj5);
IkReal x2059=((0.391671)*sj4);
IkReal x2060=((0.391670999980416)*sj3);
IkReal x2061=((3.91670999980416e-6)*cj3);
IkReal x2062=(cj5*r20);
IkReal x2063=((1.36279999993186e-7)*cj4);
IkReal x2064=(cj5*r11);
IkReal x2065=(r21*sj5);
IkReal x2066=(cj5*r21);
IkReal x2067=(r22*sj4);
IkReal x2068=(r10*sj5);
IkReal x2069=(r11*sj5);
IkReal x2070=((0.391671)*cj4);
IkReal x2071=((0.391670999980416)*cj3);
IkReal x2072=((3.9e-7)*x2066);
IkReal x2073=((3.9e-7)*x2058);
IkReal x2074=((1.36279999993186e-7)*x2067);
IkReal x2075=((0.121761000001269)*x2062);
IkReal x2076=((1.92e-6)*x2052);
IkReal x2077=((0.121761000001269)*x2065);
IkReal x2078=((0.52362)*x2053);
IkReal x2079=((0.121761000001269)*x2069);
IkReal x2080=((1.92e-6)*x2053);
IkReal x2081=((1.36279999993186e-7)*x2057);
IkReal x2082=((3.9e-7)*x2068);
IkReal x2083=((0.121761000001269)*x2055);
IkReal x2084=((0.52362)*x2052);
IkReal x2085=((3.9e-7)*x2064);
IkReal x2086=(cj4*x2071);
IkReal x2087=(x2058*x2063);
IkReal x2088=(x2063*x2066);
IkReal x2089=(x2063*x2068);
IkReal x2090=(x2063*x2064);
IkReal x2091=(x2073+x2072+x2075+x2074);
IkReal x2092=(x2079+x2090+x2089+x2080);
IkReal x2093=(x2078+x2077+x2076+x2088+x2087);
IkReal x2094=(x2054+x2082+x2083+x2081+x2084+x2085);
evalcond[0]=((((-1.0)*x2094))+((r12*x2070))+x2092+((x2059*x2064))+((x2059*x2068)));
evalcond[1]=((((-1.0)*x2091))+((r22*x2070))+x2093+((x2059*x2066))+(((-1.0)*pz))+((x2058*x2059)));
evalcond[2]=((((-1.0)*x2064*x2086))+(((-1.0)*x2093))+(((-1.0)*x2068*x2086))+x2091+(((-1.0)*x2055*x2061))+(((-1.0)*x2055*x2060))+(((-1.0)*x2056*x2057))+((x2060*x2069))+pz+((x2057*x2071))+((cj4*x2056*x2064))+((cj4*x2056*x2068))+((x2061*x2069)));
evalcond[3]=((((-1.0)*x2094))+(((-1.0)*x2066*x2086))+x2092+(((-1.0)*x2061*x2062))+((x2060*x2065))+(((-1.0)*x2056*x2067))+(((-1.0)*x2058*x2086))+((cj4*x2056*x2066))+((cj4*x2056*x2058))+((x2067*x2071))+((x2061*x2065))+(((-1.0)*x2060*x2062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2095=((1.0)*sj1);
IkReal x2096=(sj4*sj5);
IkReal x2097=(cj4*r22);
IkReal x2098=(cj4*r12);
IkReal x2099=((1.0)*cj1);
IkReal x2100=(cj5*r21*sj4);
IkReal x2101=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r10*x2096*x2099))+(((-1.0)*x2095*x2097))+(((-1.0)*x2099*x2101))+(((-1.0)*x2095*x2100))+(((-1.0)*r20*x2095*x2096))+(((-1.0)*x2098*x2099)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2097))+((cj1*r20*x2096))+(((-1.0)*x2095*x2098))+(((-1.0)*x2095*x2101))+((cj1*x2100))+(((-1.0)*r10*x2095*x2096)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2096*x2099))+(((-1.0)*x2095*x2097))+(((-1.0)*x2099*x2101))+(((-1.0)*x2095*x2100))+(((-1.0)*r20*x2095*x2096))+(((-1.0)*x2098*x2099))))+IKsqr((((cj1*x2097))+((cj1*r20*x2096))+(((-1.0)*x2095*x2098))+(((-1.0)*x2095*x2101))+((cj1*x2100))+(((-1.0)*r10*x2095*x2096))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x2096*x2099))+(((-1.0)*x2095*x2097))+(((-1.0)*x2099*x2101))+(((-1.0)*x2095*x2100))+(((-1.0)*r20*x2095*x2096))+(((-1.0)*x2098*x2099))), (((cj1*x2097))+((cj1*r20*x2096))+(((-1.0)*x2095*x2098))+(((-1.0)*x2095*x2101))+((cj1*x2100))+(((-1.0)*r10*x2095*x2096))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2102=IKcos(j2);
IkReal x2103=IKsin(j2);
IkReal x2104=(r22*sj4);
IkReal x2105=(cj5*r10);
IkReal x2106=((0.99999999995)*cj3);
IkReal x2107=((9.9999999995e-6)*sj3);
IkReal x2108=((1.36279999993186e-7)*cj4);
IkReal x2109=(cj5*r11);
IkReal x2110=(cj5*r21);
IkReal x2111=(r10*sj5);
IkReal x2112=((1.0)*sj4);
IkReal x2113=((1.0)*sj1);
IkReal x2114=((9.9999999995e-6)*cj3);
IkReal x2115=(cj5*r20);
IkReal x2116=(r20*sj5);
IkReal x2117=((1.0)*cj4);
IkReal x2118=((0.99999999995)*sj3);
IkReal x2119=((0.391671)*sj1);
IkReal x2120=((0.121761000001269)*sj5);
IkReal x2121=(r11*sj5);
IkReal x2122=(r12*sj4);
IkReal x2123=(r21*sj5);
IkReal x2124=(cj1*x2102);
IkReal x2125=(cj1*x2103);
IkReal x2126=(cj4*x2116);
IkReal x2127=(x2103*x2113);
evalcond[0]=((((-1.0)*x2112*x2116))+x2124+(((-1.0)*x2127))+(((-1.0)*x2110*x2112))+(((-1.0)*r22*x2117)));
evalcond[1]=((((-1.0)*x2102*x2113))+(((-1.0)*x2125))+(((-1.0)*x2111*x2112))+(((-1.0)*x2109*x2112))+(((-1.0)*r12*x2117)));
evalcond[2]=((((-3.9e-7)*x2116))+(((-3.9e-7)*x2110))+(((-1.0)*x2103*x2119))+(((-1.36279999993186e-7)*x2104))+((r21*x2120))+(((-0.121761000001269)*x2115))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((0.391671)*x2124))+((x2108*x2116))+((x2108*x2110)));
evalcond[3]=(((x2108*x2109))+(((1.92e-6)*cj1))+(((-1.0)*x2102*x2119))+(((-3.9e-7)*x2111))+(((-0.121761000001269)*x2105))+((r11*x2120))+(((-1.0)*py))+(((-0.391671)*x2125))+(((-0.52362)*sj1))+(((-3.9e-7)*x2109))+(((-1.36279999993186e-7)*x2122))+((x2108*x2111)));
evalcond[4]=((((-1.0)*x2114*x2115))+((x2107*x2126))+((x2104*x2106))+((x2114*x2123))+x2125+(((-1.0)*cj4*x2106*x2110))+(((-1.0)*x2106*x2126))+((x2118*x2123))+((sj1*x2102))+(((-1.0)*x2104*x2107))+((cj4*x2107*x2110))+(((-1.0)*x2115*x2118)));
evalcond[5]=((((-1.0)*x2107*x2122))+((x2106*x2122))+((x2114*x2121))+x2124+(((-1.0)*cj4*x2106*x2111))+(((-1.0)*x2127))+((x2118*x2121))+((cj4*x2107*x2109))+(((-1.0)*cj4*x2106*x2109))+((cj4*x2107*x2111))+(((-1.0)*x2105*x2118))+(((-1.0)*x2105*x2114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2128=(r22*sj4);
IkReal x2129=((0.232536954279117)*cj5);
IkReal x2130=(cj4*cj5);
IkReal x2131=(cj4*r22);
IkReal x2132=(cj4*r12);
IkReal x2133=(r21*sj5);
IkReal x2134=(r11*sj5);
IkReal x2135=(r10*sj5);
IkReal x2136=((7.44814942123594e-7)*cj5);
IkReal x2137=(cj5*r11);
IkReal x2138=((8.52662144715453e-7)*cj5);
IkReal x2139=((0.748006187683308)*sj4);
IkReal x2140=(r20*sj5);
IkReal x2141=((2.74277506655963e-6)*sj4);
IkReal x2142=(cj5*r21);
IkReal x2143=(r12*sj4);
IkReal x2144=(cj4*x2135);
if( IKabs(((((-9.54335107914695e-13)*cj4*x2140))+(((-8.52662144715453e-7)*x2133))+(((-2.74277506655963e-6)*x2131))+(((2.60265077711611e-7)*x2143))+(((2.73107346716569e-12)*x2140))+(((2.73107346716569e-12)*x2142))+(((9.54335107914695e-13)*x2128))+(((-9.54335107914695e-13)*r21*x2130))+(((-2.60265077711611e-7)*r11*x2130))+((r10*x2129))+((r11*x2136))+(((-1.0)*x2135*x2139))+(((-1.0)*x2140*x2141))+(((-0.232536954279117)*x2134))+(((7.44814942123594e-7)*x2135))+(((-1.0)*x2137*x2139))+(((1.90978190288101)*py))+(((-0.748006187683308)*x2132))+(((-2.60265077711611e-7)*x2144))+(((-1.0)*x2141*x2142))+((r20*x2138))+(((7.00275247991204e-6)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2136))+(((-7.00275247991204e-6)*py))+(((9.54335107914695e-13)*r11*x2130))+(((-2.60265077711611e-7)*cj4*x2140))+(((-2.60265077711611e-7)*r21*x2130))+(((9.54335107914695e-13)*x2144))+((r20*x2129))+(((-2.73107346716569e-12)*x2135))+(((-2.73107346716569e-12)*x2137))+(((-0.232536954279117)*x2133))+(((-9.54335107914695e-13)*x2143))+((x2137*x2141))+(((1.90978190288101)*pz))+(((8.52662144715453e-7)*x2134))+(((-0.748006187683308)*x2131))+((x2135*x2141))+(((2.74277506655963e-6)*x2132))+(((7.44814942123594e-7)*x2140))+(((2.60265077711611e-7)*x2128))+(((-1.0)*r10*x2138))+(((-1.0)*x2139*x2140))+(((-1.0)*x2139*x2142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-9.54335107914695e-13)*cj4*x2140))+(((-8.52662144715453e-7)*x2133))+(((-2.74277506655963e-6)*x2131))+(((2.60265077711611e-7)*x2143))+(((2.73107346716569e-12)*x2140))+(((2.73107346716569e-12)*x2142))+(((9.54335107914695e-13)*x2128))+(((-9.54335107914695e-13)*r21*x2130))+(((-2.60265077711611e-7)*r11*x2130))+((r10*x2129))+((r11*x2136))+(((-1.0)*x2135*x2139))+(((-1.0)*x2140*x2141))+(((-0.232536954279117)*x2134))+(((7.44814942123594e-7)*x2135))+(((-1.0)*x2137*x2139))+(((1.90978190288101)*py))+(((-0.748006187683308)*x2132))+(((-2.60265077711611e-7)*x2144))+(((-1.0)*x2141*x2142))+((r20*x2138))+(((7.00275247991204e-6)*pz))))+IKsqr((((r21*x2136))+(((-7.00275247991204e-6)*py))+(((9.54335107914695e-13)*r11*x2130))+(((-2.60265077711611e-7)*cj4*x2140))+(((-2.60265077711611e-7)*r21*x2130))+(((9.54335107914695e-13)*x2144))+((r20*x2129))+(((-2.73107346716569e-12)*x2135))+(((-2.73107346716569e-12)*x2137))+(((-0.232536954279117)*x2133))+(((-9.54335107914695e-13)*x2143))+((x2137*x2141))+(((1.90978190288101)*pz))+(((8.52662144715453e-7)*x2134))+(((-0.748006187683308)*x2131))+((x2135*x2141))+(((2.74277506655963e-6)*x2132))+(((7.44814942123594e-7)*x2140))+(((2.60265077711611e-7)*x2128))+(((-1.0)*r10*x2138))+(((-1.0)*x2139*x2140))+(((-1.0)*x2139*x2142))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-9.54335107914695e-13)*cj4*x2140))+(((-8.52662144715453e-7)*x2133))+(((-2.74277506655963e-6)*x2131))+(((2.60265077711611e-7)*x2143))+(((2.73107346716569e-12)*x2140))+(((2.73107346716569e-12)*x2142))+(((9.54335107914695e-13)*x2128))+(((-9.54335107914695e-13)*r21*x2130))+(((-2.60265077711611e-7)*r11*x2130))+((r10*x2129))+((r11*x2136))+(((-1.0)*x2135*x2139))+(((-1.0)*x2140*x2141))+(((-0.232536954279117)*x2134))+(((7.44814942123594e-7)*x2135))+(((-1.0)*x2137*x2139))+(((1.90978190288101)*py))+(((-0.748006187683308)*x2132))+(((-2.60265077711611e-7)*x2144))+(((-1.0)*x2141*x2142))+((r20*x2138))+(((7.00275247991204e-6)*pz))), (((r21*x2136))+(((-7.00275247991204e-6)*py))+(((9.54335107914695e-13)*r11*x2130))+(((-2.60265077711611e-7)*cj4*x2140))+(((-2.60265077711611e-7)*r21*x2130))+(((9.54335107914695e-13)*x2144))+((r20*x2129))+(((-2.73107346716569e-12)*x2135))+(((-2.73107346716569e-12)*x2137))+(((-0.232536954279117)*x2133))+(((-9.54335107914695e-13)*x2143))+((x2137*x2141))+(((1.90978190288101)*pz))+(((8.52662144715453e-7)*x2134))+(((-0.748006187683308)*x2131))+((x2135*x2141))+(((2.74277506655963e-6)*x2132))+(((7.44814942123594e-7)*x2140))+(((2.60265077711611e-7)*x2128))+(((-1.0)*r10*x2138))+(((-1.0)*x2139*x2140))+(((-1.0)*x2139*x2142))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2145=IKsin(j1);
IkReal x2146=IKcos(j1);
IkReal x2147=((1.0)*pz);
IkReal x2148=(cj5*r10);
IkReal x2149=((3.91670999980416e-6)*sj3);
IkReal x2150=(r12*sj4);
IkReal x2151=(r20*sj5);
IkReal x2152=((0.391671)*sj4);
IkReal x2153=((0.391670999980416)*sj3);
IkReal x2154=((3.91670999980416e-6)*cj3);
IkReal x2155=(cj5*r20);
IkReal x2156=((1.36279999993186e-7)*cj4);
IkReal x2157=(cj5*r11);
IkReal x2158=(r21*sj5);
IkReal x2159=(cj5*r21);
IkReal x2160=(r22*sj4);
IkReal x2161=(r10*sj5);
IkReal x2162=(r11*sj5);
IkReal x2163=((0.391671)*cj4);
IkReal x2164=((0.391670999980416)*cj3);
IkReal x2165=((0.52362)*x2145);
IkReal x2166=((0.121761000001269)*x2162);
IkReal x2167=((1.36279999993186e-7)*x2150);
IkReal x2168=((3.9e-7)*x2161);
IkReal x2169=((0.121761000001269)*x2148);
IkReal x2170=((1.92e-6)*x2146);
IkReal x2171=((3.9e-7)*x2157);
IkReal x2172=((1.92e-6)*x2145);
IkReal x2173=((0.121761000001269)*x2158);
IkReal x2174=((0.52362)*x2146);
IkReal x2175=((3.9e-7)*x2159);
IkReal x2176=((3.9e-7)*x2151);
IkReal x2177=((1.36279999993186e-7)*x2160);
IkReal x2178=((0.121761000001269)*x2155);
IkReal x2179=(cj4*x2164);
IkReal x2180=(x2156*x2161);
IkReal x2181=(x2156*x2157);
IkReal x2182=(x2151*x2156);
IkReal x2183=(x2156*x2159);
IkReal x2184=(x2176+x2177+x2175+x2178+x2147);
IkReal x2185=(x2165+x2166+x2181+x2180);
IkReal x2186=(x2170+x2171+x2169+x2168+x2167);
IkReal x2187=(x2172+x2173+x2174+x2183+x2182);
evalcond[0]=((((-1.0)*x2152*x2161))+x2186+(((-1.0)*x2152*x2157))+py+(((-1.0)*x2185))+(((-1.0)*r12*x2163)));
evalcond[1]=(((x2152*x2159))+x2187+((x2151*x2152))+(((-1.0)*x2184))+((r22*x2163)));
evalcond[2]=((((-1.0)*x2160*x2164))+((x2154*x2155))+x2185+(((-1.0)*x2153*x2158))+(((-1.0)*py))+((x2149*x2160))+(((-1.0)*x2186))+((x2151*x2179))+(((-1.0)*cj4*x2149*x2151))+(((-1.0)*cj4*x2149*x2159))+((x2159*x2179))+(((-1.0)*x2154*x2158))+((x2153*x2155)));
evalcond[3]=((((-1.0)*x2149*x2150))+(((-1.0)*x2148*x2153))+(((-1.0)*x2148*x2154))+(((-1.0)*x2161*x2179))+x2187+(((-1.0)*x2157*x2179))+((x2154*x2162))+((x2153*x2162))+(((-1.0)*x2184))+((cj4*x2149*x2157))+((cj4*x2149*x2161))+((x2150*x2164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2188=((1.0)*sj1);
IkReal x2189=(sj4*sj5);
IkReal x2190=(cj4*r12);
IkReal x2191=(cj4*r22);
IkReal x2192=(cj5*sj4);
IkReal x2193=(cj1*x2192);
if( IKabs((((cj1*x2190))+(((-1.0)*x2188*x2191))+(((-1.0)*r21*x2188*x2192))+((r11*x2193))+((cj1*r10*x2189))+(((-1.0)*r20*x2188*x2189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2189))+((cj1*x2191))+((r10*sj1*x2189))+((sj1*x2190))+((r11*sj1*x2192))+((r21*x2193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2190))+(((-1.0)*x2188*x2191))+(((-1.0)*r21*x2188*x2192))+((r11*x2193))+((cj1*r10*x2189))+(((-1.0)*r20*x2188*x2189))))+IKsqr((((cj1*r20*x2189))+((cj1*x2191))+((r10*sj1*x2189))+((sj1*x2190))+((r11*sj1*x2192))+((r21*x2193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2190))+(((-1.0)*x2188*x2191))+(((-1.0)*r21*x2188*x2192))+((r11*x2193))+((cj1*r10*x2189))+(((-1.0)*r20*x2188*x2189))), (((cj1*r20*x2189))+((cj1*x2191))+((r10*sj1*x2189))+((sj1*x2190))+((r11*sj1*x2192))+((r21*x2193))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2194=IKcos(j2);
IkReal x2195=IKsin(j2);
IkReal x2196=(r22*sj4);
IkReal x2197=(cj5*r10);
IkReal x2198=((0.99999999995)*cj3);
IkReal x2199=((9.9999999995e-6)*sj3);
IkReal x2200=((1.36279999993186e-7)*cj4);
IkReal x2201=(cj5*r11);
IkReal x2202=(cj5*r21);
IkReal x2203=(r10*sj5);
IkReal x2204=((1.0)*sj4);
IkReal x2205=(r12*sj4);
IkReal x2206=((9.9999999995e-6)*cj3);
IkReal x2207=(cj5*r20);
IkReal x2208=(r20*sj5);
IkReal x2209=((1.0)*cj4);
IkReal x2210=((0.99999999995)*sj3);
IkReal x2211=((0.121761000001269)*sj5);
IkReal x2212=(r11*sj5);
IkReal x2213=(r21*sj5);
IkReal x2214=(sj1*x2194);
IkReal x2215=(cj1*x2195);
IkReal x2216=(cj1*x2194);
IkReal x2217=(cj4*x2208);
IkReal x2218=(sj1*x2195);
IkReal x2219=(x2215+x2214);
evalcond[0]=((((-1.0)*x2203*x2204))+x2219+(((-1.0)*r12*x2209))+(((-1.0)*x2201*x2204)));
evalcond[1]=((((-1.0)*x2218))+(((-1.0)*x2204*x2208))+x2216+(((-1.0)*r22*x2209))+(((-1.0)*x2202*x2204)));
evalcond[2]=((((-3.9e-7)*x2208))+(((-3.9e-7)*x2202))+((x2200*x2208))+((x2200*x2202))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((r21*x2211))+(((0.391671)*x2216))+(((-0.121761000001269)*x2207))+(((-0.391671)*x2218))+(((-1.36279999993186e-7)*x2196)));
evalcond[3]=((((-1.36279999993186e-7)*x2205))+(((0.52362)*sj1))+(((-3.9e-7)*x2203))+(((-3.9e-7)*x2201))+((x2200*x2201))+((x2200*x2203))+((r11*x2211))+(((-1.0)*py))+(((-1.92e-6)*cj1))+(((0.391671)*x2215))+(((0.391671)*x2214))+(((-0.121761000001269)*x2197)));
evalcond[4]=(((x2196*x2198))+x2219+((x2210*x2213))+(((-1.0)*x2196*x2199))+(((-1.0)*x2207*x2210))+((x2206*x2213))+(((-1.0)*x2198*x2217))+(((-1.0)*cj4*x2198*x2202))+((x2199*x2217))+(((-1.0)*x2206*x2207))+((cj4*x2199*x2202)));
evalcond[5]=((((-1.0)*x2216))+((x2198*x2205))+x2218+((x2210*x2212))+((x2206*x2212))+(((-1.0)*x2197*x2210))+(((-1.0)*x2197*x2206))+(((-1.0)*x2199*x2205))+(((-1.0)*cj4*x2198*x2201))+(((-1.0)*cj4*x2198*x2203))+((cj4*x2199*x2203))+((cj4*x2199*x2201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2220=(r22*sj4);
IkReal x2221=(r10*sj5);
IkReal x2222=(cj0*r21);
IkReal x2223=(sj3*sj5);
IkReal x2224=(r20*sj5);
IkReal x2225=((0.391671)*sj4);
IkReal x2226=(cj3*cj5);
IkReal x2227=((9791774.99951041)*cj4);
IkReal x2228=((1.36279999993186e-7)*cj4);
IkReal x2229=(cj5*r21);
IkReal x2230=(cj0*r20);
IkReal x2231=(cj5*r10);
IkReal x2232=((26704006.3814773)*cj4);
IkReal x2233=(r11*sj5);
IkReal x2234=(cj0*cj3);
IkReal x2235=((929152.781203542)*cj4);
IkReal x2236=(cj5*r11);
IkReal x2237=(r12*sj4);
IkReal x2238=(cj0*sj3);
IkReal x2239=(cj5*sj3);
IkReal x2240=((2670400638147.73)*cj4);
IkReal x2241=(cj3*sj5);
IkReal x2242=((-3.40699999982965)*cj4);
IkReal x2243=((-97.9177499951041)*cj4);
IkReal x2244=(((x2228*x2229))+(((0.121761000001269)*r21*sj5))+((x2225*x2229))+((x2224*x2225))+((x2224*x2228))+(((-1.0)*pz))+(((-3.9e-7)*x2224))+(((-3.9e-7)*x2229))+(((0.391671)*cj4*r22))+(((-1.36279999993186e-7)*x2220))+(((-0.121761000001269)*cj5*r20)));
IkReal x2245=(cj0*x2244);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(((((-2659007.8125)*x2221))+((x2235*x2236))+(((-2659007.8125)*x2236))+(((2670400638147.73)*x2222*x2223))+(((2670400638147.73)*x2220*x2234))+((x2223*x2230*x2232))+(((-830162692977.399)*x2231))+(((-26704006.3814773)*x2226*x2230))+(((830162692977.399)*x2233))+(((-6817968750000.0)*py))+(((10486035937.5)*sj0))+(((-25000000.0)*x2245))+(((-929152.781203542)*x2237))+(((-26704006.3814773)*x2220*x2238))+((x2221*x2235))+(((-1.0)*x2222*x2226*x2240))+(((-1.0)*x2224*x2234*x2240))+(((26704006.3814773)*x2222*x2241))+(((-2670400638147.73)*x2230*x2239))+((x2222*x2232*x2239)))),IkReal((((x2236*x2242))+(((-38450.0)*sj0))+(((-6817968750000.0)*x2245))+(((-9791774.99951041)*x2222*x2223))+((x2222*x2239*x2243))+(((9.75)*x2221))+(((97.9177499951041)*x2220*x2238))+(((9.75)*x2236))+(((25000000.0)*py))+((x2222*x2226*x2227))+((x2221*x2242))+(((9791774.99951041)*x2230*x2239))+(((-3044025.00003172)*x2233))+((x2224*x2227*x2234))+(((3044025.00003172)*x2231))+(((97.9177499951041)*x2226*x2230))+(((-9791774.99951041)*x2220*x2234))+(((-97.9177499951041)*x2222*x2241))+(((3.40699999982965)*x2237))+((x2223*x2230*x2243)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
CheckValue<IkReal> x2247=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2247.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2246.value)+(((1.5707963267949)*(x2247.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2248=IKcos(j1);
IkReal x2249=cj0*cj0;
IkReal x2250=IKsin(j1);
IkReal x2251=sj0*sj0;
IkReal x2252=((1.36279999993186e-7)*cj0);
IkReal x2253=(r12*sj4);
IkReal x2254=(r21*sj5);
IkReal x2255=((0.391670999980416)*sj3);
IkReal x2256=(r20*sj5);
IkReal x2257=((0.391671)*sj4);
IkReal x2258=((3.9e-7)*cj5);
IkReal x2259=((1.0)*pz);
IkReal x2260=((3.91670999980416e-6)*cj3);
IkReal x2261=(r00*sj5);
IkReal x2262=(r11*sj5);
IkReal x2263=(cj0*sj0);
IkReal x2264=(cj5*r11);
IkReal x2265=(r02*sj4);
IkReal x2266=(cj0*r21);
IkReal x2267=((3.9e-7)*sj0);
IkReal x2268=((1.36279999993186e-7)*sj0);
IkReal x2269=(r01*sj0);
IkReal x2270=((0.121761000001269)*sj5);
IkReal x2271=(cj5*r10);
IkReal x2272=((3.91670999980416e-6)*sj3);
IkReal x2273=(cj5*r00);
IkReal x2274=(cj0*r01);
IkReal x2275=((1.36279999993186e-7)*cj4);
IkReal x2276=(r22*sj4);
IkReal x2277=((3.9e-7)*cj0);
IkReal x2278=(cj4*sj0);
IkReal x2279=((0.391671)*r12);
IkReal x2280=(cj5*r21);
IkReal x2281=((1.0)*px);
IkReal x2282=((0.391670999980416)*cj3);
IkReal x2283=(cj0*cj4);
IkReal x2284=((0.121761000001269)*cj0);
IkReal x2285=(r01*sj5);
IkReal x2286=(r10*sj5);
IkReal x2287=((0.391671)*r02);
IkReal x2288=(cj5*r20);
IkReal x2289=((1.0)*py);
IkReal x2290=((0.001538)*x2263);
IkReal x2291=((1.92e-6)*x2250);
IkReal x2292=((0.52362)*x2248);
IkReal x2293=((0.52362)*x2250);
IkReal x2294=(sj5*x2275);
IkReal x2295=((0.121761000001269)*x2262);
IkReal x2296=(cj4*x2272);
IkReal x2297=((0.121761000001269)*cj5*sj0);
IkReal x2298=(cj4*cj5*r01);
IkReal x2299=((3.9e-7)*x2286);
IkReal x2300=((1.92e-6)*x2248);
IkReal x2301=(sj0*x2288);
IkReal x2302=(x2263*x2293);
IkReal x2303=(x2263*x2300);
evalcond[0]=((((-1.0)*r21*x2258))+x2292+x2291+((x2256*x2257))+(((0.121761000001269)*x2254))+(((-1.0)*x2259))+((x2275*x2280))+(((0.391671)*cj4*r22))+((x2257*x2280))+(((-3.9e-7)*x2256))+(((-0.121761000001269)*x2288))+(((-1.36279999993186e-7)*x2276))+((x2256*x2275)));
evalcond[1]=(((cj0*x2257*x2286))+(((-1.0)*cj0*x2289))+x2290+(((-1.0)*x2277*x2286))+((x2262*x2284))+((cj4*x2252*x2264))+(((-1.0)*x2249*x2293))+(((-1.0)*x2252*x2253))+(((-1.0)*x2271*x2284))+((x2279*x2283))+((cj4*x2252*x2286))+(((-1.0)*cj0*r11*x2258))+((cj0*x2257*x2264))+((x2249*x2300)));
evalcond[2]=(((x2251*x2300))+((x2258*x2269))+(((-1.0)*x2251*x2293))+(((0.121761000001269)*sj0*x2273))+(((-1.0)*cj5*x2257*x2269))+(((-1.0)*sj0*x2257*x2261))+((x2261*x2267))+(((-1.0)*x2268*x2298))+(((-1.0)*x2278*x2287))+(((-1.0)*x2269*x2270))+((px*sj0))+(((-1.0)*cj4*x2261*x2268))+(((-1.0)*x2290))+((x2265*x2268)));
evalcond[3]=(((x2260*x2262))+((x2252*x2276))+((x2258*x2266))+((x2253*x2282))+(((-1.0)*x2255*x2271))+(((-1.0)*cj0*x2292))+(((-1.0)*cj0*x2291))+(((-1.0)*x2260*x2271))+((x2255*x2262))+(((-1.0)*cj4*x2282*x2286))+(((-1.0)*cj4*x2252*x2280))+(((-1.0)*x2253*x2272))+(((-1.0)*x2254*x2284))+((x2286*x2296))+((cj0*pz))+(((-1.0)*cj4*x2264*x2282))+((x2256*x2277))+(((-1.0)*cj4*x2252*x2256))+((x2284*x2288))+((x2264*x2296)));
evalcond[4]=(((cj4*x2268*x2280))+(((-1.0)*x2256*x2267))+(((0.121761000001269)*sj0*x2254))+(((-1.0)*x2282*x2298))+((sj0*x2292))+((sj0*x2291))+(((-1.0)*x2255*x2273))+(((-1.0)*cj4*x2261*x2282))+(((-1.0)*x2260*x2273))+((x2265*x2282))+((x2261*x2296))+(((-0.121761000001269)*x2301))+((cj5*r01*x2296))+((x2260*x2285))+(((-1.0)*sj0*x2259))+(((-1.0)*x2268*x2276))+((cj4*x2256*x2268))+(((-1.0)*x2265*x2272))+((x2255*x2285))+(((-1.0)*r21*sj0*x2258)));
evalcond[5]=((((0.001538)*sj0))+x2295+((cj0*x2300))+(((-1.36279999993186e-7)*x2253))+(((-1.0)*x2289))+(((-1.0)*cj0*x2293))+(((-1.0)*cj0*x2255*x2288))+(((-0.121761000001269)*x2271))+(((-1.0)*cj0*x2272*x2276))+((x2275*x2286))+(((-1.0)*r11*x2258))+(((-1.0)*cj0*x2260*x2288))+((cj0*x2254*x2260))+((cj5*x2266*x2296))+((cj0*x2276*x2282))+((x2256*x2272*x2283))+(((-1.0)*x2256*x2282*x2283))+((x2264*x2275))+(((-1.0)*x2299))+(((-1.0)*cj4*cj5*x2266*x2282))+((cj0*x2254*x2255)));
evalcond[6]=((((0.001538)*cj0))+((r01*x2270))+(((-1.0)*x2272*x2278*x2280))+(((-1.0)*sj0*x2276*x2282))+(((-1.0)*sj0*x2254*x2255))+((sj0*x2293))+((x2255*x2301))+(((-1.0)*x2281))+((x2261*x2275))+(((-0.121761000001269)*x2273))+((cj5*r01*x2275))+(((-3.9e-7)*x2261))+((x2260*x2301))+(((-1.0)*r01*x2258))+((sj0*x2272*x2276))+(((-1.0)*sj0*x2300))+(((-1.0)*x2256*x2272*x2278))+((x2278*x2280*x2282))+((x2256*x2278*x2282))+(((-1.36279999993186e-7)*x2265))+(((-1.0)*sj0*x2254*x2260)));
evalcond[7]=(((r11*sj0*x2258))+((cj5*x2257*x2274))+(((0.121761000001269)*sj0*x2271))+x2302+(((-1.0)*sj0*x2295))+((x2267*x2286))+(((-1.0)*cj4*x2264*x2268))+(((-1.0)*x2303))+(((-0.001538)*x2251))+(((-1.0)*cj4*x2268*x2286))+((x2283*x2287))+((x2253*x2268))+((cj0*x2257*x2261))+((py*sj0)));
evalcond[8]=((((-1.0)*cj0*x2281))+(((-1.0)*x2278*x2279))+(((-1.0)*x2252*x2265))+((x2270*x2274))+((cj4*x2252*x2261))+x2302+(((0.001538)*x2249))+(((-1.0)*sj0*x2257*x2264))+(((-1.0)*x2303))+((x2252*x2298))+(((-1.0)*x2258*x2274))+(((-1.0)*x2261*x2277))+(((-1.0)*sj0*x2257*x2286))+(((-1.0)*x2273*x2284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2304=(sj1*sj4);
IkReal x2305=(cj5*r01);
IkReal x2306=(r20*sj5);
IkReal x2307=(cj4*sj1);
IkReal x2308=(r00*sj5);
IkReal x2309=(cj1*sj4);
IkReal x2310=(cj5*r21);
IkReal x2311=(cj1*cj4);
if( IKabs((((x2305*x2309))+((x2308*x2309))+(((-1.0)*x2304*x2306))+(((-1.0)*r22*x2307))+((r02*x2311))+(((-1.0)*x2304*x2310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2304*x2305))+((x2304*x2308))+((x2306*x2309))+((r22*x2311))+((x2309*x2310))+((r02*x2307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2305*x2309))+((x2308*x2309))+(((-1.0)*x2304*x2306))+(((-1.0)*r22*x2307))+((r02*x2311))+(((-1.0)*x2304*x2310))))+IKsqr((((x2304*x2305))+((x2304*x2308))+((x2306*x2309))+((r22*x2311))+((x2309*x2310))+((r02*x2307))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2305*x2309))+((x2308*x2309))+(((-1.0)*x2304*x2306))+(((-1.0)*r22*x2307))+((r02*x2311))+(((-1.0)*x2304*x2310))), (((x2304*x2305))+((x2304*x2308))+((x2306*x2309))+((r22*x2311))+((x2309*x2310))+((r02*x2307))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2312=IKcos(j2);
IkReal x2313=IKsin(j2);
IkReal x2314=(r22*sj4);
IkReal x2315=((0.99999999995)*cj3);
IkReal x2316=(r01*sj5);
IkReal x2317=((9.9999999995e-6)*cj3);
IkReal x2318=((1.36279999993186e-7)*cj4);
IkReal x2319=(cj5*r01);
IkReal x2320=(r20*sj5);
IkReal x2321=((9.9999999995e-6)*sj3);
IkReal x2322=((0.99999999995)*sj3);
IkReal x2323=(r00*sj5);
IkReal x2324=(cj5*r21);
IkReal x2325=(r02*sj4);
IkReal x2326=((1.0)*sj4);
IkReal x2327=(cj5*r20);
IkReal x2328=((1.0)*cj4);
IkReal x2329=(r21*sj5);
IkReal x2330=(cj5*r00);
IkReal x2331=(sj1*x2312);
IkReal x2332=(cj1*x2313);
IkReal x2333=(cj1*x2312);
IkReal x2334=(sj1*x2313);
IkReal x2335=(x2331+x2332);
evalcond[0]=(x2335+(((-1.0)*x2319*x2326))+(((-1.0)*x2323*x2326))+(((-1.0)*r02*x2328)));
evalcond[1]=((((-1.0)*x2324*x2326))+(((-1.0)*r22*x2328))+x2333+(((-1.0)*x2320*x2326))+(((-1.0)*x2334)));
evalcond[2]=((((-3.9e-7)*x2320))+(((-3.9e-7)*x2324))+(((0.391671)*x2333))+(((1.92e-6)*sj1))+((x2318*x2324))+((x2318*x2320))+(((-1.0)*pz))+(((-0.391671)*x2334))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x2314))+(((0.121761000001269)*x2329))+(((-0.121761000001269)*x2327)));
evalcond[3]=((((0.52362)*sj1))+(((-3.9e-7)*x2323))+((x2318*x2319))+(((0.391671)*x2332))+(((0.391671)*x2331))+(((-3.9e-7)*x2319))+((x2318*x2323))+(((-1.0)*px))+(((-1.92e-6)*cj1))+(((-1.36279999993186e-7)*x2325))+(((-0.121761000001269)*x2330))+(((0.121761000001269)*x2316)));
evalcond[4]=(((x2317*x2329))+((cj4*x2320*x2321))+x2335+((x2322*x2329))+(((-1.0)*x2322*x2327))+(((-1.0)*cj4*x2315*x2324))+(((-1.0)*cj4*x2315*x2320))+((cj4*x2321*x2324))+((x2314*x2315))+(((-1.0)*x2317*x2327))+(((-1.0)*x2314*x2321)));
evalcond[5]=(((x2315*x2325))+((x2316*x2322))+(((-1.0)*x2322*x2330))+(((-1.0)*x2321*x2325))+((x2316*x2317))+x2334+(((-1.0)*cj4*x2315*x2323))+((cj4*x2321*x2323))+(((-1.0)*cj4*x2315*x2319))+((cj4*x2319*x2321))+(((-1.0)*x2333))+(((-1.0)*x2317*x2330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2336=((1.0)*sj1);
IkReal x2337=(sj4*sj5);
IkReal x2338=(cj4*r22);
IkReal x2339=(cj5*sj4);
IkReal x2340=(cj4*r02);
IkReal x2341=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*x2337*x2341))+(((-1.0)*x2340*x2341))+(((-1.0)*r01*x2339*x2341))+(((-1.0)*r21*x2336*x2339))+(((-1.0)*x2336*x2338))+(((-1.0)*r20*x2336*x2337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2338))+((cj1*r21*x2339))+(((-1.0)*x2336*x2340))+((cj1*r20*x2337))+(((-1.0)*r01*x2336*x2339))+(((-1.0)*r00*x2336*x2337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2337*x2341))+(((-1.0)*x2340*x2341))+(((-1.0)*r01*x2339*x2341))+(((-1.0)*r21*x2336*x2339))+(((-1.0)*x2336*x2338))+(((-1.0)*r20*x2336*x2337))))+IKsqr((((cj1*x2338))+((cj1*r21*x2339))+(((-1.0)*x2336*x2340))+((cj1*r20*x2337))+(((-1.0)*r01*x2336*x2339))+(((-1.0)*r00*x2336*x2337))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x2337*x2341))+(((-1.0)*x2340*x2341))+(((-1.0)*r01*x2339*x2341))+(((-1.0)*r21*x2336*x2339))+(((-1.0)*x2336*x2338))+(((-1.0)*r20*x2336*x2337))), (((cj1*x2338))+((cj1*r21*x2339))+(((-1.0)*x2336*x2340))+((cj1*r20*x2337))+(((-1.0)*r01*x2336*x2339))+(((-1.0)*r00*x2336*x2337))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2342=IKcos(j2);
IkReal x2343=IKsin(j2);
IkReal x2344=(r22*sj4);
IkReal x2345=((0.99999999995)*cj3);
IkReal x2346=(r01*sj5);
IkReal x2347=((9.9999999995e-6)*cj3);
IkReal x2348=((1.36279999993186e-7)*cj4);
IkReal x2349=(cj5*r01);
IkReal x2350=((0.99999999995)*sj3);
IkReal x2351=(r20*sj5);
IkReal x2352=((9.9999999995e-6)*sj3);
IkReal x2353=(r00*sj5);
IkReal x2354=(cj5*r21);
IkReal x2355=(r02*sj4);
IkReal x2356=((1.0)*sj1);
IkReal x2357=(cj5*r20);
IkReal x2358=((1.0)*sj4);
IkReal x2359=((1.0)*cj4);
IkReal x2360=((0.391671)*sj1);
IkReal x2361=(r21*sj5);
IkReal x2362=(cj5*r00);
IkReal x2363=(cj1*x2342);
IkReal x2364=(cj1*x2343);
IkReal x2365=(x2343*x2356);
evalcond[0]=((((-1.0)*x2354*x2358))+x2363+(((-1.0)*x2365))+(((-1.0)*r22*x2359))+(((-1.0)*x2351*x2358)));
evalcond[1]=((((-1.0)*x2364))+(((-1.0)*x2353*x2358))+(((-1.0)*r02*x2359))+(((-1.0)*x2342*x2356))+(((-1.0)*x2349*x2358)));
evalcond[2]=((((0.391671)*x2363))+((x2348*x2354))+((x2348*x2351))+(((1.92e-6)*sj1))+(((-1.0)*x2343*x2360))+(((-1.0)*pz))+(((-0.121761000001269)*x2357))+(((0.52362)*cj1))+(((0.121761000001269)*x2361))+(((-3.9e-7)*x2354))+(((-3.9e-7)*x2351))+(((-1.36279999993186e-7)*x2344)));
evalcond[3]=((((1.92e-6)*cj1))+(((0.121761000001269)*x2346))+((x2348*x2353))+((x2348*x2349))+(((-1.0)*x2342*x2360))+(((-1.0)*px))+(((-0.52362)*sj1))+(((-0.121761000001269)*x2362))+(((-3.9e-7)*x2353))+(((-3.9e-7)*x2349))+(((-1.36279999993186e-7)*x2355))+(((-0.391671)*x2364)));
evalcond[4]=((((-1.0)*x2347*x2357))+((sj1*x2342))+(((-1.0)*cj4*x2345*x2351))+(((-1.0)*cj4*x2345*x2354))+x2364+(((-1.0)*x2344*x2352))+((x2350*x2361))+((x2344*x2345))+(((-1.0)*x2350*x2357))+((x2347*x2361))+((cj4*x2351*x2352))+((cj4*x2352*x2354)));
evalcond[5]=(((x2346*x2350))+((x2346*x2347))+(((-1.0)*x2347*x2362))+(((-1.0)*cj4*x2345*x2349))+(((-1.0)*cj4*x2345*x2353))+x2363+(((-1.0)*x2365))+((x2345*x2355))+(((-1.0)*x2352*x2355))+(((-1.0)*x2350*x2362))+((cj4*x2349*x2352))+((cj4*x2352*x2353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2366=((1.0)*sj1);
IkReal x2367=(sj4*sj5);
IkReal x2368=(cj4*r22);
IkReal x2369=(cj4*r12);
IkReal x2370=((1.0)*cj1);
IkReal x2371=(cj5*r21*sj4);
IkReal x2372=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r20*x2366*x2367))+(((-1.0)*r10*x2367*x2370))+(((-1.0)*x2369*x2370))+(((-1.0)*x2370*x2372))+(((-1.0)*x2366*x2368))+(((-1.0)*x2366*x2371)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2367))+(((-1.0)*r10*x2366*x2367))+((cj1*x2371))+((cj1*x2368))+(((-1.0)*x2366*x2369))+(((-1.0)*x2366*x2372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2366*x2367))+(((-1.0)*r10*x2367*x2370))+(((-1.0)*x2369*x2370))+(((-1.0)*x2370*x2372))+(((-1.0)*x2366*x2368))+(((-1.0)*x2366*x2371))))+IKsqr((((cj1*r20*x2367))+(((-1.0)*r10*x2366*x2367))+((cj1*x2371))+((cj1*x2368))+(((-1.0)*x2366*x2369))+(((-1.0)*x2366*x2372))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2366*x2367))+(((-1.0)*r10*x2367*x2370))+(((-1.0)*x2369*x2370))+(((-1.0)*x2370*x2372))+(((-1.0)*x2366*x2368))+(((-1.0)*x2366*x2371))), (((cj1*r20*x2367))+(((-1.0)*r10*x2366*x2367))+((cj1*x2371))+((cj1*x2368))+(((-1.0)*x2366*x2369))+(((-1.0)*x2366*x2372))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2373=IKcos(j2);
IkReal x2374=IKsin(j2);
IkReal x2375=(r22*sj4);
IkReal x2376=(cj5*r10);
IkReal x2377=((0.99999999995)*cj3);
IkReal x2378=((9.9999999995e-6)*sj3);
IkReal x2379=((1.36279999993186e-7)*cj4);
IkReal x2380=(cj5*r11);
IkReal x2381=(cj5*r21);
IkReal x2382=(r10*sj5);
IkReal x2383=((1.0)*sj4);
IkReal x2384=((1.0)*sj1);
IkReal x2385=((9.9999999995e-6)*cj3);
IkReal x2386=(cj5*r20);
IkReal x2387=(r20*sj5);
IkReal x2388=((1.0)*cj4);
IkReal x2389=((0.99999999995)*sj3);
IkReal x2390=((0.391671)*sj1);
IkReal x2391=((0.121761000001269)*sj5);
IkReal x2392=(r11*sj5);
IkReal x2393=(r12*sj4);
IkReal x2394=(r21*sj5);
IkReal x2395=(cj1*x2373);
IkReal x2396=(cj1*x2374);
IkReal x2397=(cj4*x2387);
IkReal x2398=(x2374*x2384);
evalcond[0]=((((-1.0)*x2381*x2383))+x2395+(((-1.0)*r22*x2388))+(((-1.0)*x2383*x2387))+(((-1.0)*x2398)));
evalcond[1]=((((-1.0)*x2380*x2383))+(((-1.0)*r12*x2388))+(((-1.0)*x2396))+(((-1.0)*x2382*x2383))+(((-1.0)*x2373*x2384)));
evalcond[2]=((((-0.121761000001269)*x2386))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((x2379*x2381))+((x2379*x2387))+(((0.52362)*cj1))+((r21*x2391))+(((0.391671)*x2395))+(((-3.9e-7)*x2387))+(((-3.9e-7)*x2381))+(((-1.0)*x2374*x2390))+(((-1.36279999993186e-7)*x2375)));
evalcond[3]=((((1.92e-6)*cj1))+(((-0.391671)*x2396))+(((-1.36279999993186e-7)*x2393))+(((-1.0)*py))+(((-0.121761000001269)*x2376))+((x2379*x2382))+((x2379*x2380))+(((-0.52362)*sj1))+((r11*x2391))+(((-1.0)*x2373*x2390))+(((-3.9e-7)*x2380))+(((-3.9e-7)*x2382)));
evalcond[4]=(((x2375*x2377))+((sj1*x2373))+x2396+((x2385*x2394))+(((-1.0)*x2386*x2389))+(((-1.0)*x2375*x2378))+((cj4*x2378*x2381))+(((-1.0)*x2377*x2397))+(((-1.0)*cj4*x2377*x2381))+((x2389*x2394))+(((-1.0)*x2385*x2386))+((x2378*x2397)));
evalcond[5]=(((x2377*x2393))+(((-1.0)*x2376*x2389))+(((-1.0)*x2376*x2385))+x2395+((x2385*x2392))+(((-1.0)*x2378*x2393))+((cj4*x2378*x2382))+((cj4*x2378*x2380))+(((-1.0)*x2398))+(((-1.0)*cj4*x2377*x2382))+(((-1.0)*cj4*x2377*x2380))+((x2389*x2392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2399=((1.0)*sj1);
IkReal x2400=(sj4*sj5);
IkReal x2401=(cj4*r12);
IkReal x2402=(cj4*r22);
IkReal x2403=(cj5*sj4);
IkReal x2404=(cj1*x2403);
if( IKabs(((((-1.0)*x2399*x2402))+(((-1.0)*r21*x2399*x2403))+((r11*x2404))+(((-1.0)*r20*x2399*x2400))+((cj1*r10*x2400))+((cj1*x2401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x2403))+((cj1*r20*x2400))+((r10*sj1*x2400))+((r21*x2404))+((cj1*x2402))+((sj1*x2401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2399*x2402))+(((-1.0)*r21*x2399*x2403))+((r11*x2404))+(((-1.0)*r20*x2399*x2400))+((cj1*r10*x2400))+((cj1*x2401))))+IKsqr((((r11*sj1*x2403))+((cj1*r20*x2400))+((r10*sj1*x2400))+((r21*x2404))+((cj1*x2402))+((sj1*x2401))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2399*x2402))+(((-1.0)*r21*x2399*x2403))+((r11*x2404))+(((-1.0)*r20*x2399*x2400))+((cj1*r10*x2400))+((cj1*x2401))), (((r11*sj1*x2403))+((cj1*r20*x2400))+((r10*sj1*x2400))+((r21*x2404))+((cj1*x2402))+((sj1*x2401))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2405=IKcos(j2);
IkReal x2406=IKsin(j2);
IkReal x2407=(r22*sj4);
IkReal x2408=(cj5*r10);
IkReal x2409=((0.99999999995)*cj3);
IkReal x2410=((9.9999999995e-6)*sj3);
IkReal x2411=((1.36279999993186e-7)*cj4);
IkReal x2412=(cj5*r11);
IkReal x2413=(cj5*r21);
IkReal x2414=(r10*sj5);
IkReal x2415=((1.0)*sj4);
IkReal x2416=(r12*sj4);
IkReal x2417=((9.9999999995e-6)*cj3);
IkReal x2418=(cj5*r20);
IkReal x2419=(r20*sj5);
IkReal x2420=((1.0)*cj4);
IkReal x2421=((0.99999999995)*sj3);
IkReal x2422=((0.121761000001269)*sj5);
IkReal x2423=(r11*sj5);
IkReal x2424=(r21*sj5);
IkReal x2425=(sj1*x2405);
IkReal x2426=(cj1*x2406);
IkReal x2427=(cj1*x2405);
IkReal x2428=(cj4*x2419);
IkReal x2429=(sj1*x2406);
IkReal x2430=(x2425+x2426);
evalcond[0]=(x2430+(((-1.0)*x2414*x2415))+(((-1.0)*r12*x2420))+(((-1.0)*x2412*x2415)));
evalcond[1]=(x2427+(((-1.0)*x2415*x2419))+(((-1.0)*r22*x2420))+(((-1.0)*x2429))+(((-1.0)*x2413*x2415)));
evalcond[2]=((((-1.36279999993186e-7)*x2407))+((r21*x2422))+(((-0.121761000001269)*x2418))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-3.9e-7)*x2413))+(((-3.9e-7)*x2419))+(((0.52362)*cj1))+((x2411*x2413))+((x2411*x2419))+(((-0.391671)*x2429))+(((0.391671)*x2427)));
evalcond[3]=((((0.52362)*sj1))+(((-1.36279999993186e-7)*x2416))+(((-1.0)*py))+((r11*x2422))+(((-3.9e-7)*x2412))+(((-3.9e-7)*x2414))+(((-1.92e-6)*cj1))+((x2411*x2412))+((x2411*x2414))+(((-0.121761000001269)*x2408))+(((0.391671)*x2426))+(((0.391671)*x2425)));
evalcond[4]=((((-1.0)*x2409*x2428))+x2430+((x2417*x2424))+(((-1.0)*x2407*x2410))+(((-1.0)*x2417*x2418))+(((-1.0)*x2418*x2421))+((cj4*x2410*x2413))+((x2407*x2409))+((x2421*x2424))+(((-1.0)*cj4*x2409*x2413))+((x2410*x2428)));
evalcond[5]=(x2429+(((-1.0)*x2408*x2417))+((x2417*x2423))+((x2409*x2416))+(((-1.0)*x2427))+((cj4*x2410*x2414))+((cj4*x2410*x2412))+((x2421*x2423))+(((-1.0)*x2408*x2421))+(((-1.0)*x2410*x2416))+(((-1.0)*cj4*x2409*x2412))+(((-1.0)*cj4*x2409*x2414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2431=((1.0)*sj1);
IkReal x2432=(sj4*sj5);
IkReal x2433=(cj0*r20);
IkReal x2434=(cj4*r12);
IkReal x2435=(cj0*cj1);
IkReal x2436=(cj4*r22);
IkReal x2437=((1.0)*cj1);
IkReal x2438=(cj5*sj4);
CheckValue<IkReal> x2439=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2439.valid){
continue;
}
CheckValue<IkReal> x2440 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2432*x2437))+(((-1.0)*x2434*x2437))+(((-1.0)*r11*x2437*x2438))+(((-1.0)*cj0*r21*x2431*x2438))+(((-1.0)*x2431*x2432*x2433))+(((-1.0)*cj0*x2431*x2436)))),IkReal((((x2435*x2436))+(((-1.0)*x2431*x2434))+((r21*x2435*x2438))+(((-1.0)*r10*x2431*x2432))+(((-1.0)*r11*x2431*x2438))+((cj1*x2432*x2433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2440.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2439.value)))+(x2440.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2441=IKsin(j2);
IkReal x2442=IKcos(j2);
IkReal x2443=((9.9999999995e-6)*sj5);
IkReal x2444=(cj3*r01);
IkReal x2445=(cj4*r00);
IkReal x2446=((3.9e-7)*cj5);
IkReal x2447=((1.36279999993186e-7)*sj5);
IkReal x2448=(cj4*r10);
IkReal x2449=((9.9999999995e-6)*cj5);
IkReal x2450=(cj3*r20);
IkReal x2451=(cj0*sj1);
IkReal x2452=((0.121761000001269)*sj5);
IkReal x2453=(cj4*r01);
IkReal x2454=((1.36279999993186e-7)*cj5);
IkReal x2455=((0.99999999995)*cj3);
IkReal x2456=(r02*sj4);
IkReal x2457=(r11*sj3);
IkReal x2458=((0.99999999995)*sj5);
IkReal x2459=((3.9e-7)*sj5);
IkReal x2460=((0.121761000001269)*cj5);
IkReal x2461=((1.0)*sj4);
IkReal x2462=(r22*sj4);
IkReal x2463=((9.9999999995e-6)*sj3);
IkReal x2464=(r12*sj4);
IkReal x2465=((1.0)*cj4);
IkReal x2466=(cj5*r21);
IkReal x2467=(cj4*cj5);
IkReal x2468=(r21*sj3);
IkReal x2469=(cj4*r20);
IkReal x2470=((1.92e-6)*cj1);
IkReal x2471=(sj0*sj1);
IkReal x2472=(cj1*x2441);
IkReal x2473=((1.0)*x2442);
IkReal x2474=((0.391671)*x2442);
IkReal x2475=(sj1*x2441);
IkReal x2476=(cj1*x2442);
IkReal x2477=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*r22*x2465))+x2476+(((-1.0)*x2475))+(((-1.0)*r20*sj5*x2461))+(((-1.0)*x2461*x2466)));
evalcond[1]=(((x2442*x2471))+(((-1.0)*cj5*r01*x2461))+((sj0*x2472))+(((-1.0)*r02*x2465))+(((-1.0)*r00*sj5*x2461)));
evalcond[2]=((((-1.0)*cj0*x2472))+(((-1.0)*cj5*r11*x2461))+(((-1.0)*r12*x2465))+(((-1.0)*r10*sj5*x2461))+(((-1.0)*x2451*x2473)));
evalcond[3]=((((-1.0)*r21*x2446))+(((-1.0)*r20*x2459))+((cj4*r21*x2454))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-1.0)*r20*x2460))+(((0.52362)*cj1))+(((-0.391671)*x2475))+(((-1.36279999993186e-7)*x2462))+((x2447*x2469))+((r21*x2452))+((cj1*x2474)));
evalcond[4]=((((0.001538)*cj0))+((x2471*x2474))+(((-1.0)*r00*x2460))+((x2453*x2454))+(((0.391671)*sj0*x2472))+((r01*x2452))+(((-1.0)*px))+(((-1.0)*sj0*x2470))+(((-1.36279999993186e-7)*x2456))+(((0.52362)*x2471))+((x2445*x2447))+(((-1.0)*r00*x2459))+(((-1.0)*r01*x2446)));
evalcond[5]=((((-0.391671)*cj0*x2472))+((x2447*x2448))+(((0.001538)*sj0))+(((-1.0)*r10*x2459))+(((-1.0)*x2451*x2474))+(((-1.0)*py))+((cj0*x2470))+(((-1.0)*r11*x2446))+((cj4*r11*x2454))+(((-0.52362)*x2451))+((r11*x2452))+(((-1.36279999993186e-7)*x2464))+(((-1.0)*r10*x2460)));
evalcond[6]=(((x2458*x2468))+((sj3*x2443*x2469))+x2472+((cj4*x2449*x2468))+(((-1.0)*r20*x2477))+((sj1*x2442))+(((-1.0)*x2449*x2450))+(((-1.0)*cj4*x2455*x2466))+((cj3*r21*x2443))+(((-1.0)*cj4*x2450*x2458))+((x2455*x2462))+(((-1.0)*x2462*x2463)));
evalcond[7]=((((-0.99999999995)*x2444*x2467))+(((-1.0)*cj1*sj0*x2473))+((sj3*x2449*x2453))+((x2441*x2471))+(((-1.0)*r00*x2477))+((x2443*x2444))+((sj3*x2443*x2445))+(((-1.0)*x2456*x2463))+((r01*sj3*x2458))+(((-1.0)*cj3*r00*x2449))+((x2455*x2456))+(((-1.0)*sj5*x2445*x2455)));
evalcond[8]=((((-1.0)*r11*x2455*x2467))+((sj3*x2443*x2448))+(((-1.0)*x2463*x2464))+(((-1.0)*sj5*x2448*x2455))+((cj3*r11*x2443))+((x2457*x2458))+((cj4*x2449*x2457))+(((-1.0)*r10*x2477))+((cj0*x2476))+(((-1.0)*cj3*r10*x2449))+(((-1.0)*x2441*x2451))+((x2455*x2464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2478=((1.0)*sj0);
IkReal x2479=(cj1*sj4);
IkReal x2480=(r20*sj5);
IkReal x2481=(cj4*sj1);
IkReal x2482=(r00*sj5);
IkReal x2483=(sj1*sj4);
IkReal x2484=(cj1*cj4);
IkReal x2485=(cj5*x2483);
CheckValue<IkReal> x2486 = IKatan2WithCheck(IkReal((((r02*x2484))+(((-1.0)*r21*x2478*x2485))+((cj5*r01*x2479))+(((-1.0)*r22*x2478*x2481))+(((-1.0)*x2478*x2480*x2483))+((x2479*x2482)))),IkReal((((r01*x2485))+((x2482*x2483))+((cj5*r21*sj0*x2479))+((r02*x2481))+((sj0*x2479*x2480))+((r22*sj0*x2484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2486.valid){
continue;
}
CheckValue<IkReal> x2487=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2487.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2486.value)+(((1.5707963267949)*(x2487.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2488=IKsin(j2);
IkReal x2489=IKcos(j2);
IkReal x2490=((9.9999999995e-6)*sj5);
IkReal x2491=(cj3*r01);
IkReal x2492=(cj4*r00);
IkReal x2493=((3.9e-7)*cj5);
IkReal x2494=((1.36279999993186e-7)*sj5);
IkReal x2495=(cj4*r10);
IkReal x2496=((9.9999999995e-6)*cj5);
IkReal x2497=(cj3*r20);
IkReal x2498=(cj0*sj1);
IkReal x2499=((0.121761000001269)*sj5);
IkReal x2500=(cj4*r01);
IkReal x2501=((1.36279999993186e-7)*cj5);
IkReal x2502=((0.99999999995)*cj3);
IkReal x2503=(r02*sj4);
IkReal x2504=(r11*sj3);
IkReal x2505=((0.99999999995)*sj5);
IkReal x2506=((3.9e-7)*sj5);
IkReal x2507=((0.121761000001269)*cj5);
IkReal x2508=((1.0)*sj4);
IkReal x2509=(r22*sj4);
IkReal x2510=((9.9999999995e-6)*sj3);
IkReal x2511=(r12*sj4);
IkReal x2512=((1.0)*cj4);
IkReal x2513=(cj5*r21);
IkReal x2514=(cj4*cj5);
IkReal x2515=(r21*sj3);
IkReal x2516=(cj4*r20);
IkReal x2517=((1.92e-6)*cj1);
IkReal x2518=(sj0*sj1);
IkReal x2519=(cj1*x2488);
IkReal x2520=((1.0)*x2489);
IkReal x2521=((0.391671)*x2489);
IkReal x2522=(sj1*x2488);
IkReal x2523=(cj1*x2489);
IkReal x2524=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*x2508*x2513))+x2523+(((-1.0)*r20*sj5*x2508))+(((-1.0)*x2522))+(((-1.0)*r22*x2512)));
evalcond[1]=(((sj0*x2519))+(((-1.0)*r00*sj5*x2508))+((x2489*x2518))+(((-1.0)*cj5*r01*x2508))+(((-1.0)*r02*x2512)));
evalcond[2]=((((-1.0)*r10*sj5*x2508))+(((-1.0)*r12*x2512))+(((-1.0)*x2498*x2520))+(((-1.0)*cj0*x2519))+(((-1.0)*cj5*r11*x2508)));
evalcond[3]=(((cj4*r21*x2501))+((cj1*x2521))+((x2494*x2516))+(((-1.0)*r21*x2493))+(((1.92e-6)*sj1))+(((-0.391671)*x2522))+(((-1.0)*pz))+(((0.52362)*cj1))+((r21*x2499))+(((-1.36279999993186e-7)*x2509))+(((-1.0)*r20*x2506))+(((-1.0)*r20*x2507)));
evalcond[4]=((((0.001538)*cj0))+((x2492*x2494))+((x2500*x2501))+(((0.391671)*sj0*x2519))+(((-1.0)*r00*x2507))+(((-1.0)*r00*x2506))+(((-1.0)*r01*x2493))+(((-1.0)*px))+(((0.52362)*x2518))+(((-1.0)*sj0*x2517))+((x2518*x2521))+(((-1.36279999993186e-7)*x2503))+((r01*x2499)));
evalcond[5]=(((cj0*x2517))+(((0.001538)*sj0))+((x2494*x2495))+(((-0.52362)*x2498))+(((-1.0)*py))+((r11*x2499))+(((-1.36279999993186e-7)*x2511))+(((-1.0)*x2498*x2521))+((cj4*r11*x2501))+(((-1.0)*r11*x2493))+(((-1.0)*r10*x2506))+(((-1.0)*r10*x2507))+(((-0.391671)*cj0*x2519)));
evalcond[6]=((((-1.0)*cj4*x2497*x2505))+x2519+(((-1.0)*x2496*x2497))+((x2505*x2515))+((cj4*x2496*x2515))+((cj3*r21*x2490))+(((-1.0)*r20*x2524))+(((-1.0)*x2509*x2510))+((sj3*x2490*x2516))+(((-1.0)*cj4*x2502*x2513))+((sj1*x2489))+((x2502*x2509)));
evalcond[7]=((((-1.0)*cj1*sj0*x2520))+((sj3*x2496*x2500))+((sj3*x2490*x2492))+((r01*sj3*x2505))+(((-1.0)*x2503*x2510))+((x2490*x2491))+(((-1.0)*cj3*r00*x2496))+(((-1.0)*sj5*x2492*x2502))+((x2488*x2518))+(((-1.0)*r00*x2524))+(((-0.99999999995)*x2491*x2514))+((x2502*x2503)));
evalcond[8]=(((x2504*x2505))+((cj4*x2496*x2504))+((cj3*r11*x2490))+((sj3*x2490*x2495))+(((-1.0)*x2510*x2511))+(((-1.0)*sj5*x2495*x2502))+(((-1.0)*x2488*x2498))+(((-1.0)*cj3*r10*x2496))+((cj0*x2523))+((x2502*x2511))+(((-1.0)*r10*x2524))+(((-1.0)*r11*x2502*x2514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2525=sj0*sj0;
IkReal x2526=(cj4*cj5);
IkReal x2527=(sj4*sj5);
IkReal x2528=(r00*sj0);
IkReal x2529=(r01*sj0);
IkReal x2530=(px*sj0);
IkReal x2531=(cj4*sj5);
IkReal x2532=(cj5*r21);
IkReal x2533=(r02*sj0);
IkReal x2534=(cj5*sj4);
IkReal x2535=(cj0*sj0);
IkReal x2536=((((0.121761000001269)*r21*sj5))+(((-3.9e-7)*r20*sj5))+(((0.391671)*r20*x2527))+(((1.36279999993186e-7)*r21*x2526))+(((-1.0)*pz))+(((0.391671)*cj4*r22))+(((0.391671)*sj4*x2532))+(((-1.36279999993186e-7)*r22*sj4))+(((-0.121761000001269)*cj5*r20))+(((1.36279999993186e-7)*r20*x2531))+(((-3.9e-7)*x2532)));
IkReal x2537=(x2525*x2536);
CheckValue<IkReal> x2538=IKPowWithIntegerCheck(IKsign(x2525),-1);
if(!x2538.valid){
continue;
}
CheckValue<IkReal> x2539 = IKatan2WithCheck(IkReal(((((-12.0)*x2537))+(((3272625.0)*x2530))+(((1.27632375)*sj5*x2528))+(((-5033.29725)*x2535))+(((-0.4459933349777)*x2526*x2529))+(((-1281792.306375)*x2527*x2528))+(((-0.4459933349777)*x2528*x2531))+(((-1281792.306375)*x2529*x2534))+(((-1281792.306375)*cj4*x2533))+(((1.27632375)*cj5*x2529))+(((0.4459933349777)*sj4*x2533))+(((-398478.092629152)*sj5*x2529))+(((398478.092629152)*cj5*x2528)))),IkReal(((((-12.0)*x2530))+(((-1.63535999991823e-6)*sj4*x2533))+(((1.63535999991823e-6)*x2526*x2529))+(((-4.68e-6)*cj5*x2529))+(((4.700052)*x2529*x2534))+(((-3272625.0)*x2537))+(((1.63535999991823e-6)*x2528*x2531))+(((1.46113200001522)*sj5*x2529))+(((0.018456)*x2535))+(((-1.46113200001522)*cj5*x2528))+(((4.700052)*cj4*x2533))+(((-4.68e-6)*sj5*x2528))+(((4.700052)*x2527*x2528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2539.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2538.value)))+(x2539.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2540=IKcos(j1);
IkReal x2541=cj0*cj0;
IkReal x2542=IKsin(j1);
IkReal x2543=sj0*sj0;
IkReal x2544=((1.36279999993186e-7)*cj0);
IkReal x2545=(r12*sj4);
IkReal x2546=(r21*sj5);
IkReal x2547=((0.391670999980416)*sj3);
IkReal x2548=(r20*sj5);
IkReal x2549=((0.391671)*sj4);
IkReal x2550=((3.9e-7)*cj5);
IkReal x2551=((1.0)*pz);
IkReal x2552=((3.91670999980416e-6)*cj3);
IkReal x2553=(r00*sj5);
IkReal x2554=(r11*sj5);
IkReal x2555=(cj0*sj0);
IkReal x2556=(cj5*r11);
IkReal x2557=(r02*sj4);
IkReal x2558=(cj0*r21);
IkReal x2559=((3.9e-7)*sj0);
IkReal x2560=((1.36279999993186e-7)*sj0);
IkReal x2561=(r01*sj0);
IkReal x2562=((0.121761000001269)*sj5);
IkReal x2563=(cj5*r10);
IkReal x2564=((3.91670999980416e-6)*sj3);
IkReal x2565=(cj5*r00);
IkReal x2566=(cj0*r01);
IkReal x2567=((1.36279999993186e-7)*cj4);
IkReal x2568=(r22*sj4);
IkReal x2569=((3.9e-7)*cj0);
IkReal x2570=(cj4*sj0);
IkReal x2571=((0.391671)*r12);
IkReal x2572=(cj5*r21);
IkReal x2573=((1.0)*px);
IkReal x2574=((0.391670999980416)*cj3);
IkReal x2575=(cj0*cj4);
IkReal x2576=((0.121761000001269)*cj0);
IkReal x2577=(r01*sj5);
IkReal x2578=(r10*sj5);
IkReal x2579=((0.391671)*r02);
IkReal x2580=(cj5*r20);
IkReal x2581=((1.0)*py);
IkReal x2582=((0.001538)*x2555);
IkReal x2583=((1.92e-6)*x2542);
IkReal x2584=((0.52362)*x2540);
IkReal x2585=((0.52362)*x2542);
IkReal x2586=(sj5*x2567);
IkReal x2587=((0.121761000001269)*x2554);
IkReal x2588=(cj4*x2564);
IkReal x2589=((0.121761000001269)*cj5*sj0);
IkReal x2590=(cj4*cj5*r01);
IkReal x2591=((3.9e-7)*x2578);
IkReal x2592=((1.92e-6)*x2540);
IkReal x2593=(sj0*x2580);
IkReal x2594=(x2555*x2585);
IkReal x2595=(x2555*x2592);
evalcond[0]=(x2584+x2583+((x2567*x2572))+((x2549*x2572))+(((-0.121761000001269)*x2580))+(((-3.9e-7)*x2548))+(((-1.36279999993186e-7)*x2568))+((x2548*x2567))+(((-1.0)*r21*x2550))+(((0.391671)*cj4*r22))+(((0.121761000001269)*x2546))+((x2548*x2549))+(((-1.0)*x2551)));
evalcond[1]=((((-1.0)*x2569*x2578))+((x2571*x2575))+x2582+((cj4*x2544*x2556))+(((-1.0)*x2541*x2585))+((cj0*x2549*x2556))+(((-1.0)*x2563*x2576))+((cj0*x2549*x2578))+(((-1.0)*x2544*x2545))+(((-1.0)*cj0*x2581))+((x2554*x2576))+((x2541*x2592))+(((-1.0)*cj0*r11*x2550))+((cj4*x2544*x2578)));
evalcond[2]=((((-1.0)*x2543*x2585))+(((-1.0)*cj5*x2549*x2561))+((x2557*x2560))+(((-1.0)*x2582))+(((-1.0)*x2561*x2562))+(((-1.0)*x2570*x2579))+((x2543*x2592))+(((-1.0)*x2560*x2590))+(((0.121761000001269)*sj0*x2565))+((x2550*x2561))+((x2553*x2559))+((px*sj0))+(((-1.0)*cj4*x2553*x2560))+(((-1.0)*sj0*x2549*x2553)));
evalcond[3]=(((x2547*x2554))+((x2556*x2588))+((x2550*x2558))+((x2548*x2569))+(((-1.0)*x2547*x2563))+(((-1.0)*x2545*x2564))+(((-1.0)*cj4*x2556*x2574))+(((-1.0)*cj0*x2583))+(((-1.0)*cj0*x2584))+(((-1.0)*x2546*x2576))+((x2544*x2568))+((x2545*x2574))+((x2576*x2580))+(((-1.0)*cj4*x2544*x2548))+((x2552*x2554))+((x2578*x2588))+(((-1.0)*cj4*x2574*x2578))+((cj0*pz))+(((-1.0)*cj4*x2544*x2572))+(((-1.0)*x2552*x2563)));
evalcond[4]=((((0.121761000001269)*sj0*x2546))+(((-0.121761000001269)*x2593))+((x2547*x2577))+(((-1.0)*x2548*x2559))+(((-1.0)*x2557*x2564))+(((-1.0)*cj4*x2553*x2574))+(((-1.0)*x2547*x2565))+((x2557*x2574))+(((-1.0)*x2560*x2568))+((cj5*r01*x2588))+((sj0*x2583))+((sj0*x2584))+((x2553*x2588))+((cj4*x2560*x2572))+((cj4*x2548*x2560))+(((-1.0)*x2552*x2565))+(((-1.0)*x2574*x2590))+((x2552*x2577))+(((-1.0)*sj0*x2551))+(((-1.0)*r21*sj0*x2550)));
evalcond[5]=((((-1.0)*cj4*cj5*x2558*x2574))+(((0.001538)*sj0))+x2587+(((-1.0)*x2548*x2574*x2575))+((cj0*x2546*x2547))+(((-1.0)*r11*x2550))+((x2567*x2578))+(((-0.121761000001269)*x2563))+((x2556*x2567))+(((-1.0)*cj0*x2552*x2580))+(((-1.0)*x2581))+((cj0*x2592))+(((-1.0)*x2591))+(((-1.36279999993186e-7)*x2545))+(((-1.0)*cj0*x2585))+((x2548*x2564*x2575))+((cj0*x2568*x2574))+(((-1.0)*cj0*x2564*x2568))+((cj5*x2558*x2588))+((cj0*x2546*x2552))+(((-1.0)*cj0*x2547*x2580)));
evalcond[6]=((((0.001538)*cj0))+(((-1.0)*sj0*x2568*x2574))+((r01*x2562))+(((-0.121761000001269)*x2565))+(((-1.0)*sj0*x2592))+(((-1.0)*x2548*x2564*x2570))+(((-1.36279999993186e-7)*x2557))+((x2547*x2593))+((x2548*x2570*x2574))+(((-1.0)*r01*x2550))+(((-3.9e-7)*x2553))+((x2570*x2572*x2574))+(((-1.0)*x2564*x2570*x2572))+((cj5*r01*x2567))+(((-1.0)*x2573))+(((-1.0)*sj0*x2546*x2547))+((sj0*x2585))+((x2552*x2593))+(((-1.0)*sj0*x2546*x2552))+((x2553*x2567))+((sj0*x2564*x2568)));
evalcond[7]=(x2594+((x2575*x2579))+(((-1.0)*sj0*x2587))+((cj0*x2549*x2553))+((r11*sj0*x2550))+((x2559*x2578))+(((-1.0)*x2595))+(((-1.0)*cj4*x2560*x2578))+(((-0.001538)*x2543))+(((0.121761000001269)*sj0*x2563))+(((-1.0)*cj4*x2556*x2560))+((cj5*x2549*x2566))+((py*sj0))+((x2545*x2560)));
evalcond[8]=(x2594+((cj4*x2544*x2553))+(((-1.0)*cj0*x2573))+(((-1.0)*x2550*x2566))+((x2562*x2566))+(((0.001538)*x2541))+(((-1.0)*x2595))+(((-1.0)*x2570*x2571))+(((-1.0)*x2544*x2557))+((x2544*x2590))+(((-1.0)*sj0*x2549*x2578))+(((-1.0)*x2565*x2576))+(((-1.0)*sj0*x2549*x2556))+(((-1.0)*x2553*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2596=(sj1*sj4);
IkReal x2597=(cj5*r01);
IkReal x2598=(r20*sj5);
IkReal x2599=(cj4*sj1);
IkReal x2600=(r00*sj5);
IkReal x2601=(cj1*sj4);
IkReal x2602=(cj5*r21);
IkReal x2603=(cj1*cj4);
if( IKabs(((((-1.0)*r22*x2599))+(((-1.0)*x2596*x2602))+((x2597*x2601))+((x2600*x2601))+((r02*x2603))+(((-1.0)*x2596*x2598)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2596*x2600))+((x2598*x2601))+((x2601*x2602))+((x2596*x2597))+((r22*x2603))+((r02*x2599)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2599))+(((-1.0)*x2596*x2602))+((x2597*x2601))+((x2600*x2601))+((r02*x2603))+(((-1.0)*x2596*x2598))))+IKsqr((((x2596*x2600))+((x2598*x2601))+((x2601*x2602))+((x2596*x2597))+((r22*x2603))+((r02*x2599))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2599))+(((-1.0)*x2596*x2602))+((x2597*x2601))+((x2600*x2601))+((r02*x2603))+(((-1.0)*x2596*x2598))), (((x2596*x2600))+((x2598*x2601))+((x2601*x2602))+((x2596*x2597))+((r22*x2603))+((r02*x2599))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2604=IKcos(j2);
IkReal x2605=IKsin(j2);
IkReal x2606=(r22*sj4);
IkReal x2607=((0.99999999995)*cj3);
IkReal x2608=(r01*sj5);
IkReal x2609=((9.9999999995e-6)*cj3);
IkReal x2610=((1.36279999993186e-7)*cj4);
IkReal x2611=(cj5*r01);
IkReal x2612=(r20*sj5);
IkReal x2613=((9.9999999995e-6)*sj3);
IkReal x2614=((0.99999999995)*sj3);
IkReal x2615=(r00*sj5);
IkReal x2616=(cj5*r21);
IkReal x2617=(r02*sj4);
IkReal x2618=((1.0)*sj4);
IkReal x2619=(cj5*r20);
IkReal x2620=((1.0)*cj4);
IkReal x2621=(r21*sj5);
IkReal x2622=(cj5*r00);
IkReal x2623=(sj1*x2604);
IkReal x2624=(cj1*x2605);
IkReal x2625=(cj1*x2604);
IkReal x2626=(sj1*x2605);
IkReal x2627=(x2623+x2624);
evalcond[0]=((((-1.0)*x2611*x2618))+(((-1.0)*r02*x2620))+(((-1.0)*x2615*x2618))+x2627);
evalcond[1]=((((-1.0)*x2612*x2618))+(((-1.0)*x2626))+(((-1.0)*r22*x2620))+(((-1.0)*x2616*x2618))+x2625);
evalcond[2]=((((-3.9e-7)*x2612))+(((-3.9e-7)*x2616))+((x2610*x2616))+((x2610*x2612))+(((-0.121761000001269)*x2619))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.121761000001269)*x2621))+(((0.52362)*cj1))+(((-0.391671)*x2626))+(((0.391671)*x2625))+(((-1.36279999993186e-7)*x2606)));
evalcond[3]=((((-3.9e-7)*x2611))+(((-3.9e-7)*x2615))+(((-1.36279999993186e-7)*x2617))+((x2610*x2615))+((x2610*x2611))+(((0.52362)*sj1))+(((0.121761000001269)*x2608))+(((-0.121761000001269)*x2622))+(((-1.0)*px))+(((-1.92e-6)*cj1))+(((0.391671)*x2624))+(((0.391671)*x2623)));
evalcond[4]=((((-1.0)*x2606*x2613))+(((-1.0)*x2609*x2619))+((x2614*x2621))+((cj4*x2612*x2613))+((x2606*x2607))+((cj4*x2613*x2616))+((x2609*x2621))+(((-1.0)*cj4*x2607*x2612))+(((-1.0)*cj4*x2607*x2616))+(((-1.0)*x2614*x2619))+x2627);
evalcond[5]=((((-1.0)*x2625))+(((-1.0)*x2613*x2617))+((cj4*x2613*x2615))+((x2608*x2614))+((cj4*x2611*x2613))+(((-1.0)*cj4*x2607*x2611))+(((-1.0)*cj4*x2607*x2615))+((x2608*x2609))+(((-1.0)*x2614*x2622))+(((-1.0)*x2609*x2622))+x2626+((x2607*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2628=((1.0)*sj1);
IkReal x2629=(sj4*sj5);
IkReal x2630=(cj4*r22);
IkReal x2631=(cj5*sj4);
IkReal x2632=(cj4*r02);
IkReal x2633=((1.0)*cj1);
if( IKabs(((((-1.0)*x2628*x2630))+(((-1.0)*r21*x2628*x2631))+(((-1.0)*x2632*x2633))+(((-1.0)*r00*x2629*x2633))+(((-1.0)*r01*x2631*x2633))+(((-1.0)*r20*x2628*x2629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2630))+((cj1*r20*x2629))+(((-1.0)*x2628*x2632))+((cj1*r21*x2631))+(((-1.0)*r00*x2628*x2629))+(((-1.0)*r01*x2628*x2631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2628*x2630))+(((-1.0)*r21*x2628*x2631))+(((-1.0)*x2632*x2633))+(((-1.0)*r00*x2629*x2633))+(((-1.0)*r01*x2631*x2633))+(((-1.0)*r20*x2628*x2629))))+IKsqr((((cj1*x2630))+((cj1*r20*x2629))+(((-1.0)*x2628*x2632))+((cj1*r21*x2631))+(((-1.0)*r00*x2628*x2629))+(((-1.0)*r01*x2628*x2631))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2628*x2630))+(((-1.0)*r21*x2628*x2631))+(((-1.0)*x2632*x2633))+(((-1.0)*r00*x2629*x2633))+(((-1.0)*r01*x2631*x2633))+(((-1.0)*r20*x2628*x2629))), (((cj1*x2630))+((cj1*r20*x2629))+(((-1.0)*x2628*x2632))+((cj1*r21*x2631))+(((-1.0)*r00*x2628*x2629))+(((-1.0)*r01*x2628*x2631))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2634=IKcos(j2);
IkReal x2635=IKsin(j2);
IkReal x2636=(r22*sj4);
IkReal x2637=((0.99999999995)*cj3);
IkReal x2638=(r01*sj5);
IkReal x2639=((9.9999999995e-6)*cj3);
IkReal x2640=((1.36279999993186e-7)*cj4);
IkReal x2641=(cj5*r01);
IkReal x2642=((0.99999999995)*sj3);
IkReal x2643=(r20*sj5);
IkReal x2644=((9.9999999995e-6)*sj3);
IkReal x2645=(r00*sj5);
IkReal x2646=(cj5*r21);
IkReal x2647=(r02*sj4);
IkReal x2648=((1.0)*sj1);
IkReal x2649=(cj5*r20);
IkReal x2650=((1.0)*sj4);
IkReal x2651=((1.0)*cj4);
IkReal x2652=((0.391671)*sj1);
IkReal x2653=(r21*sj5);
IkReal x2654=(cj5*r00);
IkReal x2655=(cj1*x2634);
IkReal x2656=(cj1*x2635);
IkReal x2657=(x2635*x2648);
evalcond[0]=((((-1.0)*r22*x2651))+(((-1.0)*x2646*x2650))+(((-1.0)*x2643*x2650))+(((-1.0)*x2657))+x2655);
evalcond[1]=((((-1.0)*x2634*x2648))+(((-1.0)*x2645*x2650))+(((-1.0)*r02*x2651))+(((-1.0)*x2641*x2650))+(((-1.0)*x2656)));
evalcond[2]=((((-1.0)*x2635*x2652))+(((0.391671)*x2655))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-1.36279999993186e-7)*x2636))+(((-0.121761000001269)*x2649))+(((-3.9e-7)*x2646))+(((-3.9e-7)*x2643))+(((0.52362)*cj1))+(((0.121761000001269)*x2653))+((x2640*x2643))+((x2640*x2646)));
evalcond[3]=((((1.92e-6)*cj1))+(((-1.0)*x2634*x2652))+(((0.121761000001269)*x2638))+(((-0.391671)*x2656))+(((-1.0)*px))+(((-0.121761000001269)*x2654))+(((-3.9e-7)*x2645))+(((-3.9e-7)*x2641))+(((-0.52362)*sj1))+(((-1.36279999993186e-7)*x2647))+((x2640*x2641))+((x2640*x2645)));
evalcond[4]=(((x2639*x2653))+((sj1*x2634))+(((-1.0)*x2642*x2649))+((cj4*x2644*x2646))+(((-1.0)*x2636*x2644))+((x2642*x2653))+(((-1.0)*cj4*x2637*x2646))+(((-1.0)*cj4*x2637*x2643))+((x2636*x2637))+(((-1.0)*x2639*x2649))+x2656+((cj4*x2643*x2644)));
evalcond[5]=((((-1.0)*x2644*x2647))+((x2638*x2642))+(((-1.0)*x2642*x2654))+((cj4*x2644*x2645))+(((-1.0)*x2657))+((x2638*x2639))+(((-1.0)*cj4*x2637*x2645))+(((-1.0)*cj4*x2637*x2641))+(((-1.0)*x2639*x2654))+((x2637*x2647))+((cj4*x2641*x2644))+x2655);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2658=((1.0)*sj1);
IkReal x2659=(sj4*sj5);
IkReal x2660=(cj4*r22);
IkReal x2661=(cj4*r12);
IkReal x2662=((1.0)*cj1);
IkReal x2663=(cj5*r21*sj4);
IkReal x2664=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r10*x2659*x2662))+(((-1.0)*x2662*x2664))+(((-1.0)*r20*x2658*x2659))+(((-1.0)*x2658*x2660))+(((-1.0)*x2658*x2663))+(((-1.0)*x2661*x2662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2660))+((cj1*x2663))+(((-1.0)*r10*x2658*x2659))+(((-1.0)*x2658*x2661))+(((-1.0)*x2658*x2664))+((cj1*r20*x2659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2659*x2662))+(((-1.0)*x2662*x2664))+(((-1.0)*r20*x2658*x2659))+(((-1.0)*x2658*x2660))+(((-1.0)*x2658*x2663))+(((-1.0)*x2661*x2662))))+IKsqr((((cj1*x2660))+((cj1*x2663))+(((-1.0)*r10*x2658*x2659))+(((-1.0)*x2658*x2661))+(((-1.0)*x2658*x2664))+((cj1*r20*x2659))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x2659*x2662))+(((-1.0)*x2662*x2664))+(((-1.0)*r20*x2658*x2659))+(((-1.0)*x2658*x2660))+(((-1.0)*x2658*x2663))+(((-1.0)*x2661*x2662))), (((cj1*x2660))+((cj1*x2663))+(((-1.0)*r10*x2658*x2659))+(((-1.0)*x2658*x2661))+(((-1.0)*x2658*x2664))+((cj1*r20*x2659))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2665=IKcos(j2);
IkReal x2666=IKsin(j2);
IkReal x2667=(r22*sj4);
IkReal x2668=(cj5*r10);
IkReal x2669=((0.99999999995)*cj3);
IkReal x2670=((9.9999999995e-6)*sj3);
IkReal x2671=((1.36279999993186e-7)*cj4);
IkReal x2672=(cj5*r11);
IkReal x2673=(cj5*r21);
IkReal x2674=(r10*sj5);
IkReal x2675=((1.0)*sj4);
IkReal x2676=((1.0)*sj1);
IkReal x2677=((9.9999999995e-6)*cj3);
IkReal x2678=(cj5*r20);
IkReal x2679=(r20*sj5);
IkReal x2680=((1.0)*cj4);
IkReal x2681=((0.99999999995)*sj3);
IkReal x2682=((0.391671)*sj1);
IkReal x2683=((0.121761000001269)*sj5);
IkReal x2684=(r11*sj5);
IkReal x2685=(r12*sj4);
IkReal x2686=(r21*sj5);
IkReal x2687=(cj1*x2665);
IkReal x2688=(cj1*x2666);
IkReal x2689=(cj4*x2679);
IkReal x2690=(x2666*x2676);
evalcond[0]=((((-1.0)*x2675*x2679))+(((-1.0)*x2673*x2675))+(((-1.0)*x2690))+(((-1.0)*r22*x2680))+x2687);
evalcond[1]=((((-1.0)*r12*x2680))+(((-1.0)*x2674*x2675))+(((-1.0)*x2672*x2675))+(((-1.0)*x2665*x2676))+(((-1.0)*x2688)));
evalcond[2]=(((r21*x2683))+(((1.92e-6)*sj1))+(((-3.9e-7)*x2679))+(((-3.9e-7)*x2673))+(((-1.0)*pz))+(((0.391671)*x2687))+(((0.52362)*cj1))+(((-0.121761000001269)*x2678))+(((-1.0)*x2666*x2682))+((x2671*x2673))+((x2671*x2679))+(((-1.36279999993186e-7)*x2667)));
evalcond[3]=((((1.92e-6)*cj1))+((r11*x2683))+(((-1.36279999993186e-7)*x2685))+(((-0.391671)*x2688))+(((-3.9e-7)*x2674))+(((-3.9e-7)*x2672))+(((-1.0)*py))+(((-0.52362)*sj1))+(((-0.121761000001269)*x2668))+((x2671*x2672))+((x2671*x2674))+(((-1.0)*x2665*x2682)));
evalcond[4]=((((-1.0)*cj4*x2669*x2673))+((sj1*x2665))+((x2667*x2669))+((x2670*x2689))+((cj4*x2670*x2673))+(((-1.0)*x2677*x2678))+(((-1.0)*x2669*x2689))+((x2681*x2686))+(((-1.0)*x2667*x2670))+((x2677*x2686))+(((-1.0)*x2678*x2681))+x2688);
evalcond[5]=((((-1.0)*cj4*x2669*x2674))+(((-1.0)*cj4*x2669*x2672))+(((-1.0)*x2670*x2685))+(((-1.0)*x2668*x2681))+((cj4*x2670*x2672))+((cj4*x2670*x2674))+(((-1.0)*x2690))+((x2681*x2684))+((x2677*x2684))+((x2669*x2685))+(((-1.0)*x2668*x2677))+x2687);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2691=((1.0)*sj1);
IkReal x2692=(sj4*sj5);
IkReal x2693=(cj4*r12);
IkReal x2694=(cj4*r22);
IkReal x2695=(cj5*sj4);
IkReal x2696=(cj1*x2695);
if( IKabs(((((-1.0)*x2691*x2694))+((cj1*r10*x2692))+((cj1*x2693))+(((-1.0)*r21*x2691*x2695))+(((-1.0)*r20*x2691*x2692))+((r11*x2696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2693))+((r11*sj1*x2695))+((r21*x2696))+((cj1*x2694))+((r10*sj1*x2692))+((cj1*r20*x2692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2691*x2694))+((cj1*r10*x2692))+((cj1*x2693))+(((-1.0)*r21*x2691*x2695))+(((-1.0)*r20*x2691*x2692))+((r11*x2696))))+IKsqr((((sj1*x2693))+((r11*sj1*x2695))+((r21*x2696))+((cj1*x2694))+((r10*sj1*x2692))+((cj1*r20*x2692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2691*x2694))+((cj1*r10*x2692))+((cj1*x2693))+(((-1.0)*r21*x2691*x2695))+(((-1.0)*r20*x2691*x2692))+((r11*x2696))), (((sj1*x2693))+((r11*sj1*x2695))+((r21*x2696))+((cj1*x2694))+((r10*sj1*x2692))+((cj1*r20*x2692))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2697=IKcos(j2);
IkReal x2698=IKsin(j2);
IkReal x2699=(r22*sj4);
IkReal x2700=(cj5*r10);
IkReal x2701=((0.99999999995)*cj3);
IkReal x2702=((9.9999999995e-6)*sj3);
IkReal x2703=((1.36279999993186e-7)*cj4);
IkReal x2704=(cj5*r11);
IkReal x2705=(cj5*r21);
IkReal x2706=(r10*sj5);
IkReal x2707=((1.0)*sj4);
IkReal x2708=(r12*sj4);
IkReal x2709=((9.9999999995e-6)*cj3);
IkReal x2710=(cj5*r20);
IkReal x2711=(r20*sj5);
IkReal x2712=((1.0)*cj4);
IkReal x2713=((0.99999999995)*sj3);
IkReal x2714=((0.121761000001269)*sj5);
IkReal x2715=(r11*sj5);
IkReal x2716=(r21*sj5);
IkReal x2717=(sj1*x2697);
IkReal x2718=(cj1*x2698);
IkReal x2719=(cj1*x2697);
IkReal x2720=(cj4*x2711);
IkReal x2721=(sj1*x2698);
IkReal x2722=(x2717+x2718);
evalcond[0]=(x2722+(((-1.0)*x2704*x2707))+(((-1.0)*x2706*x2707))+(((-1.0)*r12*x2712)));
evalcond[1]=(x2719+(((-1.0)*x2721))+(((-1.0)*x2705*x2707))+(((-1.0)*r22*x2712))+(((-1.0)*x2707*x2711)));
evalcond[2]=((((-3.9e-7)*x2705))+((x2703*x2711))+(((-3.9e-7)*x2711))+(((0.391671)*x2719))+(((-0.391671)*x2721))+(((-1.36279999993186e-7)*x2699))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((x2703*x2705))+(((-0.121761000001269)*x2710))+((r21*x2714)));
evalcond[3]=((((-3.9e-7)*x2706))+(((-3.9e-7)*x2704))+(((0.52362)*sj1))+(((0.391671)*x2717))+(((0.391671)*x2718))+(((-1.0)*py))+(((-1.36279999993186e-7)*x2708))+(((-1.92e-6)*cj1))+((x2703*x2704))+((x2703*x2706))+((r11*x2714))+(((-0.121761000001269)*x2700)));
evalcond[4]=(x2722+((x2699*x2701))+((x2702*x2720))+((cj4*x2702*x2705))+((x2709*x2716))+(((-1.0)*x2709*x2710))+((x2713*x2716))+(((-1.0)*x2710*x2713))+(((-1.0)*x2699*x2702))+(((-1.0)*x2701*x2720))+(((-1.0)*cj4*x2701*x2705)));
evalcond[5]=(x2721+(((-1.0)*x2702*x2708))+(((-1.0)*x2719))+((cj4*x2702*x2706))+((cj4*x2702*x2704))+((x2709*x2715))+(((-1.0)*x2700*x2713))+((x2713*x2715))+((x2701*x2708))+(((-1.0)*x2700*x2709))+(((-1.0)*cj4*x2701*x2704))+(((-1.0)*cj4*x2701*x2706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2723=((1.0)*sj1);
IkReal x2724=(sj4*sj5);
IkReal x2725=(cj0*r20);
IkReal x2726=(cj4*r12);
IkReal x2727=(cj0*cj1);
IkReal x2728=(cj4*r22);
IkReal x2729=((1.0)*cj1);
IkReal x2730=(cj5*sj4);
CheckValue<IkReal> x2731 = IKatan2WithCheck(IkReal(((((-1.0)*x2726*x2729))+(((-1.0)*r11*x2729*x2730))+(((-1.0)*x2723*x2724*x2725))+(((-1.0)*cj0*r21*x2723*x2730))+(((-1.0)*r10*x2724*x2729))+(((-1.0)*cj0*x2723*x2728)))),IkReal(((((-1.0)*r10*x2723*x2724))+(((-1.0)*r11*x2723*x2730))+((r21*x2727*x2730))+((cj1*x2724*x2725))+((x2727*x2728))+(((-1.0)*x2723*x2726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2731.valid){
continue;
}
CheckValue<IkReal> x2732=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2732.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2731.value)+(((1.5707963267949)*(x2732.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2733=IKsin(j2);
IkReal x2734=IKcos(j2);
IkReal x2735=((9.9999999995e-6)*sj5);
IkReal x2736=(cj3*r01);
IkReal x2737=(cj4*r00);
IkReal x2738=((3.9e-7)*cj5);
IkReal x2739=((1.36279999993186e-7)*sj5);
IkReal x2740=(cj4*r10);
IkReal x2741=((9.9999999995e-6)*cj5);
IkReal x2742=(cj3*r20);
IkReal x2743=(cj0*sj1);
IkReal x2744=((0.121761000001269)*sj5);
IkReal x2745=(cj4*r01);
IkReal x2746=((1.36279999993186e-7)*cj5);
IkReal x2747=((0.99999999995)*cj3);
IkReal x2748=(r02*sj4);
IkReal x2749=(r11*sj3);
IkReal x2750=((0.99999999995)*sj5);
IkReal x2751=((3.9e-7)*sj5);
IkReal x2752=((0.121761000001269)*cj5);
IkReal x2753=((1.0)*sj4);
IkReal x2754=(r22*sj4);
IkReal x2755=((9.9999999995e-6)*sj3);
IkReal x2756=(r12*sj4);
IkReal x2757=((1.0)*cj4);
IkReal x2758=(cj5*r21);
IkReal x2759=(cj4*cj5);
IkReal x2760=(r21*sj3);
IkReal x2761=(cj4*r20);
IkReal x2762=((1.92e-6)*cj1);
IkReal x2763=(sj0*sj1);
IkReal x2764=(cj1*x2733);
IkReal x2765=((1.0)*x2734);
IkReal x2766=((0.391671)*x2734);
IkReal x2767=(sj1*x2733);
IkReal x2768=(cj1*x2734);
IkReal x2769=((0.99999999995)*cj5*sj3);
evalcond[0]=(x2768+(((-1.0)*r22*x2757))+(((-1.0)*x2767))+(((-1.0)*x2753*x2758))+(((-1.0)*r20*sj5*x2753)));
evalcond[1]=((((-1.0)*r00*sj5*x2753))+((sj0*x2764))+(((-1.0)*cj5*r01*x2753))+((x2734*x2763))+(((-1.0)*r02*x2757)));
evalcond[2]=((((-1.0)*cj0*x2764))+(((-1.0)*x2743*x2765))+(((-1.0)*r12*x2757))+(((-1.0)*cj5*r11*x2753))+(((-1.0)*r10*sj5*x2753)));
evalcond[3]=((((-0.391671)*x2767))+((cj1*x2766))+((x2739*x2761))+((r21*x2744))+((cj4*r21*x2746))+(((-1.36279999993186e-7)*x2754))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.0)*r21*x2738))+(((-1.0)*r20*x2751))+(((-1.0)*r20*x2752)));
evalcond[4]=((((0.001538)*cj0))+(((-1.0)*r00*x2751))+(((-1.0)*r00*x2752))+(((0.391671)*sj0*x2764))+(((-1.0)*sj0*x2762))+(((-1.36279999993186e-7)*x2748))+(((0.52362)*x2763))+(((-1.0)*px))+((x2745*x2746))+((r01*x2744))+((x2737*x2739))+(((-1.0)*r01*x2738))+((x2763*x2766)));
evalcond[5]=((((0.001538)*sj0))+((r11*x2744))+(((-0.52362)*x2743))+((x2739*x2740))+(((-1.36279999993186e-7)*x2756))+((cj4*r11*x2746))+(((-0.391671)*cj0*x2764))+(((-1.0)*r10*x2751))+(((-1.0)*r10*x2752))+(((-1.0)*py))+((cj0*x2762))+(((-1.0)*x2743*x2766))+(((-1.0)*r11*x2738)));
evalcond[6]=(x2764+((cj3*r21*x2735))+((cj4*x2741*x2760))+((x2750*x2760))+(((-1.0)*x2741*x2742))+(((-1.0)*cj4*x2747*x2758))+(((-1.0)*cj4*x2742*x2750))+(((-1.0)*r20*x2769))+(((-1.0)*x2754*x2755))+((sj1*x2734))+((x2747*x2754))+((sj3*x2735*x2761)));
evalcond[7]=((((-0.99999999995)*x2736*x2759))+(((-1.0)*cj3*r00*x2741))+((sj3*x2741*x2745))+(((-1.0)*cj1*sj0*x2765))+(((-1.0)*r00*x2769))+((x2735*x2736))+(((-1.0)*sj5*x2737*x2747))+((x2733*x2763))+(((-1.0)*x2748*x2755))+((sj3*x2735*x2737))+((x2747*x2748))+((r01*sj3*x2750)));
evalcond[8]=(((x2749*x2750))+((sj3*x2735*x2740))+((cj4*x2741*x2749))+(((-1.0)*r11*x2747*x2759))+(((-1.0)*r10*x2769))+(((-1.0)*x2733*x2743))+(((-1.0)*cj3*r10*x2741))+((cj3*r11*x2735))+((cj0*x2768))+(((-1.0)*x2755*x2756))+((x2747*x2756))+(((-1.0)*sj5*x2740*x2747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2770=((1.0)*sj0);
IkReal x2771=(cj1*sj4);
IkReal x2772=(r20*sj5);
IkReal x2773=(cj4*sj1);
IkReal x2774=(r00*sj5);
IkReal x2775=(sj1*sj4);
IkReal x2776=(cj1*cj4);
IkReal x2777=(cj5*x2775);
CheckValue<IkReal> x2778 = IKatan2WithCheck(IkReal((((cj5*r01*x2771))+(((-1.0)*x2770*x2772*x2775))+(((-1.0)*r22*x2770*x2773))+(((-1.0)*r21*x2770*x2777))+((x2771*x2774))+((r02*x2776)))),IkReal((((x2774*x2775))+((r01*x2777))+((sj0*x2771*x2772))+((r22*sj0*x2776))+((r02*x2773))+((cj5*r21*sj0*x2771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2778.valid){
continue;
}
CheckValue<IkReal> x2779=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2779.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2778.value)+(((1.5707963267949)*(x2779.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2780=IKsin(j2);
IkReal x2781=IKcos(j2);
IkReal x2782=((9.9999999995e-6)*sj5);
IkReal x2783=(cj3*r01);
IkReal x2784=(cj4*r00);
IkReal x2785=((3.9e-7)*cj5);
IkReal x2786=((1.36279999993186e-7)*sj5);
IkReal x2787=(cj4*r10);
IkReal x2788=((9.9999999995e-6)*cj5);
IkReal x2789=(cj3*r20);
IkReal x2790=(cj0*sj1);
IkReal x2791=((0.121761000001269)*sj5);
IkReal x2792=(cj4*r01);
IkReal x2793=((1.36279999993186e-7)*cj5);
IkReal x2794=((0.99999999995)*cj3);
IkReal x2795=(r02*sj4);
IkReal x2796=(r11*sj3);
IkReal x2797=((0.99999999995)*sj5);
IkReal x2798=((3.9e-7)*sj5);
IkReal x2799=((0.121761000001269)*cj5);
IkReal x2800=((1.0)*sj4);
IkReal x2801=(r22*sj4);
IkReal x2802=((9.9999999995e-6)*sj3);
IkReal x2803=(r12*sj4);
IkReal x2804=((1.0)*cj4);
IkReal x2805=(cj5*r21);
IkReal x2806=(cj4*cj5);
IkReal x2807=(r21*sj3);
IkReal x2808=(cj4*r20);
IkReal x2809=((1.92e-6)*cj1);
IkReal x2810=(sj0*sj1);
IkReal x2811=(cj1*x2780);
IkReal x2812=((1.0)*x2781);
IkReal x2813=((0.391671)*x2781);
IkReal x2814=(sj1*x2780);
IkReal x2815=(cj1*x2781);
IkReal x2816=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*x2814))+(((-1.0)*x2800*x2805))+(((-1.0)*r20*sj5*x2800))+(((-1.0)*r22*x2804))+x2815);
evalcond[1]=((((-1.0)*r00*sj5*x2800))+(((-1.0)*cj5*r01*x2800))+((x2781*x2810))+((sj0*x2811))+(((-1.0)*r02*x2804)));
evalcond[2]=((((-1.0)*x2790*x2812))+(((-1.0)*cj5*r11*x2800))+(((-1.0)*cj0*x2811))+(((-1.0)*r12*x2804))+(((-1.0)*r10*sj5*x2800)));
evalcond[3]=((((-0.391671)*x2814))+((r21*x2791))+(((-1.36279999993186e-7)*x2801))+(((-1.0)*r20*x2799))+(((-1.0)*r20*x2798))+(((-1.0)*r21*x2785))+((cj1*x2813))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((cj4*r21*x2793))+((x2786*x2808)));
evalcond[4]=((((0.001538)*cj0))+((x2810*x2813))+(((-1.36279999993186e-7)*x2795))+(((0.52362)*x2810))+((x2784*x2786))+(((0.391671)*sj0*x2811))+(((-1.0)*sj0*x2809))+((x2792*x2793))+(((-1.0)*px))+((r01*x2791))+(((-1.0)*r00*x2798))+(((-1.0)*r00*x2799))+(((-1.0)*r01*x2785)));
evalcond[5]=((((-1.0)*x2790*x2813))+(((0.001538)*sj0))+(((-1.36279999993186e-7)*x2803))+(((-0.52362)*x2790))+(((-1.0)*py))+((r11*x2791))+(((-1.0)*r10*x2798))+(((-1.0)*r10*x2799))+(((-0.391671)*cj0*x2811))+((cj4*r11*x2793))+((cj0*x2809))+(((-1.0)*r11*x2785))+((x2786*x2787)));
evalcond[6]=(((x2797*x2807))+((cj3*r21*x2782))+((sj3*x2782*x2808))+(((-1.0)*cj4*x2794*x2805))+(((-1.0)*r20*x2816))+((sj1*x2781))+(((-1.0)*cj4*x2789*x2797))+x2811+(((-1.0)*x2788*x2789))+((x2794*x2801))+((cj4*x2788*x2807))+(((-1.0)*x2801*x2802)));
evalcond[7]=((((-1.0)*cj3*r00*x2788))+((x2794*x2795))+((x2782*x2783))+(((-0.99999999995)*x2783*x2806))+((sj3*x2788*x2792))+((x2780*x2810))+((sj3*x2782*x2784))+(((-1.0)*sj5*x2784*x2794))+(((-1.0)*r00*x2816))+(((-1.0)*x2795*x2802))+((r01*sj3*x2797))+(((-1.0)*cj1*sj0*x2812)));
evalcond[8]=((((-1.0)*x2780*x2790))+(((-1.0)*cj3*r10*x2788))+(((-1.0)*x2802*x2803))+((cj4*x2788*x2796))+((sj3*x2782*x2787))+((x2796*x2797))+(((-1.0)*sj5*x2787*x2794))+((cj3*r11*x2782))+((cj0*x2815))+((x2794*x2803))+(((-1.0)*r11*x2794*x2806))+(((-1.0)*r10*x2816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2817=cj0*cj0;
IkReal x2818=(cj0*py);
IkReal x2819=(cj0*sj0);
IkReal x2820=(cj0*r11);
IkReal x2821=(r20*sj5);
IkReal x2822=((0.391671)*sj4);
IkReal x2823=((1.36279999993186e-7)*cj4);
IkReal x2824=(cj0*cj4);
IkReal x2825=(r10*sj5);
IkReal x2826=(cj5*r21);
IkReal x2827=(cj5*sj4);
IkReal x2828=(cj4*cj5);
IkReal x2829=(cj0*sj4);
IkReal x2830=(cj0*cj5*r10);
IkReal x2831=(((x2821*x2823))+((x2821*x2822))+((x2822*x2826))+(((-3.9e-7)*x2821))+(((-3.9e-7)*x2826))+(((0.121761000001269)*r21*sj5))+((x2823*x2826))+(((-1.0)*pz))+(((0.391671)*cj4*r22))+(((-1.36279999993186e-7)*r22*sj4))+(((-0.121761000001269)*cj5*r20)));
IkReal x2832=(x2817*x2831);
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(IKsign(x2817),-1);
if(!x2833.valid){
continue;
}
CheckValue<IkReal> x2834 = IKatan2WithCheck(IkReal(((((1281792.306375)*x2820*x2827))+(((0.4459933349777)*x2824*x2825))+(((-3272625.0)*x2818))+(((-12.0)*x2832))+(((1281792.306375)*x2825*x2829))+(((-398478.092629152)*x2830))+(((398478.092629152)*sj5*x2820))+(((0.4459933349777)*x2820*x2828))+(((-0.4459933349777)*r12*x2829))+(((-1.27632375)*cj0*x2825))+(((5033.29725)*x2819))+(((1281792.306375)*r12*x2824))+(((-1.27632375)*cj5*x2820)))),IkReal(((((-1.63535999991823e-6)*x2820*x2828))+(((-3272625.0)*x2832))+(((4.68e-6)*cj5*x2820))+(((-4.700052)*x2820*x2827))+(((-1.63535999991823e-6)*x2824*x2825))+(((-4.700052)*x2825*x2829))+(((12.0)*x2818))+(((1.63535999991823e-6)*r12*x2829))+(((4.68e-6)*cj0*x2825))+(((-4.700052)*r12*x2824))+(((1.46113200001522)*x2830))+(((-1.46113200001522)*sj5*x2820))+(((-0.018456)*x2819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2834.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2833.value)))+(x2834.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2835=IKcos(j1);
IkReal x2836=cj0*cj0;
IkReal x2837=IKsin(j1);
IkReal x2838=sj0*sj0;
IkReal x2839=((1.36279999993186e-7)*cj0);
IkReal x2840=(r12*sj4);
IkReal x2841=(r21*sj5);
IkReal x2842=((0.391670999980416)*sj3);
IkReal x2843=(r20*sj5);
IkReal x2844=((0.391671)*sj4);
IkReal x2845=((3.9e-7)*cj5);
IkReal x2846=((1.0)*pz);
IkReal x2847=((3.91670999980416e-6)*cj3);
IkReal x2848=(r00*sj5);
IkReal x2849=(r11*sj5);
IkReal x2850=(cj0*sj0);
IkReal x2851=(cj5*r11);
IkReal x2852=(r02*sj4);
IkReal x2853=(cj0*r21);
IkReal x2854=((3.9e-7)*sj0);
IkReal x2855=((1.36279999993186e-7)*sj0);
IkReal x2856=(r01*sj0);
IkReal x2857=((0.121761000001269)*sj5);
IkReal x2858=(cj5*r10);
IkReal x2859=((3.91670999980416e-6)*sj3);
IkReal x2860=(cj5*r00);
IkReal x2861=(cj0*r01);
IkReal x2862=((1.36279999993186e-7)*cj4);
IkReal x2863=(r22*sj4);
IkReal x2864=((3.9e-7)*cj0);
IkReal x2865=(cj4*sj0);
IkReal x2866=((0.391671)*r12);
IkReal x2867=(cj5*r21);
IkReal x2868=((1.0)*px);
IkReal x2869=((0.391670999980416)*cj3);
IkReal x2870=(cj0*cj4);
IkReal x2871=((0.121761000001269)*cj0);
IkReal x2872=(r01*sj5);
IkReal x2873=(r10*sj5);
IkReal x2874=((0.391671)*r02);
IkReal x2875=(cj5*r20);
IkReal x2876=((1.0)*py);
IkReal x2877=((0.001538)*x2850);
IkReal x2878=((1.92e-6)*x2837);
IkReal x2879=((0.52362)*x2835);
IkReal x2880=((0.52362)*x2837);
IkReal x2881=(sj5*x2862);
IkReal x2882=((0.121761000001269)*x2849);
IkReal x2883=(cj4*x2859);
IkReal x2884=((0.121761000001269)*cj5*sj0);
IkReal x2885=(cj4*cj5*r01);
IkReal x2886=((3.9e-7)*x2873);
IkReal x2887=((1.92e-6)*x2835);
IkReal x2888=(sj0*x2875);
IkReal x2889=(x2850*x2880);
IkReal x2890=(x2850*x2887);
evalcond[0]=((((-3.9e-7)*x2843))+(((0.121761000001269)*x2841))+(((-1.0)*r21*x2845))+(((-1.36279999993186e-7)*x2863))+((x2843*x2862))+(((-0.121761000001269)*x2875))+((x2843*x2844))+(((0.391671)*cj4*r22))+((x2844*x2867))+((x2862*x2867))+x2879+x2878+(((-1.0)*x2846)));
evalcond[1]=((((-1.0)*cj0*x2876))+((cj0*x2844*x2873))+((x2866*x2870))+(((-1.0)*x2839*x2840))+(((-1.0)*x2864*x2873))+((cj4*x2839*x2873))+((x2836*x2887))+(((-1.0)*x2858*x2871))+((x2849*x2871))+(((-1.0)*cj0*r11*x2845))+x2877+((cj4*x2839*x2851))+((cj0*x2844*x2851))+(((-1.0)*x2836*x2880)));
evalcond[2]=((((-1.0)*x2838*x2880))+((x2838*x2887))+(((-1.0)*x2865*x2874))+(((-1.0)*cj4*x2848*x2855))+((x2848*x2854))+(((0.121761000001269)*sj0*x2860))+(((-1.0)*x2877))+((x2852*x2855))+(((-1.0)*sj0*x2844*x2848))+(((-1.0)*x2855*x2885))+(((-1.0)*x2856*x2857))+((x2845*x2856))+((px*sj0))+(((-1.0)*cj5*x2844*x2856)));
evalcond[3]=((((-1.0)*cj0*x2879))+(((-1.0)*cj0*x2878))+(((-1.0)*x2841*x2871))+(((-1.0)*x2840*x2859))+(((-1.0)*x2842*x2858))+((x2840*x2869))+((x2847*x2849))+((x2843*x2864))+(((-1.0)*cj4*x2869*x2873))+(((-1.0)*cj4*x2839*x2843))+((x2873*x2883))+((x2839*x2863))+((x2842*x2849))+((x2845*x2853))+((x2871*x2875))+((x2851*x2883))+((cj0*pz))+(((-1.0)*cj4*x2839*x2867))+(((-1.0)*x2847*x2858))+(((-1.0)*cj4*x2851*x2869)));
evalcond[4]=(((cj5*r01*x2883))+((x2852*x2869))+(((-1.0)*x2855*x2863))+(((-0.121761000001269)*x2888))+((x2848*x2883))+(((-1.0)*x2869*x2885))+(((-1.0)*x2843*x2854))+((cj4*x2843*x2855))+(((-1.0)*x2847*x2860))+(((-1.0)*r21*sj0*x2845))+(((-1.0)*x2842*x2860))+((x2847*x2872))+((sj0*x2878))+((sj0*x2879))+(((-1.0)*cj4*x2848*x2869))+(((-1.0)*x2852*x2859))+(((-1.0)*sj0*x2846))+(((0.121761000001269)*sj0*x2841))+((cj4*x2855*x2867))+((x2842*x2872)));
evalcond[5]=(((x2851*x2862))+(((0.001538)*sj0))+(((-1.0)*cj0*x2880))+((cj0*x2863*x2869))+((cj5*x2853*x2883))+((cj0*x2887))+(((-1.0)*r11*x2845))+(((-1.0)*x2876))+((x2843*x2859*x2870))+(((-1.0)*cj0*x2847*x2875))+((x2862*x2873))+(((-1.0)*x2843*x2869*x2870))+(((-1.0)*cj0*x2859*x2863))+(((-1.0)*x2886))+x2882+((cj0*x2841*x2842))+((cj0*x2841*x2847))+(((-1.0)*cj4*cj5*x2853*x2869))+(((-1.0)*cj0*x2842*x2875))+(((-0.121761000001269)*x2858))+(((-1.36279999993186e-7)*x2840)));
evalcond[6]=((((0.001538)*cj0))+(((-3.9e-7)*x2848))+(((-1.0)*x2859*x2865*x2867))+(((-1.0)*sj0*x2887))+((x2842*x2888))+(((-1.0)*x2843*x2859*x2865))+(((-1.0)*r01*x2845))+(((-0.121761000001269)*x2860))+(((-1.0)*sj0*x2841*x2847))+(((-1.0)*sj0*x2841*x2842))+((x2847*x2888))+(((-1.0)*x2868))+((sj0*x2880))+(((-1.0)*sj0*x2863*x2869))+((x2843*x2865*x2869))+((cj5*r01*x2862))+((r01*x2857))+((x2865*x2867*x2869))+(((-1.36279999993186e-7)*x2852))+((sj0*x2859*x2863))+((x2848*x2862)));
evalcond[7]=((((-1.0)*sj0*x2882))+(((-0.001538)*x2838))+((x2870*x2874))+((r11*sj0*x2845))+(((-1.0)*cj4*x2855*x2873))+((x2854*x2873))+((x2840*x2855))+(((-1.0)*x2890))+(((-1.0)*cj4*x2851*x2855))+(((0.121761000001269)*sj0*x2858))+x2889+((py*sj0))+((cj5*x2844*x2861))+((cj0*x2844*x2848)));
evalcond[8]=((((-1.0)*x2848*x2864))+((x2857*x2861))+(((-1.0)*x2839*x2852))+(((-1.0)*sj0*x2844*x2851))+(((-1.0)*x2865*x2866))+(((-1.0)*x2860*x2871))+(((-1.0)*x2845*x2861))+(((0.001538)*x2836))+(((-1.0)*x2890))+((x2839*x2885))+(((-1.0)*sj0*x2844*x2873))+x2889+(((-1.0)*cj0*x2868))+((cj4*x2839*x2848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2891=(sj1*sj4);
IkReal x2892=(cj5*r01);
IkReal x2893=(r20*sj5);
IkReal x2894=(cj4*sj1);
IkReal x2895=(r00*sj5);
IkReal x2896=(cj1*sj4);
IkReal x2897=(cj5*r21);
IkReal x2898=(cj1*cj4);
if( IKabs((((x2895*x2896))+((x2892*x2896))+((r02*x2898))+(((-1.0)*r22*x2894))+(((-1.0)*x2891*x2897))+(((-1.0)*x2891*x2893)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2891*x2892))+((x2891*x2895))+((r22*x2898))+((x2893*x2896))+((r02*x2894))+((x2896*x2897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2895*x2896))+((x2892*x2896))+((r02*x2898))+(((-1.0)*r22*x2894))+(((-1.0)*x2891*x2897))+(((-1.0)*x2891*x2893))))+IKsqr((((x2891*x2892))+((x2891*x2895))+((r22*x2898))+((x2893*x2896))+((r02*x2894))+((x2896*x2897))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2895*x2896))+((x2892*x2896))+((r02*x2898))+(((-1.0)*r22*x2894))+(((-1.0)*x2891*x2897))+(((-1.0)*x2891*x2893))), (((x2891*x2892))+((x2891*x2895))+((r22*x2898))+((x2893*x2896))+((r02*x2894))+((x2896*x2897))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2899=IKcos(j2);
IkReal x2900=IKsin(j2);
IkReal x2901=(r22*sj4);
IkReal x2902=((0.99999999995)*cj3);
IkReal x2903=(r01*sj5);
IkReal x2904=((9.9999999995e-6)*cj3);
IkReal x2905=((1.36279999993186e-7)*cj4);
IkReal x2906=(cj5*r01);
IkReal x2907=(r20*sj5);
IkReal x2908=((9.9999999995e-6)*sj3);
IkReal x2909=((0.99999999995)*sj3);
IkReal x2910=(r00*sj5);
IkReal x2911=(cj5*r21);
IkReal x2912=(r02*sj4);
IkReal x2913=((1.0)*sj4);
IkReal x2914=(cj5*r20);
IkReal x2915=((1.0)*cj4);
IkReal x2916=(r21*sj5);
IkReal x2917=(cj5*r00);
IkReal x2918=(sj1*x2899);
IkReal x2919=(cj1*x2900);
IkReal x2920=(cj1*x2899);
IkReal x2921=(sj1*x2900);
IkReal x2922=(x2918+x2919);
evalcond[0]=((((-1.0)*x2906*x2913))+(((-1.0)*x2910*x2913))+(((-1.0)*r02*x2915))+x2922);
evalcond[1]=((((-1.0)*x2907*x2913))+(((-1.0)*x2911*x2913))+x2920+(((-1.0)*x2921))+(((-1.0)*r22*x2915)));
evalcond[2]=((((-3.9e-7)*x2907))+(((0.391671)*x2920))+(((-3.9e-7)*x2911))+(((-0.391671)*x2921))+((x2905*x2907))+(((0.121761000001269)*x2916))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((x2905*x2911))+(((-1.36279999993186e-7)*x2901))+(((-0.121761000001269)*x2914)));
evalcond[3]=((((-3.9e-7)*x2906))+(((0.52362)*sj1))+(((-3.9e-7)*x2910))+((x2905*x2906))+(((0.391671)*x2918))+(((0.391671)*x2919))+(((-1.0)*px))+(((-1.36279999993186e-7)*x2912))+(((-1.92e-6)*cj1))+((x2905*x2910))+(((0.121761000001269)*x2903))+(((-0.121761000001269)*x2917)));
evalcond[4]=((((-1.0)*x2901*x2908))+((x2901*x2902))+((x2909*x2916))+(((-1.0)*cj4*x2902*x2911))+(((-1.0)*x2904*x2914))+((x2904*x2916))+((cj4*x2908*x2911))+(((-1.0)*x2909*x2914))+((cj4*x2907*x2908))+x2922+(((-1.0)*cj4*x2902*x2907)));
evalcond[5]=(((cj4*x2906*x2908))+(((-1.0)*cj4*x2902*x2910))+(((-1.0)*x2904*x2917))+((x2903*x2904))+((x2903*x2909))+((cj4*x2908*x2910))+(((-1.0)*x2908*x2912))+(((-1.0)*x2909*x2917))+((x2902*x2912))+x2921+(((-1.0)*cj4*x2902*x2906))+(((-1.0)*x2920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2923=((1.0)*sj1);
IkReal x2924=(sj4*sj5);
IkReal x2925=(cj4*r22);
IkReal x2926=(cj5*sj4);
IkReal x2927=(cj4*r02);
IkReal x2928=((1.0)*cj1);
if( IKabs(((((-1.0)*x2923*x2925))+(((-1.0)*x2927*x2928))+(((-1.0)*r01*x2926*x2928))+(((-1.0)*r20*x2923*x2924))+(((-1.0)*r00*x2924*x2928))+(((-1.0)*r21*x2923*x2926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2923*x2927))+(((-1.0)*r00*x2923*x2924))+(((-1.0)*r01*x2923*x2926))+((cj1*r20*x2924))+((cj1*r21*x2926))+((cj1*x2925)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2923*x2925))+(((-1.0)*x2927*x2928))+(((-1.0)*r01*x2926*x2928))+(((-1.0)*r20*x2923*x2924))+(((-1.0)*r00*x2924*x2928))+(((-1.0)*r21*x2923*x2926))))+IKsqr(((((-1.0)*x2923*x2927))+(((-1.0)*r00*x2923*x2924))+(((-1.0)*r01*x2923*x2926))+((cj1*r20*x2924))+((cj1*r21*x2926))+((cj1*x2925))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2923*x2925))+(((-1.0)*x2927*x2928))+(((-1.0)*r01*x2926*x2928))+(((-1.0)*r20*x2923*x2924))+(((-1.0)*r00*x2924*x2928))+(((-1.0)*r21*x2923*x2926))), ((((-1.0)*x2923*x2927))+(((-1.0)*r00*x2923*x2924))+(((-1.0)*r01*x2923*x2926))+((cj1*r20*x2924))+((cj1*r21*x2926))+((cj1*x2925))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2929=IKcos(j2);
IkReal x2930=IKsin(j2);
IkReal x2931=(r22*sj4);
IkReal x2932=((0.99999999995)*cj3);
IkReal x2933=(r01*sj5);
IkReal x2934=((9.9999999995e-6)*cj3);
IkReal x2935=((1.36279999993186e-7)*cj4);
IkReal x2936=(cj5*r01);
IkReal x2937=((0.99999999995)*sj3);
IkReal x2938=(r20*sj5);
IkReal x2939=((9.9999999995e-6)*sj3);
IkReal x2940=(r00*sj5);
IkReal x2941=(cj5*r21);
IkReal x2942=(r02*sj4);
IkReal x2943=((1.0)*sj1);
IkReal x2944=(cj5*r20);
IkReal x2945=((1.0)*sj4);
IkReal x2946=((1.0)*cj4);
IkReal x2947=((0.391671)*sj1);
IkReal x2948=(r21*sj5);
IkReal x2949=(cj5*r00);
IkReal x2950=(cj1*x2929);
IkReal x2951=(cj1*x2930);
IkReal x2952=(x2930*x2943);
evalcond[0]=((((-1.0)*x2952))+(((-1.0)*r22*x2946))+x2950+(((-1.0)*x2938*x2945))+(((-1.0)*x2941*x2945)));
evalcond[1]=((((-1.0)*x2951))+(((-1.0)*x2940*x2945))+(((-1.0)*x2936*x2945))+(((-1.0)*x2929*x2943))+(((-1.0)*r02*x2946)));
evalcond[2]=(((x2935*x2941))+(((0.391671)*x2950))+(((-3.9e-7)*x2938))+(((-0.121761000001269)*x2944))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.121761000001269)*x2948))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x2931))+((x2935*x2938))+(((-1.0)*x2930*x2947))+(((-3.9e-7)*x2941)));
evalcond[3]=(((x2935*x2940))+(((1.92e-6)*cj1))+(((-3.9e-7)*x2936))+(((-1.0)*x2929*x2947))+(((-0.121761000001269)*x2949))+(((-0.391671)*x2951))+(((-1.0)*px))+(((-0.52362)*sj1))+((x2935*x2936))+(((-3.9e-7)*x2940))+(((0.121761000001269)*x2933))+(((-1.36279999993186e-7)*x2942)));
evalcond[4]=((((-1.0)*x2931*x2939))+(((-1.0)*x2934*x2944))+((sj1*x2929))+(((-1.0)*cj4*x2932*x2938))+((cj4*x2939*x2941))+(((-1.0)*cj4*x2932*x2941))+((cj4*x2938*x2939))+((x2937*x2948))+x2951+((x2931*x2932))+((x2934*x2948))+(((-1.0)*x2937*x2944)));
evalcond[5]=((((-1.0)*x2934*x2949))+(((-1.0)*x2939*x2942))+((x2932*x2942))+(((-1.0)*x2952))+((cj4*x2936*x2939))+(((-1.0)*cj4*x2932*x2936))+((cj4*x2939*x2940))+(((-1.0)*cj4*x2932*x2940))+((x2933*x2937))+((x2933*x2934))+x2950+(((-1.0)*x2937*x2949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2953=((1.0)*sj1);
IkReal x2954=(sj4*sj5);
IkReal x2955=(cj4*r22);
IkReal x2956=(cj4*r12);
IkReal x2957=((1.0)*cj1);
IkReal x2958=(cj5*r21*sj4);
IkReal x2959=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x2953*x2958))+(((-1.0)*x2953*x2955))+(((-1.0)*r20*x2953*x2954))+(((-1.0)*x2956*x2957))+(((-1.0)*r10*x2954*x2957))+(((-1.0)*x2957*x2959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2953*x2959))+(((-1.0)*x2953*x2956))+(((-1.0)*r10*x2953*x2954))+((cj1*r20*x2954))+((cj1*x2958))+((cj1*x2955)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2953*x2958))+(((-1.0)*x2953*x2955))+(((-1.0)*r20*x2953*x2954))+(((-1.0)*x2956*x2957))+(((-1.0)*r10*x2954*x2957))+(((-1.0)*x2957*x2959))))+IKsqr(((((-1.0)*x2953*x2959))+(((-1.0)*x2953*x2956))+(((-1.0)*r10*x2953*x2954))+((cj1*r20*x2954))+((cj1*x2958))+((cj1*x2955))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2953*x2958))+(((-1.0)*x2953*x2955))+(((-1.0)*r20*x2953*x2954))+(((-1.0)*x2956*x2957))+(((-1.0)*r10*x2954*x2957))+(((-1.0)*x2957*x2959))), ((((-1.0)*x2953*x2959))+(((-1.0)*x2953*x2956))+(((-1.0)*r10*x2953*x2954))+((cj1*r20*x2954))+((cj1*x2958))+((cj1*x2955))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2960=IKcos(j2);
IkReal x2961=IKsin(j2);
IkReal x2962=(r22*sj4);
IkReal x2963=(cj5*r10);
IkReal x2964=((0.99999999995)*cj3);
IkReal x2965=((9.9999999995e-6)*sj3);
IkReal x2966=((1.36279999993186e-7)*cj4);
IkReal x2967=(cj5*r11);
IkReal x2968=(cj5*r21);
IkReal x2969=(r10*sj5);
IkReal x2970=((1.0)*sj4);
IkReal x2971=((1.0)*sj1);
IkReal x2972=((9.9999999995e-6)*cj3);
IkReal x2973=(cj5*r20);
IkReal x2974=(r20*sj5);
IkReal x2975=((1.0)*cj4);
IkReal x2976=((0.99999999995)*sj3);
IkReal x2977=((0.391671)*sj1);
IkReal x2978=((0.121761000001269)*sj5);
IkReal x2979=(r11*sj5);
IkReal x2980=(r12*sj4);
IkReal x2981=(r21*sj5);
IkReal x2982=(cj1*x2960);
IkReal x2983=(cj1*x2961);
IkReal x2984=(cj4*x2974);
IkReal x2985=(x2961*x2971);
evalcond[0]=((((-1.0)*x2985))+(((-1.0)*x2968*x2970))+(((-1.0)*r22*x2975))+x2982+(((-1.0)*x2970*x2974)));
evalcond[1]=((((-1.0)*r12*x2975))+(((-1.0)*x2983))+(((-1.0)*x2969*x2970))+(((-1.0)*x2967*x2970))+(((-1.0)*x2960*x2971)));
evalcond[2]=((((-3.9e-7)*x2974))+(((-1.36279999993186e-7)*x2962))+(((-0.121761000001269)*x2973))+((x2966*x2968))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((x2966*x2974))+(((0.52362)*cj1))+(((-3.9e-7)*x2968))+(((0.391671)*x2982))+(((-1.0)*x2961*x2977))+((r21*x2978)));
evalcond[3]=((((1.92e-6)*cj1))+(((-0.391671)*x2983))+(((-0.121761000001269)*x2963))+((x2966*x2969))+((x2966*x2967))+(((-1.36279999993186e-7)*x2980))+(((-1.0)*py))+((r11*x2978))+(((-0.52362)*sj1))+(((-3.9e-7)*x2969))+(((-3.9e-7)*x2967))+(((-1.0)*x2960*x2977)));
evalcond[4]=((((-1.0)*x2972*x2973))+((x2976*x2981))+((x2962*x2964))+(((-1.0)*cj4*x2964*x2968))+(((-1.0)*x2964*x2984))+(((-1.0)*x2962*x2965))+((x2965*x2984))+((cj4*x2965*x2968))+((x2972*x2981))+x2983+((sj1*x2960))+(((-1.0)*x2973*x2976)));
evalcond[5]=((((-1.0)*x2963*x2972))+(((-1.0)*x2963*x2976))+(((-1.0)*x2965*x2980))+(((-1.0)*x2985))+((x2964*x2980))+(((-1.0)*cj4*x2964*x2967))+(((-1.0)*cj4*x2964*x2969))+((cj4*x2965*x2969))+((cj4*x2965*x2967))+((x2976*x2979))+x2982+((x2972*x2979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2986=((1.0)*sj1);
IkReal x2987=(sj4*sj5);
IkReal x2988=(cj4*r12);
IkReal x2989=(cj4*r22);
IkReal x2990=(cj5*sj4);
IkReal x2991=(cj1*x2990);
if( IKabs(((((-1.0)*r20*x2986*x2987))+((cj1*r10*x2987))+(((-1.0)*r21*x2986*x2990))+((cj1*x2988))+(((-1.0)*x2986*x2989))+((r11*x2991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2987))+((cj1*x2989))+((sj1*x2988))+((r21*x2991))+((r10*sj1*x2987))+((r11*sj1*x2990)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2986*x2987))+((cj1*r10*x2987))+(((-1.0)*r21*x2986*x2990))+((cj1*x2988))+(((-1.0)*x2986*x2989))+((r11*x2991))))+IKsqr((((cj1*r20*x2987))+((cj1*x2989))+((sj1*x2988))+((r21*x2991))+((r10*sj1*x2987))+((r11*sj1*x2990))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2986*x2987))+((cj1*r10*x2987))+(((-1.0)*r21*x2986*x2990))+((cj1*x2988))+(((-1.0)*x2986*x2989))+((r11*x2991))), (((cj1*r20*x2987))+((cj1*x2989))+((sj1*x2988))+((r21*x2991))+((r10*sj1*x2987))+((r11*sj1*x2990))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2992=IKcos(j2);
IkReal x2993=IKsin(j2);
IkReal x2994=(r22*sj4);
IkReal x2995=(cj5*r10);
IkReal x2996=((0.99999999995)*cj3);
IkReal x2997=((9.9999999995e-6)*sj3);
IkReal x2998=((1.36279999993186e-7)*cj4);
IkReal x2999=(cj5*r11);
IkReal x3000=(cj5*r21);
IkReal x3001=(r10*sj5);
IkReal x3002=((1.0)*sj4);
IkReal x3003=(r12*sj4);
IkReal x3004=((9.9999999995e-6)*cj3);
IkReal x3005=(cj5*r20);
IkReal x3006=(r20*sj5);
IkReal x3007=((1.0)*cj4);
IkReal x3008=((0.99999999995)*sj3);
IkReal x3009=((0.121761000001269)*sj5);
IkReal x3010=(r11*sj5);
IkReal x3011=(r21*sj5);
IkReal x3012=(sj1*x2992);
IkReal x3013=(cj1*x2993);
IkReal x3014=(cj1*x2992);
IkReal x3015=(cj4*x3006);
IkReal x3016=(sj1*x2993);
IkReal x3017=(x3012+x3013);
evalcond[0]=(x3017+(((-1.0)*r12*x3007))+(((-1.0)*x2999*x3002))+(((-1.0)*x3001*x3002)));
evalcond[1]=((((-1.0)*r22*x3007))+(((-1.0)*x3002*x3006))+x3014+(((-1.0)*x3000*x3002))+(((-1.0)*x3016)));
evalcond[2]=(((x2998*x3000))+((x2998*x3006))+(((0.391671)*x3014))+(((-0.121761000001269)*x3005))+(((1.92e-6)*sj1))+(((-3.9e-7)*x3000))+(((-3.9e-7)*x3006))+(((-1.0)*pz))+(((-1.36279999993186e-7)*x2994))+(((0.52362)*cj1))+((r21*x3009))+(((-0.391671)*x3016)));
evalcond[3]=((((-3.9e-7)*x2999))+((x2998*x3001))+(((0.391671)*x3013))+(((0.391671)*x3012))+(((0.52362)*sj1))+(((-1.36279999993186e-7)*x3003))+((x2998*x2999))+(((-3.9e-7)*x3001))+(((-1.0)*py))+(((-1.92e-6)*cj1))+((r11*x3009))+(((-0.121761000001269)*x2995)));
evalcond[4]=(((x2997*x3015))+x3017+((x3008*x3011))+(((-1.0)*x2996*x3015))+((cj4*x2997*x3000))+(((-1.0)*cj4*x2996*x3000))+(((-1.0)*x2994*x2997))+((x3004*x3011))+((x2994*x2996))+(((-1.0)*x3004*x3005))+(((-1.0)*x3005*x3008)));
evalcond[5]=((((-1.0)*x2997*x3003))+x3016+((x3008*x3010))+(((-1.0)*cj4*x2996*x2999))+((x2996*x3003))+(((-1.0)*x2995*x3004))+(((-1.0)*x2995*x3008))+((cj4*x2997*x3001))+(((-1.0)*cj4*x2996*x3001))+((cj4*x2997*x2999))+((x3004*x3010))+(((-1.0)*x3014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3018=((1.0)*sj1);
IkReal x3019=(sj4*sj5);
IkReal x3020=(cj0*r20);
IkReal x3021=(cj4*r12);
IkReal x3022=(cj0*cj1);
IkReal x3023=(cj4*r22);
IkReal x3024=((1.0)*cj1);
IkReal x3025=(cj5*sj4);
CheckValue<IkReal> x3026=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027 = IKatan2WithCheck(IkReal(((((-1.0)*x3021*x3024))+(((-1.0)*r10*x3019*x3024))+(((-1.0)*x3018*x3019*x3020))+(((-1.0)*cj0*r21*x3018*x3025))+(((-1.0)*cj0*x3018*x3023))+(((-1.0)*r11*x3024*x3025)))),IkReal(((((-1.0)*x3018*x3021))+((r21*x3022*x3025))+(((-1.0)*r10*x3018*x3019))+((cj1*x3019*x3020))+(((-1.0)*r11*x3018*x3025))+((x3022*x3023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3027.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3026.value)))+(x3027.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3028=IKsin(j2);
IkReal x3029=IKcos(j2);
IkReal x3030=((9.9999999995e-6)*sj5);
IkReal x3031=(cj3*r01);
IkReal x3032=(cj4*r00);
IkReal x3033=((3.9e-7)*cj5);
IkReal x3034=((1.36279999993186e-7)*sj5);
IkReal x3035=(cj4*r10);
IkReal x3036=((9.9999999995e-6)*cj5);
IkReal x3037=(cj3*r20);
IkReal x3038=(cj0*sj1);
IkReal x3039=((0.121761000001269)*sj5);
IkReal x3040=(cj4*r01);
IkReal x3041=((1.36279999993186e-7)*cj5);
IkReal x3042=((0.99999999995)*cj3);
IkReal x3043=(r02*sj4);
IkReal x3044=(r11*sj3);
IkReal x3045=((0.99999999995)*sj5);
IkReal x3046=((3.9e-7)*sj5);
IkReal x3047=((0.121761000001269)*cj5);
IkReal x3048=((1.0)*sj4);
IkReal x3049=(r22*sj4);
IkReal x3050=((9.9999999995e-6)*sj3);
IkReal x3051=(r12*sj4);
IkReal x3052=((1.0)*cj4);
IkReal x3053=(cj5*r21);
IkReal x3054=(cj4*cj5);
IkReal x3055=(r21*sj3);
IkReal x3056=(cj4*r20);
IkReal x3057=((1.92e-6)*cj1);
IkReal x3058=(sj0*sj1);
IkReal x3059=(cj1*x3028);
IkReal x3060=((1.0)*x3029);
IkReal x3061=((0.391671)*x3029);
IkReal x3062=(sj1*x3028);
IkReal x3063=(cj1*x3029);
IkReal x3064=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*x3062))+x3063+(((-1.0)*x3048*x3053))+(((-1.0)*r20*sj5*x3048))+(((-1.0)*r22*x3052)));
evalcond[1]=((((-1.0)*cj5*r01*x3048))+((sj0*x3059))+(((-1.0)*r02*x3052))+((x3029*x3058))+(((-1.0)*r00*sj5*x3048)));
evalcond[2]=((((-1.0)*r10*sj5*x3048))+(((-1.0)*cj0*x3059))+(((-1.0)*cj5*r11*x3048))+(((-1.0)*r12*x3052))+(((-1.0)*x3038*x3060)));
evalcond[3]=(((x3034*x3056))+(((-1.0)*r21*x3033))+(((-1.36279999993186e-7)*x3049))+((cj4*r21*x3041))+(((-1.0)*r20*x3047))+(((-1.0)*r20*x3046))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((r21*x3039))+(((0.52362)*cj1))+((cj1*x3061))+(((-0.391671)*x3062)));
evalcond[4]=((((0.001538)*cj0))+(((-1.0)*r01*x3033))+(((-1.36279999993186e-7)*x3043))+((x3058*x3061))+(((0.391671)*sj0*x3059))+(((-1.0)*r00*x3047))+(((-1.0)*r00*x3046))+((r01*x3039))+(((-1.0)*px))+((x3040*x3041))+(((-1.0)*sj0*x3057))+((x3032*x3034))+(((0.52362)*x3058)));
evalcond[5]=((((0.001538)*sj0))+((x3034*x3035))+((r11*x3039))+((cj0*x3057))+(((-0.52362)*x3038))+(((-1.0)*r10*x3046))+(((-1.0)*r10*x3047))+(((-1.0)*py))+((cj4*r11*x3041))+(((-1.0)*r11*x3033))+(((-1.36279999993186e-7)*x3051))+(((-1.0)*x3038*x3061))+(((-0.391671)*cj0*x3059)));
evalcond[6]=(((sj3*x3030*x3056))+((cj4*x3036*x3055))+((x3042*x3049))+((sj1*x3029))+x3059+((x3045*x3055))+(((-1.0)*x3036*x3037))+((cj3*r21*x3030))+(((-1.0)*cj4*x3037*x3045))+(((-1.0)*cj4*x3042*x3053))+(((-1.0)*r20*x3064))+(((-1.0)*x3049*x3050)));
evalcond[7]=(((x3028*x3058))+((x3042*x3043))+((sj3*x3030*x3032))+((x3030*x3031))+(((-1.0)*sj5*x3032*x3042))+((r01*sj3*x3045))+(((-1.0)*x3043*x3050))+(((-0.99999999995)*x3031*x3054))+(((-1.0)*r00*x3064))+(((-1.0)*cj1*sj0*x3060))+((sj3*x3036*x3040))+(((-1.0)*cj3*r00*x3036)));
evalcond[8]=((((-1.0)*sj5*x3035*x3042))+((sj3*x3030*x3035))+(((-1.0)*r10*x3064))+(((-1.0)*r11*x3042*x3054))+((cj0*x3063))+(((-1.0)*cj3*r10*x3036))+((x3042*x3051))+((cj4*x3036*x3044))+(((-1.0)*x3050*x3051))+((cj3*r11*x3030))+((x3044*x3045))+(((-1.0)*x3028*x3038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3065=((1.0)*sj0);
IkReal x3066=(cj1*sj4);
IkReal x3067=(r20*sj5);
IkReal x3068=(cj4*sj1);
IkReal x3069=(r00*sj5);
IkReal x3070=(sj1*sj4);
IkReal x3071=(cj1*cj4);
IkReal x3072=(cj5*x3070);
CheckValue<IkReal> x3073 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3065*x3068))+(((-1.0)*r21*x3065*x3072))+(((-1.0)*x3065*x3067*x3070))+((x3066*x3069))+((r02*x3071))+((cj5*r01*x3066)))),IkReal((((r22*sj0*x3071))+((r01*x3072))+((cj5*r21*sj0*x3066))+((x3069*x3070))+((r02*x3068))+((sj0*x3066*x3067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3073.valid){
continue;
}
CheckValue<IkReal> x3074=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3074.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3073.value)+(((1.5707963267949)*(x3074.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3075=IKsin(j2);
IkReal x3076=IKcos(j2);
IkReal x3077=((9.9999999995e-6)*sj5);
IkReal x3078=(cj3*r01);
IkReal x3079=(cj4*r00);
IkReal x3080=((3.9e-7)*cj5);
IkReal x3081=((1.36279999993186e-7)*sj5);
IkReal x3082=(cj4*r10);
IkReal x3083=((9.9999999995e-6)*cj5);
IkReal x3084=(cj3*r20);
IkReal x3085=(cj0*sj1);
IkReal x3086=((0.121761000001269)*sj5);
IkReal x3087=(cj4*r01);
IkReal x3088=((1.36279999993186e-7)*cj5);
IkReal x3089=((0.99999999995)*cj3);
IkReal x3090=(r02*sj4);
IkReal x3091=(r11*sj3);
IkReal x3092=((0.99999999995)*sj5);
IkReal x3093=((3.9e-7)*sj5);
IkReal x3094=((0.121761000001269)*cj5);
IkReal x3095=((1.0)*sj4);
IkReal x3096=(r22*sj4);
IkReal x3097=((9.9999999995e-6)*sj3);
IkReal x3098=(r12*sj4);
IkReal x3099=((1.0)*cj4);
IkReal x3100=(cj5*r21);
IkReal x3101=(cj4*cj5);
IkReal x3102=(r21*sj3);
IkReal x3103=(cj4*r20);
IkReal x3104=((1.92e-6)*cj1);
IkReal x3105=(sj0*sj1);
IkReal x3106=(cj1*x3075);
IkReal x3107=((1.0)*x3076);
IkReal x3108=((0.391671)*x3076);
IkReal x3109=(sj1*x3075);
IkReal x3110=(cj1*x3076);
IkReal x3111=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*r20*sj5*x3095))+x3110+(((-1.0)*r22*x3099))+(((-1.0)*x3109))+(((-1.0)*x3095*x3100)));
evalcond[1]=(((sj0*x3106))+(((-1.0)*r02*x3099))+((x3076*x3105))+(((-1.0)*cj5*r01*x3095))+(((-1.0)*r00*sj5*x3095)));
evalcond[2]=((((-1.0)*r12*x3099))+(((-1.0)*r10*sj5*x3095))+(((-1.0)*x3085*x3107))+(((-1.0)*cj5*r11*x3095))+(((-1.0)*cj0*x3106)));
evalcond[3]=(((x3081*x3103))+(((-1.0)*r21*x3080))+(((-1.36279999993186e-7)*x3096))+((cj1*x3108))+((r21*x3086))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.0)*r20*x3094))+(((-1.0)*r20*x3093))+(((-0.391671)*x3109))+((cj4*r21*x3088)));
evalcond[4]=((((0.001538)*cj0))+(((-1.36279999993186e-7)*x3090))+(((0.391671)*sj0*x3106))+(((0.52362)*x3105))+(((-1.0)*px))+(((-1.0)*r00*x3093))+(((-1.0)*r00*x3094))+((x3079*x3081))+((r01*x3086))+(((-1.0)*sj0*x3104))+((x3087*x3088))+(((-1.0)*r01*x3080))+((x3105*x3108)));
evalcond[5]=((((0.001538)*sj0))+((x3081*x3082))+(((-1.36279999993186e-7)*x3098))+(((-0.52362)*x3085))+((r11*x3086))+(((-1.0)*r10*x3093))+(((-1.0)*r10*x3094))+((cj0*x3104))+(((-1.0)*py))+(((-0.391671)*cj0*x3106))+(((-1.0)*x3085*x3108))+((cj4*r11*x3088))+(((-1.0)*r11*x3080)));
evalcond[6]=(x3106+(((-1.0)*r20*x3111))+(((-1.0)*x3083*x3084))+((x3092*x3102))+(((-1.0)*cj4*x3089*x3100))+(((-1.0)*x3096*x3097))+((sj1*x3076))+((x3089*x3096))+((cj4*x3083*x3102))+(((-1.0)*cj4*x3084*x3092))+((cj3*r21*x3077))+((sj3*x3077*x3103)));
evalcond[7]=(((r01*sj3*x3092))+(((-1.0)*cj1*sj0*x3107))+((sj3*x3083*x3087))+((x3077*x3078))+((x3075*x3105))+(((-1.0)*cj3*r00*x3083))+(((-1.0)*r00*x3111))+(((-0.99999999995)*x3078*x3101))+((x3089*x3090))+(((-1.0)*x3090*x3097))+((sj3*x3077*x3079))+(((-1.0)*sj5*x3079*x3089)));
evalcond[8]=(((cj3*r11*x3077))+(((-1.0)*r11*x3089*x3101))+(((-1.0)*x3075*x3085))+((sj3*x3077*x3082))+(((-1.0)*r10*x3111))+(((-1.0)*sj5*x3082*x3089))+((x3091*x3092))+((cj0*x3110))+((x3089*x3098))+(((-1.0)*cj3*r10*x3083))+((cj4*x3083*x3091))+(((-1.0)*x3097*x3098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3112=((9.9999999995e-6)*sj0);
IkReal x3113=(r22*sj4);
IkReal x3114=((1.0)*sj4);
IkReal x3115=((0.99999999995)*sj0);
IkReal x3116=(r21*sj5);
IkReal x3117=(cj5*r20);
IkReal x3118=(cj4*cj5*r21);
IkReal x3119=(cj4*r20*sj5);
CheckValue<IkReal> x3120 = IKatan2WithCheck(IkReal(((((-1.0)*x3115*x3117))+((x3112*x3118))+((x3112*x3119))+(((-1.0)*x3112*x3113))+((x3115*x3116)))),IkReal(((((-1.0)*x3115*x3119))+(((-1.0)*x3115*x3118))+((x3112*x3116))+((x3113*x3115))+(((-1.0)*x3112*x3117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3120.valid){
continue;
}
CheckValue<IkReal> x3121=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x3114))+(((-1.0)*cj4*r02))+(((-1.0)*cj5*r01*x3114)))),-1);
if(!x3121.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x3120.value)+(((1.5707963267949)*(x3121.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x3122=IKcos(j3);
IkReal x3123=IKsin(j3);
IkReal x3124=(r10*sj5);
IkReal x3125=(cj5*r01);
IkReal x3126=(r22*sj4);
IkReal x3127=(cj5*r10);
IkReal x3128=(r02*sj4);
IkReal x3129=(r11*sj5);
IkReal x3130=(cj5*r20);
IkReal x3131=(cj5*r21);
IkReal x3132=(r20*sj5);
IkReal x3133=(r12*sj4);
IkReal x3134=(r21*sj5);
IkReal x3135=(r00*sj5);
IkReal x3136=(cj5*r00);
IkReal x3137=(r01*sj5);
IkReal x3138=(cj5*r11);
IkReal x3139=((0.99999999995)*x3123);
IkReal x3140=((9.9999999995e-6)*x3123);
IkReal x3141=((9.9999999995e-6)*x3122);
IkReal x3142=((0.99999999995)*x3122);
IkReal x3143=(cj4*x3141);
evalcond[0]=(((cj4*x3132*x3139))+(((-1.0)*x3126*x3141))+((cj4*x3131*x3139))+(((-1.0)*x3134*x3140))+(((-1.0)*x3130*x3142))+((x3131*x3143))+((x3132*x3143))+(((-1.0)*x3126*x3139))+((x3130*x3140))+((x3134*x3142)));
evalcond[1]=(cj0+(((-1.0)*x3136*x3142))+((cj4*x3125*x3139))+((x3135*x3143))+((cj4*x3135*x3139))+(((-1.0)*x3128*x3141))+(((-1.0)*x3128*x3139))+((x3125*x3143))+((x3137*x3142))+(((-1.0)*x3137*x3140))+((x3136*x3140)));
evalcond[2]=(((x3124*x3143))+sj0+((x3127*x3140))+((x3129*x3142))+((cj4*x3138*x3139))+(((-1.0)*x3133*x3139))+(((-1.0)*x3127*x3142))+(((-1.0)*x3129*x3140))+((cj4*x3124*x3139))+(((-1.0)*x3133*x3141))+((x3138*x3143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x3144=cj0*cj0;
j1eval[0]=x3144;
j1eval[1]=IKsign(x3144);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x3145=sj0*sj0;
j1eval[0]=x3145;
j1eval[1]=IKsign(x3145);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=cj0;
j1eval[1]=IKsign(cj0);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3146=(r22*sj4);
IkReal x3147=((0.232536954279117)*cj5);
IkReal x3148=(cj5*r01);
IkReal x3149=(r02*sj4);
IkReal x3150=(cj5*r21);
IkReal x3151=((9.54335107914695e-13)*cj4);
IkReal x3152=((0.748006187683308)*cj4);
IkReal x3153=((8.52662144715453e-7)*cj5);
IkReal x3154=((2.60265077711611e-7)*cj4);
IkReal x3155=(r00*sj5);
IkReal x3156=((8.52662144715453e-7)*sj5);
IkReal x3157=(r20*sj5);
IkReal x3158=((0.748006187683308)*sj4);
IkReal x3159=((0.232536954279117)*sj5);
IkReal x3160=((2.74277506655963e-6)*cj4);
IkReal x3161=((2.74277506655963e-6)*sj4);
if( IKabs(((((-1.0)*x3148*x3158))+(((-1.0)*x3148*x3154))+(((-1.0)*x3157*x3161))+(((-1.0)*x3150*x3161))+(((2.60265077711611e-7)*x3149))+(((-1.0)*x3150*x3151))+(((7.44814942123594e-7)*x3155))+(((2.73107346716569e-12)*x3157))+(((2.73107346716569e-12)*x3150))+((r00*x3147))+((r20*x3153))+(((7.44814942123594e-7)*x3148))+(((9.54335107914695e-13)*x3146))+(((1.90978190288101)*px))+(((-1.0)*x3154*x3155))+(((-1.0)*r02*x3152))+(((-1.0)*r21*x3156))+(((-1.0)*x3155*x3158))+(((-1.0)*r01*x3159))+(((-1.0)*r22*x3160))+(((-1.0)*x3151*x3157))+(((7.00275247991204e-6)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3157*x3158))+((x3151*x3155))+((r02*x3160))+(((-1.0)*r22*x3152))+((x3155*x3161))+(((-7.00275247991204e-6)*px))+(((2.60265077711611e-7)*x3146))+(((-2.73107346716569e-12)*x3148))+(((-1.0)*x3150*x3154))+(((-1.0)*x3150*x3158))+((x3148*x3161))+(((7.44814942123594e-7)*x3150))+(((7.44814942123594e-7)*x3157))+((x3148*x3151))+(((-2.73107346716569e-12)*x3155))+((r20*x3147))+(((-9.54335107914695e-13)*x3149))+((r01*x3156))+(((1.90978190288101)*pz))+(((-1.0)*x3154*x3157))+(((-1.0)*r21*x3159))+(((-1.0)*r00*x3153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3148*x3158))+(((-1.0)*x3148*x3154))+(((-1.0)*x3157*x3161))+(((-1.0)*x3150*x3161))+(((2.60265077711611e-7)*x3149))+(((-1.0)*x3150*x3151))+(((7.44814942123594e-7)*x3155))+(((2.73107346716569e-12)*x3157))+(((2.73107346716569e-12)*x3150))+((r00*x3147))+((r20*x3153))+(((7.44814942123594e-7)*x3148))+(((9.54335107914695e-13)*x3146))+(((1.90978190288101)*px))+(((-1.0)*x3154*x3155))+(((-1.0)*r02*x3152))+(((-1.0)*r21*x3156))+(((-1.0)*x3155*x3158))+(((-1.0)*r01*x3159))+(((-1.0)*r22*x3160))+(((-1.0)*x3151*x3157))+(((7.00275247991204e-6)*pz))))+IKsqr(((((-1.0)*x3157*x3158))+((x3151*x3155))+((r02*x3160))+(((-1.0)*r22*x3152))+((x3155*x3161))+(((-7.00275247991204e-6)*px))+(((2.60265077711611e-7)*x3146))+(((-2.73107346716569e-12)*x3148))+(((-1.0)*x3150*x3154))+(((-1.0)*x3150*x3158))+((x3148*x3161))+(((7.44814942123594e-7)*x3150))+(((7.44814942123594e-7)*x3157))+((x3148*x3151))+(((-2.73107346716569e-12)*x3155))+((r20*x3147))+(((-9.54335107914695e-13)*x3149))+((r01*x3156))+(((1.90978190288101)*pz))+(((-1.0)*x3154*x3157))+(((-1.0)*r21*x3159))+(((-1.0)*r00*x3153))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x3148*x3158))+(((-1.0)*x3148*x3154))+(((-1.0)*x3157*x3161))+(((-1.0)*x3150*x3161))+(((2.60265077711611e-7)*x3149))+(((-1.0)*x3150*x3151))+(((7.44814942123594e-7)*x3155))+(((2.73107346716569e-12)*x3157))+(((2.73107346716569e-12)*x3150))+((r00*x3147))+((r20*x3153))+(((7.44814942123594e-7)*x3148))+(((9.54335107914695e-13)*x3146))+(((1.90978190288101)*px))+(((-1.0)*x3154*x3155))+(((-1.0)*r02*x3152))+(((-1.0)*r21*x3156))+(((-1.0)*x3155*x3158))+(((-1.0)*r01*x3159))+(((-1.0)*r22*x3160))+(((-1.0)*x3151*x3157))+(((7.00275247991204e-6)*pz))), ((((-1.0)*x3157*x3158))+((x3151*x3155))+((r02*x3160))+(((-1.0)*r22*x3152))+((x3155*x3161))+(((-7.00275247991204e-6)*px))+(((2.60265077711611e-7)*x3146))+(((-2.73107346716569e-12)*x3148))+(((-1.0)*x3150*x3154))+(((-1.0)*x3150*x3158))+((x3148*x3161))+(((7.44814942123594e-7)*x3150))+(((7.44814942123594e-7)*x3157))+((x3148*x3151))+(((-2.73107346716569e-12)*x3155))+((r20*x3147))+(((-9.54335107914695e-13)*x3149))+((r01*x3156))+(((1.90978190288101)*pz))+(((-1.0)*x3154*x3157))+(((-1.0)*r21*x3159))+(((-1.0)*r00*x3153))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x3162=IKsin(j1);
IkReal x3163=IKcos(j1);
IkReal x3164=((1.0)*pz);
IkReal x3165=((0.391671)*cj4);
IkReal x3166=(r20*sj5);
IkReal x3167=((0.391671)*sj4);
IkReal x3168=((3.91670999980416e-6)*cj5);
IkReal x3169=((1.36279999993186e-7)*cj4);
IkReal x3170=(r21*sj3);
IkReal x3171=((0.391670999980416)*sj5);
IkReal x3172=((3.9e-7)*cj5);
IkReal x3173=(cj5*r01);
IkReal x3174=(r00*sj5);
IkReal x3175=((1.36279999993186e-7)*sj4);
IkReal x3176=(r01*sj5);
IkReal x3177=((3.91670999980416e-6)*cj3);
IkReal x3178=(cj5*r00);
IkReal x3179=((0.391670999980416)*sj3);
IkReal x3180=(cj5*r21);
IkReal x3181=(r01*sj3);
IkReal x3182=(r21*sj5);
IkReal x3183=(cj5*r20);
IkReal x3184=((0.121761000001269)*x3176);
IkReal x3185=((0.52362)*x3162);
IkReal x3186=(r02*x3175);
IkReal x3187=((3.9e-7)*x3174);
IkReal x3188=((0.121761000001269)*x3178);
IkReal x3189=((1.92e-6)*x3163);
IkReal x3190=(r01*x3172);
IkReal x3191=((1.92e-6)*x3162);
IkReal x3192=((0.121761000001269)*x3182);
IkReal x3193=((0.52362)*x3163);
IkReal x3194=(r21*x3172);
IkReal x3195=((3.9e-7)*x3166);
IkReal x3196=(r22*x3175);
IkReal x3197=((0.121761000001269)*x3183);
IkReal x3198=((0.391670999980416)*cj3*cj4);
IkReal x3199=((3.91670999980416e-6)*cj4*sj3);
IkReal x3200=((3.91670999980416e-6)*sj3*sj4);
IkReal x3201=((0.391670999980416)*cj3*sj4);
IkReal x3202=(x3169*x3173);
IkReal x3203=(x3169*x3174);
IkReal x3204=(x3166*x3169);
IkReal x3205=(x3169*x3180);
IkReal x3206=(x3197+x3196+x3195+x3194+x3164);
IkReal x3207=(x3184+x3185+x3203+x3202);
IkReal x3208=(x3186+x3187+x3188+x3189+x3190);
IkReal x3209=(x3193+x3192+x3191+x3205+x3204);
evalcond[0]=(x3208+(((-1.0)*x3167*x3173))+(((-1.0)*x3167*x3174))+px+(((-1.0)*x3207))+(((-1.0)*r02*x3165)));
evalcond[1]=(((x3166*x3167))+((x3167*x3180))+((r22*x3165))+x3209+(((-1.0)*x3206)));
evalcond[2]=(((r22*x3200))+((cj3*r20*x3168))+(((-1.0)*x3177*x3182))+x3207+(((-1.0)*x3166*x3199))+((x3166*x3198))+(((-1.0)*px))+(((-1.0)*x3208))+((x3179*x3183))+(((-1.0)*r22*x3201))+((x3180*x3198))+(((-1.0)*x3170*x3171))+(((-1.0)*cj4*x3168*x3170)));
evalcond[3]=(((x3171*x3181))+(((-1.0)*r02*x3200))+(((-1.0)*x3173*x3198))+x3209+((x3174*x3199))+(((-1.0)*cj3*r00*x3168))+((x3176*x3177))+(((-1.0)*x3206))+(((-1.0)*cj3*cj4*r00*x3171))+(((-1.0)*x3178*x3179))+((r02*x3201))+((cj4*x3168*x3181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3210=(sj1*sj4);
IkReal x3211=(cj5*r01);
IkReal x3212=(r20*sj5);
IkReal x3213=(cj4*sj1);
IkReal x3214=(r00*sj5);
IkReal x3215=(cj1*sj4);
IkReal x3216=(cj5*r21);
IkReal x3217=(cj1*cj4);
if( IKabs(((((-1.0)*r22*x3213))+((x3211*x3215))+((x3214*x3215))+(((-1.0)*x3210*x3212))+(((-1.0)*x3210*x3216))+((r02*x3217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3212*x3215))+((x3215*x3216))+((r22*x3217))+((x3210*x3211))+((x3210*x3214))+((r02*x3213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3213))+((x3211*x3215))+((x3214*x3215))+(((-1.0)*x3210*x3212))+(((-1.0)*x3210*x3216))+((r02*x3217))))+IKsqr((((x3212*x3215))+((x3215*x3216))+((r22*x3217))+((x3210*x3211))+((x3210*x3214))+((r02*x3213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x3213))+((x3211*x3215))+((x3214*x3215))+(((-1.0)*x3210*x3212))+(((-1.0)*x3210*x3216))+((r02*x3217))), (((x3212*x3215))+((x3215*x3216))+((r22*x3217))+((x3210*x3211))+((x3210*x3214))+((r02*x3213))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3218=IKcos(j2);
IkReal x3219=IKsin(j2);
IkReal x3220=(r22*sj4);
IkReal x3221=((0.99999999995)*cj3);
IkReal x3222=(r01*sj5);
IkReal x3223=((9.9999999995e-6)*cj3);
IkReal x3224=((1.36279999993186e-7)*cj4);
IkReal x3225=(cj5*r01);
IkReal x3226=(r20*sj5);
IkReal x3227=((9.9999999995e-6)*sj3);
IkReal x3228=((0.99999999995)*sj3);
IkReal x3229=(r00*sj5);
IkReal x3230=(cj5*r21);
IkReal x3231=(r02*sj4);
IkReal x3232=((1.0)*sj4);
IkReal x3233=(cj5*r20);
IkReal x3234=((1.0)*cj4);
IkReal x3235=(r21*sj5);
IkReal x3236=(cj5*r00);
IkReal x3237=(sj1*x3218);
IkReal x3238=(cj1*x3219);
IkReal x3239=(cj1*x3218);
IkReal x3240=(sj1*x3219);
IkReal x3241=(x3237+x3238);
evalcond[0]=((((-1.0)*x3229*x3232))+(((-1.0)*r02*x3234))+x3241+(((-1.0)*x3225*x3232)));
evalcond[1]=((((-1.0)*x3240))+x3239+(((-1.0)*x3230*x3232))+(((-1.0)*x3226*x3232))+(((-1.0)*r22*x3234)));
evalcond[2]=(((x3224*x3230))+(((0.121761000001269)*x3235))+(((0.391671)*x3239))+(((-3.9e-7)*x3230))+(((-1.36279999993186e-7)*x3220))+(((-0.121761000001269)*x3233))+(((-0.391671)*x3240))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((x3224*x3226))+(((0.52362)*cj1))+(((-3.9e-7)*x3226)));
evalcond[3]=((((0.391671)*x3237))+(((0.391671)*x3238))+(((0.52362)*sj1))+(((-0.121761000001269)*x3236))+(((-1.0)*px))+((x3224*x3225))+((x3224*x3229))+(((0.121761000001269)*x3222))+(((-1.92e-6)*cj1))+(((-3.9e-7)*x3225))+(((-3.9e-7)*x3229))+(((-1.36279999993186e-7)*x3231)));
evalcond[4]=(((x3223*x3235))+(((-1.0)*x3223*x3233))+(((-1.0)*cj4*x3221*x3230))+((cj4*x3226*x3227))+x3241+(((-1.0)*x3228*x3233))+((x3220*x3221))+((cj4*x3227*x3230))+(((-1.0)*x3220*x3227))+((x3228*x3235))+(((-1.0)*cj4*x3221*x3226)));
evalcond[5]=((((-1.0)*x3223*x3236))+((x3222*x3223))+((x3222*x3228))+x3240+(((-1.0)*x3228*x3236))+((cj4*x3227*x3229))+(((-1.0)*x3239))+(((-1.0)*x3227*x3231))+((cj4*x3225*x3227))+((x3221*x3231))+(((-1.0)*cj4*x3221*x3225))+(((-1.0)*cj4*x3221*x3229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3242=(r22*sj4);
IkReal x3243=((0.232536954279117)*cj5);
IkReal x3244=(cj5*r01);
IkReal x3245=(r02*sj4);
IkReal x3246=(cj5*r21);
IkReal x3247=((9.54335107914695e-13)*cj4);
IkReal x3248=((0.748006187683308)*cj4);
IkReal x3249=((8.52662144715453e-7)*cj5);
IkReal x3250=((2.60265077711611e-7)*cj4);
IkReal x3251=(r00*sj5);
IkReal x3252=((8.52662144715453e-7)*sj5);
IkReal x3253=(r20*sj5);
IkReal x3254=((0.748006187683308)*sj4);
IkReal x3255=((0.232536954279117)*sj5);
IkReal x3256=((2.74277506655963e-6)*cj4);
IkReal x3257=((2.74277506655963e-6)*sj4);
if( IKabs(((((-2.60265077711611e-7)*x3245))+(((-1.0)*x3246*x3257))+(((-1.0)*x3247*x3253))+(((-7.44814942123594e-7)*x3244))+(((-1.0)*x3253*x3257))+((x3244*x3254))+((x3244*x3250))+(((2.73107346716569e-12)*x3253))+(((-1.0)*r00*x3243))+((r20*x3249))+((r01*x3255))+(((-1.0)*r22*x3256))+((x3251*x3254))+((x3250*x3251))+(((-1.0)*r21*x3252))+((r02*x3248))+(((-7.44814942123594e-7)*x3251))+(((-1.0)*x3246*x3247))+(((7.00275247991204e-6)*pz))+(((9.54335107914695e-13)*x3242))+(((2.73107346716569e-12)*x3246))+(((-1.90978190288101)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.44814942123594e-7)*x3246))+((r00*x3249))+(((-1.0)*x3244*x3257))+(((-1.0)*r02*x3256))+(((-1.0)*x3246*x3254))+(((-1.0)*x3246*x3250))+(((-1.0)*x3247*x3251))+(((-1.0)*x3253*x3254))+(((2.73107346716569e-12)*x3251))+((r20*x3243))+(((-1.0)*x3244*x3247))+(((7.44814942123594e-7)*x3253))+(((-1.0)*x3251*x3257))+(((-1.0)*x3250*x3253))+(((-1.0)*r21*x3255))+(((1.90978190288101)*pz))+(((2.60265077711611e-7)*x3242))+(((-1.0)*r01*x3252))+(((-1.0)*r22*x3248))+(((7.00275247991204e-6)*px))+(((9.54335107914695e-13)*x3245))+(((2.73107346716569e-12)*x3244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.60265077711611e-7)*x3245))+(((-1.0)*x3246*x3257))+(((-1.0)*x3247*x3253))+(((-7.44814942123594e-7)*x3244))+(((-1.0)*x3253*x3257))+((x3244*x3254))+((x3244*x3250))+(((2.73107346716569e-12)*x3253))+(((-1.0)*r00*x3243))+((r20*x3249))+((r01*x3255))+(((-1.0)*r22*x3256))+((x3251*x3254))+((x3250*x3251))+(((-1.0)*r21*x3252))+((r02*x3248))+(((-7.44814942123594e-7)*x3251))+(((-1.0)*x3246*x3247))+(((7.00275247991204e-6)*pz))+(((9.54335107914695e-13)*x3242))+(((2.73107346716569e-12)*x3246))+(((-1.90978190288101)*px))))+IKsqr(((((7.44814942123594e-7)*x3246))+((r00*x3249))+(((-1.0)*x3244*x3257))+(((-1.0)*r02*x3256))+(((-1.0)*x3246*x3254))+(((-1.0)*x3246*x3250))+(((-1.0)*x3247*x3251))+(((-1.0)*x3253*x3254))+(((2.73107346716569e-12)*x3251))+((r20*x3243))+(((-1.0)*x3244*x3247))+(((7.44814942123594e-7)*x3253))+(((-1.0)*x3251*x3257))+(((-1.0)*x3250*x3253))+(((-1.0)*r21*x3255))+(((1.90978190288101)*pz))+(((2.60265077711611e-7)*x3242))+(((-1.0)*r01*x3252))+(((-1.0)*r22*x3248))+(((7.00275247991204e-6)*px))+(((9.54335107914695e-13)*x3245))+(((2.73107346716569e-12)*x3244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.60265077711611e-7)*x3245))+(((-1.0)*x3246*x3257))+(((-1.0)*x3247*x3253))+(((-7.44814942123594e-7)*x3244))+(((-1.0)*x3253*x3257))+((x3244*x3254))+((x3244*x3250))+(((2.73107346716569e-12)*x3253))+(((-1.0)*r00*x3243))+((r20*x3249))+((r01*x3255))+(((-1.0)*r22*x3256))+((x3251*x3254))+((x3250*x3251))+(((-1.0)*r21*x3252))+((r02*x3248))+(((-7.44814942123594e-7)*x3251))+(((-1.0)*x3246*x3247))+(((7.00275247991204e-6)*pz))+(((9.54335107914695e-13)*x3242))+(((2.73107346716569e-12)*x3246))+(((-1.90978190288101)*px))), ((((7.44814942123594e-7)*x3246))+((r00*x3249))+(((-1.0)*x3244*x3257))+(((-1.0)*r02*x3256))+(((-1.0)*x3246*x3254))+(((-1.0)*x3246*x3250))+(((-1.0)*x3247*x3251))+(((-1.0)*x3253*x3254))+(((2.73107346716569e-12)*x3251))+((r20*x3243))+(((-1.0)*x3244*x3247))+(((7.44814942123594e-7)*x3253))+(((-1.0)*x3251*x3257))+(((-1.0)*x3250*x3253))+(((-1.0)*r21*x3255))+(((1.90978190288101)*pz))+(((2.60265077711611e-7)*x3242))+(((-1.0)*r01*x3252))+(((-1.0)*r22*x3248))+(((7.00275247991204e-6)*px))+(((9.54335107914695e-13)*x3245))+(((2.73107346716569e-12)*x3244))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x3258=IKsin(j1);
IkReal x3259=IKcos(j1);
IkReal x3260=((1.0)*px);
IkReal x3261=((0.391671)*cj4);
IkReal x3262=(r20*sj5);
IkReal x3263=((0.391671)*sj4);
IkReal x3264=((3.91670999980416e-6)*cj5);
IkReal x3265=((1.36279999993186e-7)*cj4);
IkReal x3266=(r21*sj3);
IkReal x3267=((0.391670999980416)*sj5);
IkReal x3268=((3.9e-7)*cj5);
IkReal x3269=(cj5*r01);
IkReal x3270=(r00*sj5);
IkReal x3271=((1.36279999993186e-7)*sj4);
IkReal x3272=(r01*sj5);
IkReal x3273=((3.91670999980416e-6)*cj3);
IkReal x3274=(cj5*r00);
IkReal x3275=((0.391670999980416)*sj3);
IkReal x3276=(cj5*r21);
IkReal x3277=(r01*sj3);
IkReal x3278=(r21*sj5);
IkReal x3279=(cj5*r20);
IkReal x3280=(r21*x3268);
IkReal x3281=((3.9e-7)*x3262);
IkReal x3282=(r22*x3271);
IkReal x3283=((0.121761000001269)*x3279);
IkReal x3284=((1.92e-6)*x3258);
IkReal x3285=((0.121761000001269)*x3278);
IkReal x3286=((0.52362)*x3259);
IkReal x3287=((0.121761000001269)*x3272);
IkReal x3288=((1.92e-6)*x3259);
IkReal x3289=(r02*x3271);
IkReal x3290=((3.9e-7)*x3270);
IkReal x3291=((0.52362)*x3258);
IkReal x3292=((0.121761000001269)*x3274);
IkReal x3293=(r01*x3268);
IkReal x3294=((0.391670999980416)*cj3*cj4);
IkReal x3295=((3.91670999980416e-6)*cj4*sj3);
IkReal x3296=((3.91670999980416e-6)*sj3*sj4);
IkReal x3297=((0.391670999980416)*cj3*sj4);
IkReal x3298=(x3262*x3265);
IkReal x3299=(x3265*x3276);
IkReal x3300=(x3265*x3269);
IkReal x3301=(x3265*x3270);
IkReal x3302=(x3283+x3282+x3281+x3280);
IkReal x3303=(x3300+x3301+x3288+x3287);
IkReal x3304=(x3260+x3290+x3291+x3292+x3293+x3289);
IkReal x3305=(x3298+x3299+x3286+x3285+x3284);
evalcond[0]=(((x3263*x3269))+x3303+((x3263*x3270))+(((-1.0)*x3304))+((r02*x3261)));
evalcond[1]=(((x3262*x3263))+x3305+((x3263*x3276))+(((-1.0)*x3302))+(((-1.0)*pz))+((r22*x3261)));
evalcond[2]=(((r02*x3297))+(((-1.0)*cj3*cj4*r00*x3267))+x3302+((x3272*x3273))+((x3267*x3277))+((x3270*x3295))+(((-1.0)*x3274*x3275))+(((-1.0)*x3305))+(((-1.0)*x3269*x3294))+(((-1.0)*r02*x3296))+pz+((cj4*x3264*x3277))+(((-1.0)*cj3*r00*x3264)));
evalcond[3]=((((-1.0)*x3262*x3294))+x3303+((x3273*x3278))+(((-1.0)*r22*x3296))+(((-1.0)*x3275*x3279))+(((-1.0)*x3304))+(((-1.0)*x3276*x3294))+(((-1.0)*cj3*r20*x3264))+((r22*x3297))+((cj4*x3264*x3266))+((x3262*x3295))+((x3266*x3267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3306=((1.0)*sj1);
IkReal x3307=(sj4*sj5);
IkReal x3308=(cj4*r22);
IkReal x3309=(cj5*sj4);
IkReal x3310=(cj4*r02);
IkReal x3311=((1.0)*cj1);
if( IKabs(((((-1.0)*r01*x3309*x3311))+(((-1.0)*x3306*x3308))+(((-1.0)*r20*x3306*x3307))+(((-1.0)*x3310*x3311))+(((-1.0)*r21*x3306*x3309))+(((-1.0)*r00*x3307*x3311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x3307))+((cj1*r21*x3309))+(((-1.0)*x3306*x3310))+(((-1.0)*r00*x3306*x3307))+(((-1.0)*r01*x3306*x3309))+((cj1*x3308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3309*x3311))+(((-1.0)*x3306*x3308))+(((-1.0)*r20*x3306*x3307))+(((-1.0)*x3310*x3311))+(((-1.0)*r21*x3306*x3309))+(((-1.0)*r00*x3307*x3311))))+IKsqr((((cj1*r20*x3307))+((cj1*r21*x3309))+(((-1.0)*x3306*x3310))+(((-1.0)*r00*x3306*x3307))+(((-1.0)*r01*x3306*x3309))+((cj1*x3308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x3309*x3311))+(((-1.0)*x3306*x3308))+(((-1.0)*r20*x3306*x3307))+(((-1.0)*x3310*x3311))+(((-1.0)*r21*x3306*x3309))+(((-1.0)*r00*x3307*x3311))), (((cj1*r20*x3307))+((cj1*r21*x3309))+(((-1.0)*x3306*x3310))+(((-1.0)*r00*x3306*x3307))+(((-1.0)*r01*x3306*x3309))+((cj1*x3308))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3312=IKcos(j2);
IkReal x3313=IKsin(j2);
IkReal x3314=(r22*sj4);
IkReal x3315=((0.99999999995)*cj3);
IkReal x3316=(r01*sj5);
IkReal x3317=((9.9999999995e-6)*cj3);
IkReal x3318=((1.36279999993186e-7)*cj4);
IkReal x3319=(cj5*r01);
IkReal x3320=((0.99999999995)*sj3);
IkReal x3321=(r20*sj5);
IkReal x3322=((9.9999999995e-6)*sj3);
IkReal x3323=(r00*sj5);
IkReal x3324=(cj5*r21);
IkReal x3325=(r02*sj4);
IkReal x3326=((1.0)*sj1);
IkReal x3327=(cj5*r20);
IkReal x3328=((1.0)*sj4);
IkReal x3329=((1.0)*cj4);
IkReal x3330=((0.391671)*sj1);
IkReal x3331=(r21*sj5);
IkReal x3332=(cj5*r00);
IkReal x3333=(cj1*x3312);
IkReal x3334=(cj1*x3313);
IkReal x3335=(x3313*x3326);
evalcond[0]=((((-1.0)*x3324*x3328))+x3333+(((-1.0)*x3321*x3328))+(((-1.0)*x3335))+(((-1.0)*r22*x3329)));
evalcond[1]=((((-1.0)*r02*x3329))+(((-1.0)*x3319*x3328))+(((-1.0)*x3334))+(((-1.0)*x3323*x3328))+(((-1.0)*x3312*x3326)));
evalcond[2]=((((0.121761000001269)*x3331))+(((-1.36279999993186e-7)*x3314))+(((-1.0)*x3313*x3330))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-0.121761000001269)*x3327))+(((0.391671)*x3333))+(((-3.9e-7)*x3324))+(((-3.9e-7)*x3321))+((x3318*x3324))+((x3318*x3321)));
evalcond[3]=((((1.92e-6)*cj1))+(((0.121761000001269)*x3316))+(((-3.9e-7)*x3319))+(((-0.121761000001269)*x3332))+(((-1.0)*x3312*x3330))+(((-1.0)*px))+(((-0.391671)*x3334))+((x3318*x3319))+(((-0.52362)*sj1))+(((-1.36279999993186e-7)*x3325))+(((-3.9e-7)*x3323))+((x3318*x3323)));
evalcond[4]=(((x3320*x3331))+x3334+((x3317*x3331))+(((-1.0)*x3320*x3327))+(((-1.0)*x3317*x3327))+((cj4*x3322*x3324))+(((-1.0)*cj4*x3315*x3324))+(((-1.0)*cj4*x3315*x3321))+((x3314*x3315))+(((-1.0)*x3314*x3322))+((sj1*x3312))+((cj4*x3321*x3322)));
evalcond[5]=(((x3316*x3317))+(((-1.0)*x3320*x3332))+x3333+(((-1.0)*x3317*x3332))+(((-1.0)*x3322*x3325))+(((-1.0)*x3335))+((cj4*x3322*x3323))+((x3316*x3320))+(((-1.0)*cj4*x3315*x3319))+((cj4*x3319*x3322))+(((-1.0)*cj4*x3315*x3323))+((x3315*x3325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3336=(r22*sj4);
IkReal x3337=((0.232536954279117)*cj5);
IkReal x3338=((9.54335107914695e-13)*cj4);
IkReal x3339=(cj5*r21);
IkReal x3340=(cj4*r22);
IkReal x3341=(cj4*r12);
IkReal x3342=(r10*sj5);
IkReal x3343=((2.60265077711611e-7)*cj4);
IkReal x3344=(r21*sj5);
IkReal x3345=(r11*sj5);
IkReal x3346=(cj5*r11);
IkReal x3347=((8.52662144715453e-7)*cj5);
IkReal x3348=((0.748006187683308)*sj4);
IkReal x3349=(r20*sj5);
IkReal x3350=((2.74277506655963e-6)*sj4);
IkReal x3351=(r12*sj4);
if( IKabs(((((-1.0)*x3339*x3350))+((x3343*x3346))+(((-1.0)*x3349*x3350))+((x3342*x3348))+((x3342*x3343))+(((2.73107346716569e-12)*x3339))+(((-7.44814942123594e-7)*x3342))+(((-7.44814942123594e-7)*x3346))+(((0.232536954279117)*x3345))+(((-1.0)*x3338*x3339))+(((-8.52662144715453e-7)*x3344))+((x3346*x3348))+(((-1.0)*x3338*x3349))+(((-2.60265077711611e-7)*x3351))+(((2.73107346716569e-12)*x3349))+(((-2.74277506655963e-6)*x3340))+(((0.748006187683308)*x3341))+(((-1.0)*r10*x3337))+(((9.54335107914695e-13)*x3336))+((r20*x3347))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.44814942123594e-7)*x3339))+(((-0.748006187683308)*x3340))+((r10*x3347))+(((-1.0)*x3343*x3349))+(((-1.0)*x3346*x3350))+(((-1.0)*x3348*x3349))+(((-8.52662144715453e-7)*x3345))+(((-0.232536954279117)*x3344))+(((-1.0)*x3338*x3346))+(((-1.0)*x3338*x3342))+(((2.60265077711611e-7)*x3336))+(((2.73107346716569e-12)*x3346))+(((2.73107346716569e-12)*x3342))+(((9.54335107914695e-13)*x3351))+(((-1.0)*x3342*x3350))+(((-2.74277506655963e-6)*x3341))+(((1.90978190288101)*pz))+(((-1.0)*x3339*x3343))+(((-1.0)*x3339*x3348))+(((7.44814942123594e-7)*x3349))+(((7.00275247991204e-6)*py))+((r20*x3337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3339*x3350))+((x3343*x3346))+(((-1.0)*x3349*x3350))+((x3342*x3348))+((x3342*x3343))+(((2.73107346716569e-12)*x3339))+(((-7.44814942123594e-7)*x3342))+(((-7.44814942123594e-7)*x3346))+(((0.232536954279117)*x3345))+(((-1.0)*x3338*x3339))+(((-8.52662144715453e-7)*x3344))+((x3346*x3348))+(((-1.0)*x3338*x3349))+(((-2.60265077711611e-7)*x3351))+(((2.73107346716569e-12)*x3349))+(((-2.74277506655963e-6)*x3340))+(((0.748006187683308)*x3341))+(((-1.0)*r10*x3337))+(((9.54335107914695e-13)*x3336))+((r20*x3347))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))))+IKsqr(((((7.44814942123594e-7)*x3339))+(((-0.748006187683308)*x3340))+((r10*x3347))+(((-1.0)*x3343*x3349))+(((-1.0)*x3346*x3350))+(((-1.0)*x3348*x3349))+(((-8.52662144715453e-7)*x3345))+(((-0.232536954279117)*x3344))+(((-1.0)*x3338*x3346))+(((-1.0)*x3338*x3342))+(((2.60265077711611e-7)*x3336))+(((2.73107346716569e-12)*x3346))+(((2.73107346716569e-12)*x3342))+(((9.54335107914695e-13)*x3351))+(((-1.0)*x3342*x3350))+(((-2.74277506655963e-6)*x3341))+(((1.90978190288101)*pz))+(((-1.0)*x3339*x3343))+(((-1.0)*x3339*x3348))+(((7.44814942123594e-7)*x3349))+(((7.00275247991204e-6)*py))+((r20*x3337))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x3339*x3350))+((x3343*x3346))+(((-1.0)*x3349*x3350))+((x3342*x3348))+((x3342*x3343))+(((2.73107346716569e-12)*x3339))+(((-7.44814942123594e-7)*x3342))+(((-7.44814942123594e-7)*x3346))+(((0.232536954279117)*x3345))+(((-1.0)*x3338*x3339))+(((-8.52662144715453e-7)*x3344))+((x3346*x3348))+(((-1.0)*x3338*x3349))+(((-2.60265077711611e-7)*x3351))+(((2.73107346716569e-12)*x3349))+(((-2.74277506655963e-6)*x3340))+(((0.748006187683308)*x3341))+(((-1.0)*r10*x3337))+(((9.54335107914695e-13)*x3336))+((r20*x3347))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))), ((((7.44814942123594e-7)*x3339))+(((-0.748006187683308)*x3340))+((r10*x3347))+(((-1.0)*x3343*x3349))+(((-1.0)*x3346*x3350))+(((-1.0)*x3348*x3349))+(((-8.52662144715453e-7)*x3345))+(((-0.232536954279117)*x3344))+(((-1.0)*x3338*x3346))+(((-1.0)*x3338*x3342))+(((2.60265077711611e-7)*x3336))+(((2.73107346716569e-12)*x3346))+(((2.73107346716569e-12)*x3342))+(((9.54335107914695e-13)*x3351))+(((-1.0)*x3342*x3350))+(((-2.74277506655963e-6)*x3341))+(((1.90978190288101)*pz))+(((-1.0)*x3339*x3343))+(((-1.0)*x3339*x3348))+(((7.44814942123594e-7)*x3349))+(((7.00275247991204e-6)*py))+((r20*x3337))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x3352=IKsin(j1);
IkReal x3353=IKcos(j1);
IkReal x3354=((1.0)*py);
IkReal x3355=(cj5*r10);
IkReal x3356=((3.91670999980416e-6)*sj3);
IkReal x3357=(r12*sj4);
IkReal x3358=(r20*sj5);
IkReal x3359=((0.391671)*sj4);
IkReal x3360=((0.391670999980416)*sj3);
IkReal x3361=((3.91670999980416e-6)*cj3);
IkReal x3362=(cj5*r20);
IkReal x3363=((1.36279999993186e-7)*cj4);
IkReal x3364=(cj5*r11);
IkReal x3365=(r21*sj5);
IkReal x3366=(cj5*r21);
IkReal x3367=(r22*sj4);
IkReal x3368=(r10*sj5);
IkReal x3369=(r11*sj5);
IkReal x3370=((0.391671)*cj4);
IkReal x3371=((0.391670999980416)*cj3);
IkReal x3372=((3.9e-7)*x3366);
IkReal x3373=((3.9e-7)*x3358);
IkReal x3374=((1.36279999993186e-7)*x3367);
IkReal x3375=((0.121761000001269)*x3362);
IkReal x3376=((1.92e-6)*x3352);
IkReal x3377=((0.121761000001269)*x3365);
IkReal x3378=((0.52362)*x3353);
IkReal x3379=((0.121761000001269)*x3369);
IkReal x3380=((1.92e-6)*x3353);
IkReal x3381=((1.36279999993186e-7)*x3357);
IkReal x3382=((3.9e-7)*x3368);
IkReal x3383=((0.121761000001269)*x3355);
IkReal x3384=((0.52362)*x3352);
IkReal x3385=((3.9e-7)*x3364);
IkReal x3386=(cj4*x3371);
IkReal x3387=(x3358*x3363);
IkReal x3388=(x3363*x3366);
IkReal x3389=(x3363*x3368);
IkReal x3390=(x3363*x3364);
IkReal x3391=(x3375+x3374+x3373+x3372);
IkReal x3392=(x3379+x3380+x3389+x3390);
IkReal x3393=(x3378+x3377+x3376+x3387+x3388);
IkReal x3394=(x3354+x3384+x3385+x3382+x3383+x3381);
evalcond[0]=(((r12*x3370))+x3392+(((-1.0)*x3394))+((x3359*x3364))+((x3359*x3368)));
evalcond[1]=(x3393+((r22*x3370))+(((-1.0)*pz))+((x3358*x3359))+(((-1.0)*x3391))+((x3359*x3366)));
evalcond[2]=(x3391+(((-1.0)*x3368*x3386))+(((-1.0)*x3356*x3357))+((x3360*x3369))+((x3361*x3369))+((x3357*x3371))+pz+(((-1.0)*x3355*x3361))+(((-1.0)*x3355*x3360))+(((-1.0)*x3393))+((cj4*x3356*x3364))+((cj4*x3356*x3368))+(((-1.0)*x3364*x3386)));
evalcond[3]=((((-1.0)*x3361*x3362))+(((-1.0)*x3360*x3362))+x3392+((cj4*x3356*x3358))+((x3360*x3365))+((x3361*x3365))+((x3367*x3371))+(((-1.0)*x3394))+((cj4*x3356*x3366))+(((-1.0)*x3356*x3367))+(((-1.0)*x3358*x3386))+(((-1.0)*x3366*x3386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3395=((1.0)*sj1);
IkReal x3396=(sj4*sj5);
IkReal x3397=(cj4*r22);
IkReal x3398=(cj4*r12);
IkReal x3399=((1.0)*cj1);
IkReal x3400=(cj5*r21*sj4);
IkReal x3401=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x3398*x3399))+(((-1.0)*x3399*x3401))+(((-1.0)*x3395*x3397))+(((-1.0)*r20*x3395*x3396))+(((-1.0)*x3395*x3400))+(((-1.0)*r10*x3396*x3399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x3395*x3396))+((cj1*x3400))+(((-1.0)*x3395*x3398))+(((-1.0)*x3395*x3401))+((cj1*r20*x3396))+((cj1*x3397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3398*x3399))+(((-1.0)*x3399*x3401))+(((-1.0)*x3395*x3397))+(((-1.0)*r20*x3395*x3396))+(((-1.0)*x3395*x3400))+(((-1.0)*r10*x3396*x3399))))+IKsqr(((((-1.0)*r10*x3395*x3396))+((cj1*x3400))+(((-1.0)*x3395*x3398))+(((-1.0)*x3395*x3401))+((cj1*r20*x3396))+((cj1*x3397))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3398*x3399))+(((-1.0)*x3399*x3401))+(((-1.0)*x3395*x3397))+(((-1.0)*r20*x3395*x3396))+(((-1.0)*x3395*x3400))+(((-1.0)*r10*x3396*x3399))), ((((-1.0)*r10*x3395*x3396))+((cj1*x3400))+(((-1.0)*x3395*x3398))+(((-1.0)*x3395*x3401))+((cj1*r20*x3396))+((cj1*x3397))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3402=IKcos(j2);
IkReal x3403=IKsin(j2);
IkReal x3404=(r22*sj4);
IkReal x3405=(cj5*r10);
IkReal x3406=((0.99999999995)*cj3);
IkReal x3407=((9.9999999995e-6)*sj3);
IkReal x3408=((1.36279999993186e-7)*cj4);
IkReal x3409=(cj5*r11);
IkReal x3410=(cj5*r21);
IkReal x3411=(r10*sj5);
IkReal x3412=((1.0)*sj4);
IkReal x3413=((1.0)*sj1);
IkReal x3414=((9.9999999995e-6)*cj3);
IkReal x3415=(cj5*r20);
IkReal x3416=(r20*sj5);
IkReal x3417=((1.0)*cj4);
IkReal x3418=((0.99999999995)*sj3);
IkReal x3419=((0.391671)*sj1);
IkReal x3420=((0.121761000001269)*sj5);
IkReal x3421=(r11*sj5);
IkReal x3422=(r12*sj4);
IkReal x3423=(r21*sj5);
IkReal x3424=(cj1*x3402);
IkReal x3425=(cj1*x3403);
IkReal x3426=(cj4*x3416);
IkReal x3427=(x3403*x3413);
evalcond[0]=((((-1.0)*r22*x3417))+(((-1.0)*x3412*x3416))+(((-1.0)*x3427))+x3424+(((-1.0)*x3410*x3412)));
evalcond[1]=((((-1.0)*x3402*x3413))+(((-1.0)*x3411*x3412))+(((-1.0)*r12*x3417))+(((-1.0)*x3425))+(((-1.0)*x3409*x3412)));
evalcond[2]=((((-3.9e-7)*x3416))+(((-3.9e-7)*x3410))+((x3408*x3416))+((x3408*x3410))+(((-1.36279999993186e-7)*x3404))+(((-0.121761000001269)*x3415))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((r21*x3420))+(((0.391671)*x3424))+(((-1.0)*x3403*x3419)));
evalcond[3]=(((x3408*x3409))+(((1.92e-6)*cj1))+(((-1.0)*x3402*x3419))+(((-3.9e-7)*x3411))+((x3408*x3411))+(((-0.121761000001269)*x3405))+(((-1.0)*py))+(((-1.36279999993186e-7)*x3422))+(((-0.52362)*sj1))+(((-0.391671)*x3425))+((r11*x3420))+(((-3.9e-7)*x3409)));
evalcond[4]=((((-1.0)*x3415*x3418))+(((-1.0)*x3404*x3407))+((x3418*x3423))+((sj1*x3402))+(((-1.0)*x3406*x3426))+(((-1.0)*x3414*x3415))+x3425+((x3414*x3423))+((x3404*x3406))+((cj4*x3407*x3410))+(((-1.0)*cj4*x3406*x3410))+((x3407*x3426)));
evalcond[5]=(((x3418*x3421))+(((-1.0)*x3405*x3414))+(((-1.0)*x3405*x3418))+(((-1.0)*x3427))+(((-1.0)*x3407*x3422))+x3424+(((-1.0)*cj4*x3406*x3409))+((x3406*x3422))+((x3414*x3421))+((cj4*x3407*x3409))+((cj4*x3407*x3411))+(((-1.0)*cj4*x3406*x3411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3428=(r22*sj4);
IkReal x3429=((0.232536954279117)*cj5);
IkReal x3430=(cj4*cj5);
IkReal x3431=(cj4*r22);
IkReal x3432=(cj4*r12);
IkReal x3433=(r21*sj5);
IkReal x3434=(r11*sj5);
IkReal x3435=(r10*sj5);
IkReal x3436=((7.44814942123594e-7)*cj5);
IkReal x3437=(cj5*r11);
IkReal x3438=((8.52662144715453e-7)*cj5);
IkReal x3439=((0.748006187683308)*sj4);
IkReal x3440=(r20*sj5);
IkReal x3441=((2.74277506655963e-6)*sj4);
IkReal x3442=(cj5*r21);
IkReal x3443=(r12*sj4);
IkReal x3444=(cj4*x3435);
if( IKabs(((((-9.54335107914695e-13)*r21*x3430))+(((-8.52662144715453e-7)*x3433))+(((-0.748006187683308)*x3432))+(((-2.60265077711611e-7)*r11*x3430))+(((9.54335107914695e-13)*x3428))+(((2.73107346716569e-12)*x3440))+(((2.73107346716569e-12)*x3442))+(((2.60265077711611e-7)*x3443))+((r10*x3429))+(((-1.0)*x3437*x3439))+((r20*x3438))+(((-2.60265077711611e-7)*x3444))+(((-1.0)*x3441*x3442))+(((-2.74277506655963e-6)*x3431))+(((1.90978190288101)*py))+(((-1.0)*x3435*x3439))+(((-0.232536954279117)*x3434))+((r11*x3436))+(((7.44814942123594e-7)*x3435))+(((7.00275247991204e-6)*pz))+(((-1.0)*x3440*x3441))+(((-9.54335107914695e-13)*cj4*x3440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.748006187683308)*x3431))+(((8.52662144715453e-7)*x3434))+(((-2.60265077711611e-7)*cj4*x3440))+(((-7.00275247991204e-6)*py))+((r20*x3429))+(((-1.0)*r10*x3438))+(((-1.0)*x3439*x3442))+(((-1.0)*x3439*x3440))+(((-2.60265077711611e-7)*r21*x3430))+(((2.74277506655963e-6)*x3432))+((x3435*x3441))+((x3437*x3441))+(((7.44814942123594e-7)*x3440))+(((2.60265077711611e-7)*x3428))+(((1.90978190288101)*pz))+((r21*x3436))+(((-0.232536954279117)*x3433))+(((-2.73107346716569e-12)*x3437))+(((-2.73107346716569e-12)*x3435))+(((9.54335107914695e-13)*r11*x3430))+(((9.54335107914695e-13)*x3444))+(((-9.54335107914695e-13)*x3443)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-9.54335107914695e-13)*r21*x3430))+(((-8.52662144715453e-7)*x3433))+(((-0.748006187683308)*x3432))+(((-2.60265077711611e-7)*r11*x3430))+(((9.54335107914695e-13)*x3428))+(((2.73107346716569e-12)*x3440))+(((2.73107346716569e-12)*x3442))+(((2.60265077711611e-7)*x3443))+((r10*x3429))+(((-1.0)*x3437*x3439))+((r20*x3438))+(((-2.60265077711611e-7)*x3444))+(((-1.0)*x3441*x3442))+(((-2.74277506655963e-6)*x3431))+(((1.90978190288101)*py))+(((-1.0)*x3435*x3439))+(((-0.232536954279117)*x3434))+((r11*x3436))+(((7.44814942123594e-7)*x3435))+(((7.00275247991204e-6)*pz))+(((-1.0)*x3440*x3441))+(((-9.54335107914695e-13)*cj4*x3440))))+IKsqr(((((-0.748006187683308)*x3431))+(((8.52662144715453e-7)*x3434))+(((-2.60265077711611e-7)*cj4*x3440))+(((-7.00275247991204e-6)*py))+((r20*x3429))+(((-1.0)*r10*x3438))+(((-1.0)*x3439*x3442))+(((-1.0)*x3439*x3440))+(((-2.60265077711611e-7)*r21*x3430))+(((2.74277506655963e-6)*x3432))+((x3435*x3441))+((x3437*x3441))+(((7.44814942123594e-7)*x3440))+(((2.60265077711611e-7)*x3428))+(((1.90978190288101)*pz))+((r21*x3436))+(((-0.232536954279117)*x3433))+(((-2.73107346716569e-12)*x3437))+(((-2.73107346716569e-12)*x3435))+(((9.54335107914695e-13)*r11*x3430))+(((9.54335107914695e-13)*x3444))+(((-9.54335107914695e-13)*x3443))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-9.54335107914695e-13)*r21*x3430))+(((-8.52662144715453e-7)*x3433))+(((-0.748006187683308)*x3432))+(((-2.60265077711611e-7)*r11*x3430))+(((9.54335107914695e-13)*x3428))+(((2.73107346716569e-12)*x3440))+(((2.73107346716569e-12)*x3442))+(((2.60265077711611e-7)*x3443))+((r10*x3429))+(((-1.0)*x3437*x3439))+((r20*x3438))+(((-2.60265077711611e-7)*x3444))+(((-1.0)*x3441*x3442))+(((-2.74277506655963e-6)*x3431))+(((1.90978190288101)*py))+(((-1.0)*x3435*x3439))+(((-0.232536954279117)*x3434))+((r11*x3436))+(((7.44814942123594e-7)*x3435))+(((7.00275247991204e-6)*pz))+(((-1.0)*x3440*x3441))+(((-9.54335107914695e-13)*cj4*x3440))), ((((-0.748006187683308)*x3431))+(((8.52662144715453e-7)*x3434))+(((-2.60265077711611e-7)*cj4*x3440))+(((-7.00275247991204e-6)*py))+((r20*x3429))+(((-1.0)*r10*x3438))+(((-1.0)*x3439*x3442))+(((-1.0)*x3439*x3440))+(((-2.60265077711611e-7)*r21*x3430))+(((2.74277506655963e-6)*x3432))+((x3435*x3441))+((x3437*x3441))+(((7.44814942123594e-7)*x3440))+(((2.60265077711611e-7)*x3428))+(((1.90978190288101)*pz))+((r21*x3436))+(((-0.232536954279117)*x3433))+(((-2.73107346716569e-12)*x3437))+(((-2.73107346716569e-12)*x3435))+(((9.54335107914695e-13)*r11*x3430))+(((9.54335107914695e-13)*x3444))+(((-9.54335107914695e-13)*x3443))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x3445=IKsin(j1);
IkReal x3446=IKcos(j1);
IkReal x3447=((1.0)*pz);
IkReal x3448=(cj5*r10);
IkReal x3449=((3.91670999980416e-6)*sj3);
IkReal x3450=(r12*sj4);
IkReal x3451=(r20*sj5);
IkReal x3452=((0.391671)*sj4);
IkReal x3453=((0.391670999980416)*sj3);
IkReal x3454=((3.91670999980416e-6)*cj3);
IkReal x3455=(cj5*r20);
IkReal x3456=((1.36279999993186e-7)*cj4);
IkReal x3457=(cj5*r11);
IkReal x3458=(r21*sj5);
IkReal x3459=(cj5*r21);
IkReal x3460=(r22*sj4);
IkReal x3461=(r10*sj5);
IkReal x3462=(r11*sj5);
IkReal x3463=((0.391671)*cj4);
IkReal x3464=((0.391670999980416)*cj3);
IkReal x3465=((0.52362)*x3445);
IkReal x3466=((0.121761000001269)*x3462);
IkReal x3467=((1.36279999993186e-7)*x3450);
IkReal x3468=((3.9e-7)*x3461);
IkReal x3469=((0.121761000001269)*x3448);
IkReal x3470=((1.92e-6)*x3446);
IkReal x3471=((3.9e-7)*x3457);
IkReal x3472=((1.92e-6)*x3445);
IkReal x3473=((0.121761000001269)*x3458);
IkReal x3474=((0.52362)*x3446);
IkReal x3475=((3.9e-7)*x3459);
IkReal x3476=((3.9e-7)*x3451);
IkReal x3477=((1.36279999993186e-7)*x3460);
IkReal x3478=((0.121761000001269)*x3455);
IkReal x3479=(cj4*x3464);
IkReal x3480=(x3456*x3461);
IkReal x3481=(x3456*x3457);
IkReal x3482=(x3451*x3456);
IkReal x3483=(x3456*x3459);
IkReal x3484=(x3447+x3475+x3476+x3477+x3478);
IkReal x3485=(x3481+x3480+x3466+x3465);
IkReal x3486=(x3470+x3471+x3467+x3469+x3468);
IkReal x3487=(x3483+x3482+x3474+x3472+x3473);
evalcond[0]=(x3486+(((-1.0)*x3452*x3461))+(((-1.0)*r12*x3463))+py+(((-1.0)*x3485))+(((-1.0)*x3452*x3457)));
evalcond[1]=(x3487+((x3452*x3459))+(((-1.0)*x3484))+((r22*x3463))+((x3451*x3452)));
evalcond[2]=((((-1.0)*x3453*x3458))+(((-1.0)*cj4*x3449*x3459))+(((-1.0)*cj4*x3449*x3451))+((x3453*x3455))+(((-1.0)*x3460*x3464))+x3485+((x3449*x3460))+(((-1.0)*x3454*x3458))+(((-1.0)*py))+((x3451*x3479))+((x3459*x3479))+((x3454*x3455))+(((-1.0)*x3486)));
evalcond[3]=(((cj4*x3449*x3457))+(((-1.0)*x3461*x3479))+x3487+((x3453*x3462))+((x3454*x3462))+(((-1.0)*x3448*x3454))+(((-1.0)*x3448*x3453))+((cj4*x3449*x3461))+((x3450*x3464))+(((-1.0)*x3484))+(((-1.0)*x3449*x3450))+(((-1.0)*x3457*x3479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3488=((1.0)*sj1);
IkReal x3489=(sj4*sj5);
IkReal x3490=(cj4*r12);
IkReal x3491=(cj4*r22);
IkReal x3492=(cj5*sj4);
IkReal x3493=(cj1*x3492);
if( IKabs(((((-1.0)*x3488*x3491))+(((-1.0)*r20*x3488*x3489))+(((-1.0)*r21*x3488*x3492))+((r11*x3493))+((cj1*x3490))+((cj1*r10*x3489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x3492))+((r10*sj1*x3489))+((cj1*r20*x3489))+((cj1*x3491))+((r21*x3493))+((sj1*x3490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3488*x3491))+(((-1.0)*r20*x3488*x3489))+(((-1.0)*r21*x3488*x3492))+((r11*x3493))+((cj1*x3490))+((cj1*r10*x3489))))+IKsqr((((r11*sj1*x3492))+((r10*sj1*x3489))+((cj1*r20*x3489))+((cj1*x3491))+((r21*x3493))+((sj1*x3490))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3488*x3491))+(((-1.0)*r20*x3488*x3489))+(((-1.0)*r21*x3488*x3492))+((r11*x3493))+((cj1*x3490))+((cj1*r10*x3489))), (((r11*sj1*x3492))+((r10*sj1*x3489))+((cj1*r20*x3489))+((cj1*x3491))+((r21*x3493))+((sj1*x3490))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3494=IKcos(j2);
IkReal x3495=IKsin(j2);
IkReal x3496=(r22*sj4);
IkReal x3497=(cj5*r10);
IkReal x3498=((0.99999999995)*cj3);
IkReal x3499=((9.9999999995e-6)*sj3);
IkReal x3500=((1.36279999993186e-7)*cj4);
IkReal x3501=(cj5*r11);
IkReal x3502=(cj5*r21);
IkReal x3503=(r10*sj5);
IkReal x3504=((1.0)*sj4);
IkReal x3505=(r12*sj4);
IkReal x3506=((9.9999999995e-6)*cj3);
IkReal x3507=(cj5*r20);
IkReal x3508=(r20*sj5);
IkReal x3509=((1.0)*cj4);
IkReal x3510=((0.99999999995)*sj3);
IkReal x3511=((0.121761000001269)*sj5);
IkReal x3512=(r11*sj5);
IkReal x3513=(r21*sj5);
IkReal x3514=(sj1*x3494);
IkReal x3515=(cj1*x3495);
IkReal x3516=(cj1*x3494);
IkReal x3517=(cj4*x3508);
IkReal x3518=(sj1*x3495);
IkReal x3519=(x3515+x3514);
evalcond[0]=((((-1.0)*r12*x3509))+x3519+(((-1.0)*x3501*x3504))+(((-1.0)*x3503*x3504)));
evalcond[1]=(x3516+(((-1.0)*x3502*x3504))+(((-1.0)*r22*x3509))+(((-1.0)*x3504*x3508))+(((-1.0)*x3518)));
evalcond[2]=((((-0.121761000001269)*x3507))+((x3500*x3502))+((x3500*x3508))+((r21*x3511))+(((0.391671)*x3516))+(((-0.391671)*x3518))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x3496))+(((-3.9e-7)*x3502))+(((-3.9e-7)*x3508)));
evalcond[3]=((((-0.121761000001269)*x3497))+((x3500*x3503))+((x3500*x3501))+(((0.391671)*x3515))+(((0.391671)*x3514))+(((0.52362)*sj1))+((r11*x3511))+(((-1.0)*py))+(((-1.92e-6)*cj1))+(((-3.9e-7)*x3503))+(((-3.9e-7)*x3501))+(((-1.36279999993186e-7)*x3505)));
evalcond[4]=((((-1.0)*x3506*x3507))+((x3506*x3513))+((x3510*x3513))+(((-1.0)*x3496*x3499))+x3519+((x3496*x3498))+(((-1.0)*x3498*x3517))+((cj4*x3499*x3502))+((x3499*x3517))+(((-1.0)*x3507*x3510))+(((-1.0)*cj4*x3498*x3502)));
evalcond[5]=(((x3498*x3505))+((x3506*x3512))+((x3510*x3512))+x3518+((cj4*x3499*x3501))+((cj4*x3499*x3503))+(((-1.0)*x3497*x3510))+(((-1.0)*x3499*x3505))+(((-1.0)*x3516))+(((-1.0)*x3497*x3506))+(((-1.0)*cj4*x3498*x3501))+(((-1.0)*cj4*x3498*x3503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3520=(r22*sj4);
IkReal x3521=(r10*sj5);
IkReal x3522=(cj0*r21);
IkReal x3523=(sj3*sj5);
IkReal x3524=(r20*sj5);
IkReal x3525=((0.391671)*sj4);
IkReal x3526=(cj3*cj5);
IkReal x3527=((9791774.99951041)*cj4);
IkReal x3528=((1.36279999993186e-7)*cj4);
IkReal x3529=(cj5*r21);
IkReal x3530=(cj0*r20);
IkReal x3531=(cj5*r10);
IkReal x3532=((26704006.3814773)*cj4);
IkReal x3533=(r11*sj5);
IkReal x3534=(cj0*cj3);
IkReal x3535=((929152.781203542)*cj4);
IkReal x3536=(cj5*r11);
IkReal x3537=(r12*sj4);
IkReal x3538=(cj0*sj3);
IkReal x3539=(cj5*sj3);
IkReal x3540=((2670400638147.73)*cj4);
IkReal x3541=(cj3*sj5);
IkReal x3542=((-3.40699999982965)*cj4);
IkReal x3543=((-97.9177499951041)*cj4);
IkReal x3544=(((x3525*x3529))+(((-1.36279999993186e-7)*x3520))+((x3524*x3525))+((x3524*x3528))+(((0.121761000001269)*r21*sj5))+((x3528*x3529))+(((-1.0)*pz))+(((0.391671)*cj4*r22))+(((-3.9e-7)*x3529))+(((-3.9e-7)*x3524))+(((-0.121761000001269)*cj5*r20)));
IkReal x3545=(cj0*x3544);
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(((((-25000000.0)*x3545))+(((-26704006.3814773)*x3520*x3538))+((x3535*x3536))+(((-2659007.8125)*x3521))+(((-1.0)*x3522*x3526*x3540))+(((26704006.3814773)*x3522*x3541))+((x3521*x3535))+(((-2670400638147.73)*x3530*x3539))+(((-6817968750000.0)*py))+(((10486035937.5)*sj0))+(((-929152.781203542)*x3537))+((x3523*x3530*x3532))+(((-830162692977.399)*x3531))+(((2670400638147.73)*x3522*x3523))+(((-26704006.3814773)*x3526*x3530))+(((830162692977.399)*x3533))+(((2670400638147.73)*x3520*x3534))+(((-1.0)*x3524*x3534*x3540))+((x3522*x3532*x3539))+(((-2659007.8125)*x3536)))),IkReal((((x3524*x3527*x3534))+((x3521*x3542))+(((9.75)*x3536))+(((97.9177499951041)*x3526*x3530))+(((97.9177499951041)*x3520*x3538))+(((-38450.0)*sj0))+(((-3044025.00003172)*x3533))+((x3522*x3526*x3527))+(((25000000.0)*py))+(((3.40699999982965)*x3537))+(((-97.9177499951041)*x3522*x3541))+(((-9791774.99951041)*x3522*x3523))+(((3044025.00003172)*x3531))+(((9.75)*x3521))+((x3522*x3539*x3543))+(((-6817968750000.0)*x3545))+(((9791774.99951041)*x3530*x3539))+((x3536*x3542))+((x3523*x3530*x3543))+(((-9791774.99951041)*x3520*x3534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
CheckValue<IkReal> x3547=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x3547.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3546.value)+(((1.5707963267949)*(x3547.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x3548=IKcos(j1);
IkReal x3549=cj0*cj0;
IkReal x3550=IKsin(j1);
IkReal x3551=sj0*sj0;
IkReal x3552=((1.36279999993186e-7)*cj0);
IkReal x3553=(r12*sj4);
IkReal x3554=(r21*sj5);
IkReal x3555=((0.391670999980416)*sj3);
IkReal x3556=(r20*sj5);
IkReal x3557=((0.391671)*sj4);
IkReal x3558=((3.9e-7)*cj5);
IkReal x3559=((1.0)*pz);
IkReal x3560=((3.91670999980416e-6)*cj3);
IkReal x3561=(r00*sj5);
IkReal x3562=(r11*sj5);
IkReal x3563=(cj0*sj0);
IkReal x3564=(cj5*r11);
IkReal x3565=(r02*sj4);
IkReal x3566=(cj0*r21);
IkReal x3567=((3.9e-7)*sj0);
IkReal x3568=((1.36279999993186e-7)*sj0);
IkReal x3569=(r01*sj0);
IkReal x3570=((0.121761000001269)*sj5);
IkReal x3571=(cj5*r10);
IkReal x3572=((3.91670999980416e-6)*sj3);
IkReal x3573=(cj5*r00);
IkReal x3574=(cj0*r01);
IkReal x3575=((1.36279999993186e-7)*cj4);
IkReal x3576=(r22*sj4);
IkReal x3577=((3.9e-7)*cj0);
IkReal x3578=(cj4*sj0);
IkReal x3579=((0.391671)*r12);
IkReal x3580=(cj5*r21);
IkReal x3581=((1.0)*px);
IkReal x3582=((0.391670999980416)*cj3);
IkReal x3583=(cj0*cj4);
IkReal x3584=((0.121761000001269)*cj0);
IkReal x3585=(r01*sj5);
IkReal x3586=(r10*sj5);
IkReal x3587=((0.391671)*r02);
IkReal x3588=(cj5*r20);
IkReal x3589=((1.0)*py);
IkReal x3590=((0.001538)*x3563);
IkReal x3591=((1.92e-6)*x3550);
IkReal x3592=((0.52362)*x3548);
IkReal x3593=((0.52362)*x3550);
IkReal x3594=(sj5*x3575);
IkReal x3595=((0.121761000001269)*x3562);
IkReal x3596=(cj4*x3572);
IkReal x3597=((0.121761000001269)*cj5*sj0);
IkReal x3598=(cj4*cj5*r01);
IkReal x3599=((3.9e-7)*x3586);
IkReal x3600=((1.92e-6)*x3548);
IkReal x3601=(sj0*x3588);
IkReal x3602=(x3563*x3593);
IkReal x3603=(x3563*x3600);
evalcond[0]=((((-1.36279999993186e-7)*x3576))+((x3556*x3557))+((x3557*x3580))+(((-1.0)*r21*x3558))+(((-0.121761000001269)*x3588))+((x3575*x3580))+x3592+x3591+(((0.391671)*cj4*r22))+(((-1.0)*x3559))+(((0.121761000001269)*x3554))+((x3556*x3575))+(((-3.9e-7)*x3556)));
evalcond[1]=(((cj4*x3552*x3586))+(((-1.0)*x3577*x3586))+(((-1.0)*cj0*x3589))+((x3579*x3583))+x3590+(((-1.0)*x3549*x3593))+(((-1.0)*cj0*r11*x3558))+((x3549*x3600))+((x3562*x3584))+(((-1.0)*x3552*x3553))+((cj0*x3557*x3564))+((cj4*x3552*x3564))+(((-1.0)*x3571*x3584))+((cj0*x3557*x3586)));
evalcond[2]=((((-1.0)*sj0*x3557*x3561))+((x3565*x3568))+(((-1.0)*cj4*x3561*x3568))+((x3551*x3600))+((x3561*x3567))+(((-1.0)*cj5*x3557*x3569))+(((-1.0)*x3569*x3570))+((px*sj0))+(((-1.0)*x3578*x3587))+(((-1.0)*x3568*x3598))+(((-1.0)*x3590))+(((-1.0)*x3551*x3593))+(((0.121761000001269)*sj0*x3573))+((x3558*x3569)));
evalcond[3]=((((-1.0)*cj4*x3582*x3586))+(((-1.0)*x3560*x3571))+((x3586*x3596))+(((-1.0)*cj4*x3564*x3582))+((x3584*x3588))+(((-1.0)*x3553*x3572))+((x3553*x3582))+(((-1.0)*x3554*x3584))+(((-1.0)*cj0*x3591))+(((-1.0)*cj0*x3592))+(((-1.0)*x3555*x3571))+((x3564*x3596))+(((-1.0)*cj4*x3552*x3556))+((x3556*x3577))+((cj0*pz))+((x3555*x3562))+((x3552*x3576))+(((-1.0)*cj4*x3552*x3580))+((x3558*x3566))+((x3560*x3562)));
evalcond[4]=((((-1.0)*x3568*x3576))+(((0.121761000001269)*sj0*x3554))+(((-1.0)*x3560*x3573))+((sj0*x3591))+((sj0*x3592))+((cj4*x3556*x3568))+(((-1.0)*cj4*x3561*x3582))+((x3560*x3585))+((cj5*r01*x3596))+((x3555*x3585))+(((-1.0)*x3565*x3572))+(((-1.0)*x3582*x3598))+(((-1.0)*sj0*x3559))+(((-1.0)*x3555*x3573))+((x3561*x3596))+(((-0.121761000001269)*x3601))+(((-1.0)*x3556*x3567))+(((-1.0)*r21*sj0*x3558))+((cj4*x3568*x3580))+((x3565*x3582)));
evalcond[5]=((((0.001538)*sj0))+(((-0.121761000001269)*x3571))+(((-1.36279999993186e-7)*x3553))+((cj0*x3576*x3582))+((x3575*x3586))+x3595+((x3556*x3572*x3583))+((x3564*x3575))+(((-1.0)*cj0*x3572*x3576))+(((-1.0)*cj4*cj5*x3566*x3582))+(((-1.0)*cj0*x3560*x3588))+(((-1.0)*cj0*x3593))+(((-1.0)*cj0*x3555*x3588))+(((-1.0)*x3556*x3582*x3583))+(((-1.0)*r11*x3558))+((cj0*x3554*x3555))+((cj0*x3554*x3560))+((cj5*x3566*x3596))+((cj0*x3600))+(((-1.0)*x3599))+(((-1.0)*x3589)));
evalcond[6]=((((0.001538)*cj0))+((cj5*r01*x3575))+(((-0.121761000001269)*x3573))+((sj0*x3593))+((x3555*x3601))+(((-1.0)*sj0*x3554*x3560))+((r01*x3570))+(((-1.0)*sj0*x3576*x3582))+((x3578*x3580*x3582))+(((-1.0)*r01*x3558))+(((-1.36279999993186e-7)*x3565))+(((-1.0)*x3556*x3572*x3578))+(((-1.0)*sj0*x3600))+((x3560*x3601))+((sj0*x3572*x3576))+(((-3.9e-7)*x3561))+(((-1.0)*x3572*x3578*x3580))+((x3561*x3575))+((x3556*x3578*x3582))+(((-1.0)*x3581))+(((-1.0)*sj0*x3554*x3555)));
evalcond[7]=(((x3583*x3587))+((r11*sj0*x3558))+(((-1.0)*cj4*x3564*x3568))+(((-1.0)*sj0*x3595))+(((-1.0)*cj4*x3568*x3586))+((x3567*x3586))+x3602+(((-1.0)*x3603))+((x3553*x3568))+((cj0*x3557*x3561))+((py*sj0))+(((-0.001538)*x3551))+(((0.121761000001269)*sj0*x3571))+((cj5*x3557*x3574)));
evalcond[8]=(((x3570*x3574))+(((0.001538)*x3549))+(((-1.0)*x3561*x3577))+(((-1.0)*sj0*x3557*x3564))+(((-1.0)*x3573*x3584))+(((-1.0)*cj0*x3581))+((x3552*x3598))+x3602+(((-1.0)*x3552*x3565))+(((-1.0)*x3603))+(((-1.0)*sj0*x3557*x3586))+(((-1.0)*x3578*x3579))+((cj4*x3552*x3561))+(((-1.0)*x3558*x3574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3604=(sj1*sj4);
IkReal x3605=(cj5*r01);
IkReal x3606=(r20*sj5);
IkReal x3607=(cj4*sj1);
IkReal x3608=(r00*sj5);
IkReal x3609=(cj1*sj4);
IkReal x3610=(cj5*r21);
IkReal x3611=(cj1*cj4);
if( IKabs(((((-1.0)*r22*x3607))+((r02*x3611))+(((-1.0)*x3604*x3606))+(((-1.0)*x3604*x3610))+((x3608*x3609))+((x3605*x3609)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3604*x3605))+((x3604*x3608))+((x3606*x3609))+((r02*x3607))+((x3609*x3610))+((r22*x3611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3607))+((r02*x3611))+(((-1.0)*x3604*x3606))+(((-1.0)*x3604*x3610))+((x3608*x3609))+((x3605*x3609))))+IKsqr((((x3604*x3605))+((x3604*x3608))+((x3606*x3609))+((r02*x3607))+((x3609*x3610))+((r22*x3611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x3607))+((r02*x3611))+(((-1.0)*x3604*x3606))+(((-1.0)*x3604*x3610))+((x3608*x3609))+((x3605*x3609))), (((x3604*x3605))+((x3604*x3608))+((x3606*x3609))+((r02*x3607))+((x3609*x3610))+((r22*x3611))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3612=IKcos(j2);
IkReal x3613=IKsin(j2);
IkReal x3614=(r22*sj4);
IkReal x3615=((0.99999999995)*cj3);
IkReal x3616=(r01*sj5);
IkReal x3617=((9.9999999995e-6)*cj3);
IkReal x3618=((1.36279999993186e-7)*cj4);
IkReal x3619=(cj5*r01);
IkReal x3620=(r20*sj5);
IkReal x3621=((9.9999999995e-6)*sj3);
IkReal x3622=((0.99999999995)*sj3);
IkReal x3623=(r00*sj5);
IkReal x3624=(cj5*r21);
IkReal x3625=(r02*sj4);
IkReal x3626=((1.0)*sj4);
IkReal x3627=(cj5*r20);
IkReal x3628=((1.0)*cj4);
IkReal x3629=(r21*sj5);
IkReal x3630=(cj5*r00);
IkReal x3631=(sj1*x3612);
IkReal x3632=(cj1*x3613);
IkReal x3633=(cj1*x3612);
IkReal x3634=(sj1*x3613);
IkReal x3635=(x3632+x3631);
evalcond[0]=((((-1.0)*x3623*x3626))+x3635+(((-1.0)*x3619*x3626))+(((-1.0)*r02*x3628)));
evalcond[1]=((((-1.0)*x3624*x3626))+x3633+(((-1.0)*x3634))+(((-1.0)*r22*x3628))+(((-1.0)*x3620*x3626)));
evalcond[2]=((((-3.9e-7)*x3624))+(((-3.9e-7)*x3620))+(((-0.391671)*x3634))+(((0.121761000001269)*x3629))+(((-0.121761000001269)*x3627))+((x3618*x3620))+((x3618*x3624))+(((-1.36279999993186e-7)*x3614))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.391671)*x3633))+(((0.52362)*cj1)));
evalcond[3]=((((-3.9e-7)*x3623))+((x3618*x3619))+(((0.52362)*sj1))+((x3618*x3623))+(((0.121761000001269)*x3616))+(((-1.0)*px))+(((0.391671)*x3631))+(((0.391671)*x3632))+(((-1.92e-6)*cj1))+(((-3.9e-7)*x3619))+(((-0.121761000001269)*x3630))+(((-1.36279999993186e-7)*x3625)));
evalcond[4]=((((-1.0)*x3614*x3621))+(((-1.0)*cj4*x3615*x3620))+(((-1.0)*cj4*x3615*x3624))+(((-1.0)*x3622*x3627))+x3635+((x3622*x3629))+(((-1.0)*x3617*x3627))+((x3614*x3615))+((cj4*x3620*x3621))+((x3617*x3629))+((cj4*x3621*x3624)));
evalcond[5]=(((x3616*x3622))+(((-1.0)*x3621*x3625))+(((-1.0)*x3617*x3630))+((x3615*x3625))+(((-1.0)*cj4*x3615*x3623))+((cj4*x3619*x3621))+x3634+((x3616*x3617))+(((-1.0)*x3633))+(((-1.0)*cj4*x3615*x3619))+((cj4*x3621*x3623))+(((-1.0)*x3622*x3630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3636=((1.0)*sj1);
IkReal x3637=(sj4*sj5);
IkReal x3638=(cj4*r22);
IkReal x3639=(cj5*sj4);
IkReal x3640=(cj4*r02);
IkReal x3641=((1.0)*cj1);
if( IKabs(((((-1.0)*r01*x3639*x3641))+(((-1.0)*x3640*x3641))+(((-1.0)*r20*x3636*x3637))+(((-1.0)*r00*x3637*x3641))+(((-1.0)*r21*x3636*x3639))+(((-1.0)*x3636*x3638)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x3637))+(((-1.0)*r00*x3636*x3637))+((cj1*r21*x3639))+((cj1*x3638))+(((-1.0)*x3636*x3640))+(((-1.0)*r01*x3636*x3639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3639*x3641))+(((-1.0)*x3640*x3641))+(((-1.0)*r20*x3636*x3637))+(((-1.0)*r00*x3637*x3641))+(((-1.0)*r21*x3636*x3639))+(((-1.0)*x3636*x3638))))+IKsqr((((cj1*r20*x3637))+(((-1.0)*r00*x3636*x3637))+((cj1*r21*x3639))+((cj1*x3638))+(((-1.0)*x3636*x3640))+(((-1.0)*r01*x3636*x3639))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x3639*x3641))+(((-1.0)*x3640*x3641))+(((-1.0)*r20*x3636*x3637))+(((-1.0)*r00*x3637*x3641))+(((-1.0)*r21*x3636*x3639))+(((-1.0)*x3636*x3638))), (((cj1*r20*x3637))+(((-1.0)*r00*x3636*x3637))+((cj1*r21*x3639))+((cj1*x3638))+(((-1.0)*x3636*x3640))+(((-1.0)*r01*x3636*x3639))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3642=IKcos(j2);
IkReal x3643=IKsin(j2);
IkReal x3644=(r22*sj4);
IkReal x3645=((0.99999999995)*cj3);
IkReal x3646=(r01*sj5);
IkReal x3647=((9.9999999995e-6)*cj3);
IkReal x3648=((1.36279999993186e-7)*cj4);
IkReal x3649=(cj5*r01);
IkReal x3650=((0.99999999995)*sj3);
IkReal x3651=(r20*sj5);
IkReal x3652=((9.9999999995e-6)*sj3);
IkReal x3653=(r00*sj5);
IkReal x3654=(cj5*r21);
IkReal x3655=(r02*sj4);
IkReal x3656=((1.0)*sj1);
IkReal x3657=(cj5*r20);
IkReal x3658=((1.0)*sj4);
IkReal x3659=((1.0)*cj4);
IkReal x3660=((0.391671)*sj1);
IkReal x3661=(r21*sj5);
IkReal x3662=(cj5*r00);
IkReal x3663=(cj1*x3642);
IkReal x3664=(cj1*x3643);
IkReal x3665=(x3643*x3656);
evalcond[0]=((((-1.0)*x3665))+x3663+(((-1.0)*x3654*x3658))+(((-1.0)*x3651*x3658))+(((-1.0)*r22*x3659)));
evalcond[1]=((((-1.0)*x3642*x3656))+(((-1.0)*x3653*x3658))+(((-1.0)*x3664))+(((-1.0)*r02*x3659))+(((-1.0)*x3649*x3658)));
evalcond[2]=((((-3.9e-7)*x3651))+(((-3.9e-7)*x3654))+(((-1.0)*x3643*x3660))+((x3648*x3654))+((x3648*x3651))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x3644))+(((-0.121761000001269)*x3657))+(((0.121761000001269)*x3661))+(((0.391671)*x3663)));
evalcond[3]=((((1.92e-6)*cj1))+(((-3.9e-7)*x3649))+(((-0.121761000001269)*x3662))+(((-3.9e-7)*x3653))+(((-1.0)*x3642*x3660))+(((-1.36279999993186e-7)*x3655))+((x3648*x3653))+(((-1.0)*px))+((x3648*x3649))+(((-0.52362)*sj1))+(((-0.391671)*x3664))+(((0.121761000001269)*x3646)));
evalcond[4]=(((cj4*x3651*x3652))+(((-1.0)*cj4*x3645*x3654))+(((-1.0)*cj4*x3645*x3651))+((x3650*x3661))+(((-1.0)*x3644*x3652))+x3664+(((-1.0)*x3650*x3657))+((sj1*x3642))+(((-1.0)*x3647*x3657))+((x3647*x3661))+((x3644*x3645))+((cj4*x3652*x3654)));
evalcond[5]=(((x3645*x3655))+((x3646*x3650))+(((-1.0)*x3665))+(((-1.0)*cj4*x3645*x3649))+(((-1.0)*cj4*x3645*x3653))+(((-1.0)*x3650*x3662))+(((-1.0)*x3647*x3662))+x3663+((cj4*x3649*x3652))+(((-1.0)*x3652*x3655))+((x3646*x3647))+((cj4*x3652*x3653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3666=((1.0)*sj1);
IkReal x3667=(sj4*sj5);
IkReal x3668=(cj4*r22);
IkReal x3669=(cj4*r12);
IkReal x3670=((1.0)*cj1);
IkReal x3671=(cj5*r21*sj4);
IkReal x3672=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x3670*x3672))+(((-1.0)*x3666*x3668))+(((-1.0)*r10*x3667*x3670))+(((-1.0)*x3666*x3671))+(((-1.0)*r20*x3666*x3667))+(((-1.0)*x3669*x3670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x3668))+(((-1.0)*x3666*x3669))+((cj1*r20*x3667))+(((-1.0)*r10*x3666*x3667))+((cj1*x3671))+(((-1.0)*x3666*x3672)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3670*x3672))+(((-1.0)*x3666*x3668))+(((-1.0)*r10*x3667*x3670))+(((-1.0)*x3666*x3671))+(((-1.0)*r20*x3666*x3667))+(((-1.0)*x3669*x3670))))+IKsqr((((cj1*x3668))+(((-1.0)*x3666*x3669))+((cj1*r20*x3667))+(((-1.0)*r10*x3666*x3667))+((cj1*x3671))+(((-1.0)*x3666*x3672))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3670*x3672))+(((-1.0)*x3666*x3668))+(((-1.0)*r10*x3667*x3670))+(((-1.0)*x3666*x3671))+(((-1.0)*r20*x3666*x3667))+(((-1.0)*x3669*x3670))), (((cj1*x3668))+(((-1.0)*x3666*x3669))+((cj1*r20*x3667))+(((-1.0)*r10*x3666*x3667))+((cj1*x3671))+(((-1.0)*x3666*x3672))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3673=IKcos(j2);
IkReal x3674=IKsin(j2);
IkReal x3675=(r22*sj4);
IkReal x3676=(cj5*r10);
IkReal x3677=((0.99999999995)*cj3);
IkReal x3678=((9.9999999995e-6)*sj3);
IkReal x3679=((1.36279999993186e-7)*cj4);
IkReal x3680=(cj5*r11);
IkReal x3681=(cj5*r21);
IkReal x3682=(r10*sj5);
IkReal x3683=((1.0)*sj4);
IkReal x3684=((1.0)*sj1);
IkReal x3685=((9.9999999995e-6)*cj3);
IkReal x3686=(cj5*r20);
IkReal x3687=(r20*sj5);
IkReal x3688=((1.0)*cj4);
IkReal x3689=((0.99999999995)*sj3);
IkReal x3690=((0.391671)*sj1);
IkReal x3691=((0.121761000001269)*sj5);
IkReal x3692=(r11*sj5);
IkReal x3693=(r12*sj4);
IkReal x3694=(r21*sj5);
IkReal x3695=(cj1*x3673);
IkReal x3696=(cj1*x3674);
IkReal x3697=(cj4*x3687);
IkReal x3698=(x3674*x3684);
evalcond[0]=((((-1.0)*r22*x3688))+(((-1.0)*x3683*x3687))+x3695+(((-1.0)*x3698))+(((-1.0)*x3681*x3683)));
evalcond[1]=((((-1.0)*x3682*x3683))+(((-1.0)*x3680*x3683))+(((-1.0)*r12*x3688))+(((-1.0)*x3696))+(((-1.0)*x3673*x3684)));
evalcond[2]=((((-3.9e-7)*x3681))+(((-3.9e-7)*x3687))+(((-0.121761000001269)*x3686))+(((0.391671)*x3695))+(((-1.0)*x3674*x3690))+((r21*x3691))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-1.36279999993186e-7)*x3675))+(((0.52362)*cj1))+((x3679*x3681))+((x3679*x3687)));
evalcond[3]=((((1.92e-6)*cj1))+(((-3.9e-7)*x3680))+(((-3.9e-7)*x3682))+(((-0.391671)*x3696))+(((-1.0)*py))+(((-0.52362)*sj1))+(((-1.36279999993186e-7)*x3693))+(((-1.0)*x3673*x3690))+((r11*x3691))+((x3679*x3682))+((x3679*x3680))+(((-0.121761000001269)*x3676)));
evalcond[4]=(((x3678*x3697))+(((-1.0)*cj4*x3677*x3681))+((x3689*x3694))+(((-1.0)*x3677*x3697))+((x3675*x3677))+x3696+(((-1.0)*x3686*x3689))+(((-1.0)*x3685*x3686))+((x3685*x3694))+((cj4*x3678*x3681))+((sj1*x3673))+(((-1.0)*x3675*x3678)));
evalcond[5]=((((-1.0)*cj4*x3677*x3682))+(((-1.0)*cj4*x3677*x3680))+((x3677*x3693))+((x3689*x3692))+(((-1.0)*x3676*x3685))+(((-1.0)*x3676*x3689))+(((-1.0)*x3678*x3693))+x3695+((x3685*x3692))+((cj4*x3678*x3680))+((cj4*x3678*x3682))+(((-1.0)*x3698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3699=((1.0)*sj1);
IkReal x3700=(sj4*sj5);
IkReal x3701=(cj4*r12);
IkReal x3702=(cj4*r22);
IkReal x3703=(cj5*sj4);
IkReal x3704=(cj1*x3703);
if( IKabs(((((-1.0)*x3699*x3702))+(((-1.0)*r21*x3699*x3703))+((r11*x3704))+(((-1.0)*r20*x3699*x3700))+((cj1*r10*x3700))+((cj1*x3701)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3701))+((cj1*r20*x3700))+((r21*x3704))+((r10*sj1*x3700))+((r11*sj1*x3703))+((cj1*x3702)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3699*x3702))+(((-1.0)*r21*x3699*x3703))+((r11*x3704))+(((-1.0)*r20*x3699*x3700))+((cj1*r10*x3700))+((cj1*x3701))))+IKsqr((((sj1*x3701))+((cj1*r20*x3700))+((r21*x3704))+((r10*sj1*x3700))+((r11*sj1*x3703))+((cj1*x3702))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3699*x3702))+(((-1.0)*r21*x3699*x3703))+((r11*x3704))+(((-1.0)*r20*x3699*x3700))+((cj1*r10*x3700))+((cj1*x3701))), (((sj1*x3701))+((cj1*r20*x3700))+((r21*x3704))+((r10*sj1*x3700))+((r11*sj1*x3703))+((cj1*x3702))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3705=IKcos(j2);
IkReal x3706=IKsin(j2);
IkReal x3707=(r22*sj4);
IkReal x3708=(cj5*r10);
IkReal x3709=((0.99999999995)*cj3);
IkReal x3710=((9.9999999995e-6)*sj3);
IkReal x3711=((1.36279999993186e-7)*cj4);
IkReal x3712=(cj5*r11);
IkReal x3713=(cj5*r21);
IkReal x3714=(r10*sj5);
IkReal x3715=((1.0)*sj4);
IkReal x3716=(r12*sj4);
IkReal x3717=((9.9999999995e-6)*cj3);
IkReal x3718=(cj5*r20);
IkReal x3719=(r20*sj5);
IkReal x3720=((1.0)*cj4);
IkReal x3721=((0.99999999995)*sj3);
IkReal x3722=((0.121761000001269)*sj5);
IkReal x3723=(r11*sj5);
IkReal x3724=(r21*sj5);
IkReal x3725=(sj1*x3705);
IkReal x3726=(cj1*x3706);
IkReal x3727=(cj1*x3705);
IkReal x3728=(cj4*x3719);
IkReal x3729=(sj1*x3706);
IkReal x3730=(x3725+x3726);
evalcond[0]=((((-1.0)*x3714*x3715))+(((-1.0)*r12*x3720))+x3730+(((-1.0)*x3712*x3715)));
evalcond[1]=((((-1.0)*r22*x3720))+(((-1.0)*x3713*x3715))+(((-1.0)*x3715*x3719))+x3727+(((-1.0)*x3729)));
evalcond[2]=(((x3711*x3713))+((x3711*x3719))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-0.391671)*x3729))+(((0.52362)*cj1))+(((-3.9e-7)*x3719))+(((-3.9e-7)*x3713))+(((-1.36279999993186e-7)*x3707))+(((0.391671)*x3727))+(((-0.121761000001269)*x3718))+((r21*x3722)));
evalcond[3]=(((x3711*x3714))+((x3711*x3712))+(((0.52362)*sj1))+((r11*x3722))+(((-1.0)*py))+(((-1.92e-6)*cj1))+(((-3.9e-7)*x3712))+(((-3.9e-7)*x3714))+(((0.391671)*x3725))+(((0.391671)*x3726))+(((-0.121761000001269)*x3708))+(((-1.36279999993186e-7)*x3716)));
evalcond[4]=((((-1.0)*x3707*x3710))+(((-1.0)*x3717*x3718))+(((-1.0)*cj4*x3709*x3713))+((x3717*x3724))+((cj4*x3710*x3713))+(((-1.0)*x3709*x3728))+((x3707*x3709))+x3730+(((-1.0)*x3718*x3721))+((x3710*x3728))+((x3721*x3724)));
evalcond[5]=(((x3709*x3716))+(((-1.0)*x3710*x3716))+(((-1.0)*cj4*x3709*x3714))+(((-1.0)*cj4*x3709*x3712))+((x3717*x3723))+((cj4*x3710*x3714))+((cj4*x3710*x3712))+(((-1.0)*x3708*x3721))+x3729+(((-1.0)*x3727))+(((-1.0)*x3708*x3717))+((x3721*x3723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3731=((1.0)*sj1);
IkReal x3732=(sj4*sj5);
IkReal x3733=(cj0*r20);
IkReal x3734=(cj4*r12);
IkReal x3735=(cj0*cj1);
IkReal x3736=(cj4*r22);
IkReal x3737=((1.0)*cj1);
IkReal x3738=(cj5*sj4);
CheckValue<IkReal> x3739=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x3739.valid){
continue;
}
CheckValue<IkReal> x3740 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3737*x3738))+(((-1.0)*cj0*x3731*x3736))+(((-1.0)*cj0*r21*x3731*x3738))+(((-1.0)*x3731*x3732*x3733))+(((-1.0)*x3734*x3737))+(((-1.0)*r10*x3732*x3737)))),IkReal((((x3735*x3736))+((r21*x3735*x3738))+(((-1.0)*x3731*x3734))+((cj1*x3732*x3733))+(((-1.0)*r10*x3731*x3732))+(((-1.0)*r11*x3731*x3738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3740.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3739.value)))+(x3740.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3741=IKsin(j2);
IkReal x3742=IKcos(j2);
IkReal x3743=((9.9999999995e-6)*sj5);
IkReal x3744=(cj3*r01);
IkReal x3745=(cj4*r00);
IkReal x3746=((3.9e-7)*cj5);
IkReal x3747=((1.36279999993186e-7)*sj5);
IkReal x3748=(cj4*r10);
IkReal x3749=((9.9999999995e-6)*cj5);
IkReal x3750=(cj3*r20);
IkReal x3751=(cj0*sj1);
IkReal x3752=((0.121761000001269)*sj5);
IkReal x3753=(cj4*r01);
IkReal x3754=((1.36279999993186e-7)*cj5);
IkReal x3755=((0.99999999995)*cj3);
IkReal x3756=(r02*sj4);
IkReal x3757=(r11*sj3);
IkReal x3758=((0.99999999995)*sj5);
IkReal x3759=((3.9e-7)*sj5);
IkReal x3760=((0.121761000001269)*cj5);
IkReal x3761=((1.0)*sj4);
IkReal x3762=(r22*sj4);
IkReal x3763=((9.9999999995e-6)*sj3);
IkReal x3764=(r12*sj4);
IkReal x3765=((1.0)*cj4);
IkReal x3766=(cj5*r21);
IkReal x3767=(cj4*cj5);
IkReal x3768=(r21*sj3);
IkReal x3769=(cj4*r20);
IkReal x3770=((1.92e-6)*cj1);
IkReal x3771=(sj0*sj1);
IkReal x3772=(cj1*x3741);
IkReal x3773=((1.0)*x3742);
IkReal x3774=((0.391671)*x3742);
IkReal x3775=(sj1*x3741);
IkReal x3776=(cj1*x3742);
IkReal x3777=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*x3761*x3766))+(((-1.0)*r22*x3765))+(((-1.0)*x3775))+x3776+(((-1.0)*r20*sj5*x3761)));
evalcond[1]=((((-1.0)*cj5*r01*x3761))+(((-1.0)*r00*sj5*x3761))+((sj0*x3772))+(((-1.0)*r02*x3765))+((x3742*x3771)));
evalcond[2]=((((-1.0)*x3751*x3773))+(((-1.0)*r10*sj5*x3761))+(((-1.0)*cj5*r11*x3761))+(((-1.0)*cj0*x3772))+(((-1.0)*r12*x3765)));
evalcond[3]=((((-1.0)*r20*x3760))+(((-1.0)*r20*x3759))+(((-1.0)*r21*x3746))+((cj4*r21*x3754))+(((-0.391671)*x3775))+(((-1.36279999993186e-7)*x3762))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((cj1*x3774))+(((0.52362)*cj1))+((r21*x3752))+((x3747*x3769)));
evalcond[4]=((((0.001538)*cj0))+((r01*x3752))+(((-1.0)*r00*x3759))+(((-1.0)*r01*x3746))+(((0.52362)*x3771))+(((-1.36279999993186e-7)*x3756))+(((-1.0)*px))+(((-1.0)*sj0*x3770))+(((-1.0)*r00*x3760))+((x3771*x3774))+((x3753*x3754))+(((0.391671)*sj0*x3772))+((x3745*x3747)));
evalcond[5]=((((-1.0)*r10*x3760))+(((0.001538)*sj0))+((cj0*x3770))+(((-1.0)*x3751*x3774))+(((-0.391671)*cj0*x3772))+(((-1.36279999993186e-7)*x3764))+(((-1.0)*r11*x3746))+((r11*x3752))+(((-0.52362)*x3751))+(((-1.0)*py))+(((-1.0)*r10*x3759))+((cj4*r11*x3754))+((x3747*x3748)));
evalcond[6]=(((sj3*x3743*x3769))+(((-1.0)*r20*x3777))+(((-1.0)*x3762*x3763))+(((-1.0)*x3749*x3750))+((sj1*x3742))+((x3758*x3768))+((cj3*r21*x3743))+((cj4*x3749*x3768))+x3772+(((-1.0)*cj4*x3755*x3766))+(((-1.0)*cj4*x3750*x3758))+((x3755*x3762)));
evalcond[7]=(((x3755*x3756))+((x3743*x3744))+((x3741*x3771))+(((-1.0)*cj1*sj0*x3773))+((sj3*x3743*x3745))+(((-0.99999999995)*x3744*x3767))+(((-1.0)*sj5*x3745*x3755))+(((-1.0)*r00*x3777))+((r01*sj3*x3758))+(((-1.0)*x3756*x3763))+(((-1.0)*cj3*r00*x3749))+((sj3*x3749*x3753)));
evalcond[8]=(((x3757*x3758))+((cj0*x3776))+(((-1.0)*x3763*x3764))+(((-1.0)*x3741*x3751))+((cj3*r11*x3743))+((sj3*x3743*x3748))+(((-1.0)*r11*x3755*x3767))+((x3755*x3764))+(((-1.0)*sj5*x3748*x3755))+(((-1.0)*cj3*r10*x3749))+(((-1.0)*r10*x3777))+((cj4*x3749*x3757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3778=((1.0)*sj0);
IkReal x3779=(cj1*sj4);
IkReal x3780=(r20*sj5);
IkReal x3781=(cj4*sj1);
IkReal x3782=(r00*sj5);
IkReal x3783=(sj1*sj4);
IkReal x3784=(cj1*cj4);
IkReal x3785=(cj5*x3783);
CheckValue<IkReal> x3786 = IKatan2WithCheck(IkReal((((r02*x3784))+((cj5*r01*x3779))+(((-1.0)*r21*x3778*x3785))+(((-1.0)*x3778*x3780*x3783))+((x3779*x3782))+(((-1.0)*r22*x3778*x3781)))),IkReal((((r02*x3781))+((sj0*x3779*x3780))+((x3782*x3783))+((r01*x3785))+((r22*sj0*x3784))+((cj5*r21*sj0*x3779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3786.valid){
continue;
}
CheckValue<IkReal> x3787=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3787.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3786.value)+(((1.5707963267949)*(x3787.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3788=IKsin(j2);
IkReal x3789=IKcos(j2);
IkReal x3790=((9.9999999995e-6)*sj5);
IkReal x3791=(cj3*r01);
IkReal x3792=(cj4*r00);
IkReal x3793=((3.9e-7)*cj5);
IkReal x3794=((1.36279999993186e-7)*sj5);
IkReal x3795=(cj4*r10);
IkReal x3796=((9.9999999995e-6)*cj5);
IkReal x3797=(cj3*r20);
IkReal x3798=(cj0*sj1);
IkReal x3799=((0.121761000001269)*sj5);
IkReal x3800=(cj4*r01);
IkReal x3801=((1.36279999993186e-7)*cj5);
IkReal x3802=((0.99999999995)*cj3);
IkReal x3803=(r02*sj4);
IkReal x3804=(r11*sj3);
IkReal x3805=((0.99999999995)*sj5);
IkReal x3806=((3.9e-7)*sj5);
IkReal x3807=((0.121761000001269)*cj5);
IkReal x3808=((1.0)*sj4);
IkReal x3809=(r22*sj4);
IkReal x3810=((9.9999999995e-6)*sj3);
IkReal x3811=(r12*sj4);
IkReal x3812=((1.0)*cj4);
IkReal x3813=(cj5*r21);
IkReal x3814=(cj4*cj5);
IkReal x3815=(r21*sj3);
IkReal x3816=(cj4*r20);
IkReal x3817=((1.92e-6)*cj1);
IkReal x3818=(sj0*sj1);
IkReal x3819=(cj1*x3788);
IkReal x3820=((1.0)*x3789);
IkReal x3821=((0.391671)*x3789);
IkReal x3822=(sj1*x3788);
IkReal x3823=(cj1*x3789);
IkReal x3824=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*r22*x3812))+(((-1.0)*r20*sj5*x3808))+(((-1.0)*x3808*x3813))+(((-1.0)*x3822))+x3823);
evalcond[1]=(((x3789*x3818))+(((-1.0)*r02*x3812))+(((-1.0)*r00*sj5*x3808))+((sj0*x3819))+(((-1.0)*cj5*r01*x3808)));
evalcond[2]=((((-1.0)*r12*x3812))+(((-1.0)*cj5*r11*x3808))+(((-1.0)*cj0*x3819))+(((-1.0)*x3798*x3820))+(((-1.0)*r10*sj5*x3808)));
evalcond[3]=(((r21*x3799))+((cj1*x3821))+((x3794*x3816))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((cj4*r21*x3801))+(((-0.391671)*x3822))+(((-1.0)*r20*x3806))+(((-1.0)*r20*x3807))+(((-1.0)*r21*x3793))+(((-1.36279999993186e-7)*x3809)));
evalcond[4]=((((0.001538)*cj0))+((x3792*x3794))+(((-1.0)*r00*x3806))+(((-1.0)*r00*x3807))+(((0.52362)*x3818))+((x3800*x3801))+(((-1.0)*sj0*x3817))+(((-1.0)*px))+(((-1.0)*r01*x3793))+((x3818*x3821))+(((0.391671)*sj0*x3819))+((r01*x3799))+(((-1.36279999993186e-7)*x3803)));
evalcond[5]=((((0.001538)*sj0))+(((-1.0)*r11*x3793))+(((-1.0)*py))+(((-1.0)*x3798*x3821))+((cj0*x3817))+(((-0.52362)*x3798))+(((-1.36279999993186e-7)*x3811))+((r11*x3799))+(((-0.391671)*cj0*x3819))+(((-1.0)*r10*x3806))+(((-1.0)*r10*x3807))+((x3794*x3795))+((cj4*r11*x3801)));
evalcond[6]=(((cj3*r21*x3790))+(((-1.0)*x3796*x3797))+((cj4*x3796*x3815))+((x3802*x3809))+((x3805*x3815))+(((-1.0)*x3809*x3810))+(((-1.0)*r20*x3824))+x3819+((sj1*x3789))+(((-1.0)*cj4*x3797*x3805))+(((-1.0)*cj4*x3802*x3813))+((sj3*x3790*x3816)));
evalcond[7]=(((r01*sj3*x3805))+(((-1.0)*cj3*r00*x3796))+(((-1.0)*r00*x3824))+((x3802*x3803))+((x3788*x3818))+(((-1.0)*x3803*x3810))+(((-1.0)*sj5*x3792*x3802))+((sj3*x3790*x3792))+((sj3*x3796*x3800))+((x3790*x3791))+(((-1.0)*cj1*sj0*x3820))+(((-0.99999999995)*x3791*x3814)));
evalcond[8]=(((cj4*x3796*x3804))+((cj3*r11*x3790))+(((-1.0)*r11*x3802*x3814))+((x3804*x3805))+(((-1.0)*sj5*x3795*x3802))+(((-1.0)*x3810*x3811))+(((-1.0)*cj3*r10*x3796))+((cj0*x3823))+((sj3*x3790*x3795))+(((-1.0)*r10*x3824))+(((-1.0)*x3788*x3798))+((x3802*x3811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3825=sj0*sj0;
IkReal x3826=(cj4*cj5);
IkReal x3827=(sj4*sj5);
IkReal x3828=(r00*sj0);
IkReal x3829=(r01*sj0);
IkReal x3830=(px*sj0);
IkReal x3831=(cj4*sj5);
IkReal x3832=(cj5*r21);
IkReal x3833=(r02*sj0);
IkReal x3834=(cj5*sj4);
IkReal x3835=(cj0*sj0);
IkReal x3836=((((-3.9e-7)*x3832))+(((1.36279999993186e-7)*r20*x3831))+(((0.121761000001269)*r21*sj5))+(((-3.9e-7)*r20*sj5))+(((-1.0)*pz))+(((0.391671)*cj4*r22))+(((1.36279999993186e-7)*r21*x3826))+(((0.391671)*sj4*x3832))+(((-1.36279999993186e-7)*r22*sj4))+(((-0.121761000001269)*cj5*r20))+(((0.391671)*r20*x3827)));
IkReal x3837=(x3825*x3836);
CheckValue<IkReal> x3838=IKPowWithIntegerCheck(IKsign(x3825),-1);
if(!x3838.valid){
continue;
}
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal(((((1.27632375)*sj5*x3828))+(((-1281792.306375)*x3827*x3828))+(((-0.4459933349777)*x3828*x3831))+(((398478.092629152)*cj5*x3828))+(((-1281792.306375)*x3829*x3834))+(((3272625.0)*x3830))+(((1.27632375)*cj5*x3829))+(((-398478.092629152)*sj5*x3829))+(((-12.0)*x3837))+(((0.4459933349777)*sj4*x3833))+(((-1281792.306375)*cj4*x3833))+(((-0.4459933349777)*x3826*x3829))+(((-5033.29725)*x3835)))),IkReal(((((-4.68e-6)*sj5*x3828))+(((4.700052)*cj4*x3833))+(((0.018456)*x3835))+(((4.700052)*x3829*x3834))+(((4.700052)*x3827*x3828))+(((-1.46113200001522)*cj5*x3828))+(((-1.63535999991823e-6)*sj4*x3833))+(((-3272625.0)*x3837))+(((1.46113200001522)*sj5*x3829))+(((-12.0)*x3830))+(((1.63535999991823e-6)*x3826*x3829))+(((-4.68e-6)*cj5*x3829))+(((1.63535999991823e-6)*x3828*x3831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3838.value)))+(x3839.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x3840=IKcos(j1);
IkReal x3841=cj0*cj0;
IkReal x3842=IKsin(j1);
IkReal x3843=sj0*sj0;
IkReal x3844=((1.36279999993186e-7)*cj0);
IkReal x3845=(r12*sj4);
IkReal x3846=(r21*sj5);
IkReal x3847=((0.391670999980416)*sj3);
IkReal x3848=(r20*sj5);
IkReal x3849=((0.391671)*sj4);
IkReal x3850=((3.9e-7)*cj5);
IkReal x3851=((1.0)*pz);
IkReal x3852=((3.91670999980416e-6)*cj3);
IkReal x3853=(r00*sj5);
IkReal x3854=(r11*sj5);
IkReal x3855=(cj0*sj0);
IkReal x3856=(cj5*r11);
IkReal x3857=(r02*sj4);
IkReal x3858=(cj0*r21);
IkReal x3859=((3.9e-7)*sj0);
IkReal x3860=((1.36279999993186e-7)*sj0);
IkReal x3861=(r01*sj0);
IkReal x3862=((0.121761000001269)*sj5);
IkReal x3863=(cj5*r10);
IkReal x3864=((3.91670999980416e-6)*sj3);
IkReal x3865=(cj5*r00);
IkReal x3866=(cj0*r01);
IkReal x3867=((1.36279999993186e-7)*cj4);
IkReal x3868=(r22*sj4);
IkReal x3869=((3.9e-7)*cj0);
IkReal x3870=(cj4*sj0);
IkReal x3871=((0.391671)*r12);
IkReal x3872=(cj5*r21);
IkReal x3873=((1.0)*px);
IkReal x3874=((0.391670999980416)*cj3);
IkReal x3875=(cj0*cj4);
IkReal x3876=((0.121761000001269)*cj0);
IkReal x3877=(r01*sj5);
IkReal x3878=(r10*sj5);
IkReal x3879=((0.391671)*r02);
IkReal x3880=(cj5*r20);
IkReal x3881=((1.0)*py);
IkReal x3882=((0.001538)*x3855);
IkReal x3883=((1.92e-6)*x3842);
IkReal x3884=((0.52362)*x3840);
IkReal x3885=((0.52362)*x3842);
IkReal x3886=(sj5*x3867);
IkReal x3887=((0.121761000001269)*x3854);
IkReal x3888=(cj4*x3864);
IkReal x3889=((0.121761000001269)*cj5*sj0);
IkReal x3890=(cj4*cj5*r01);
IkReal x3891=((3.9e-7)*x3878);
IkReal x3892=((1.92e-6)*x3840);
IkReal x3893=(sj0*x3880);
IkReal x3894=(x3855*x3885);
IkReal x3895=(x3855*x3892);
evalcond[0]=((((-1.0)*r21*x3850))+(((-1.0)*x3851))+((x3867*x3872))+((x3849*x3872))+(((0.121761000001269)*x3846))+((x3848*x3867))+((x3848*x3849))+(((0.391671)*cj4*r22))+x3884+x3883+(((-0.121761000001269)*x3880))+(((-1.36279999993186e-7)*x3868))+(((-3.9e-7)*x3848)));
evalcond[1]=((((-1.0)*cj0*r11*x3850))+(((-1.0)*x3844*x3845))+((x3871*x3875))+((cj4*x3844*x3878))+x3882+((cj0*x3849*x3856))+((cj0*x3849*x3878))+(((-1.0)*x3869*x3878))+(((-1.0)*cj0*x3881))+((cj4*x3844*x3856))+((x3854*x3876))+((x3841*x3892))+(((-1.0)*x3841*x3885))+(((-1.0)*x3863*x3876)));
evalcond[2]=((((-1.0)*x3843*x3885))+(((-1.0)*x3861*x3862))+(((0.121761000001269)*sj0*x3865))+((x3850*x3861))+(((-1.0)*sj0*x3849*x3853))+(((-1.0)*x3882))+(((-1.0)*cj4*x3853*x3860))+(((-1.0)*x3860*x3890))+(((-1.0)*x3870*x3879))+((x3857*x3860))+((x3853*x3859))+((x3843*x3892))+((px*sj0))+(((-1.0)*cj5*x3849*x3861)));
evalcond[3]=((((-1.0)*cj4*x3844*x3872))+((x3850*x3858))+((x3847*x3854))+((x3878*x3888))+((x3876*x3880))+((x3852*x3854))+((x3848*x3869))+((x3856*x3888))+((x3844*x3868))+((x3845*x3874))+(((-1.0)*x3852*x3863))+(((-1.0)*cj0*x3883))+(((-1.0)*cj0*x3884))+(((-1.0)*cj4*x3844*x3848))+(((-1.0)*x3847*x3863))+((cj0*pz))+(((-1.0)*x3846*x3876))+(((-1.0)*cj4*x3874*x3878))+(((-1.0)*x3845*x3864))+(((-1.0)*cj4*x3856*x3874)));
evalcond[4]=((((-1.0)*x3860*x3868))+(((-1.0)*sj0*x3851))+((sj0*x3883))+((sj0*x3884))+(((-1.0)*cj4*x3853*x3874))+(((-0.121761000001269)*x3893))+((x3857*x3874))+(((-1.0)*x3848*x3859))+(((-1.0)*x3874*x3890))+((x3847*x3877))+((cj5*r01*x3888))+(((-1.0)*x3857*x3864))+((x3853*x3888))+((cj4*x3860*x3872))+((cj4*x3848*x3860))+(((-1.0)*x3852*x3865))+(((-1.0)*x3847*x3865))+(((0.121761000001269)*sj0*x3846))+((x3852*x3877))+(((-1.0)*r21*sj0*x3850)));
evalcond[5]=((((0.001538)*sj0))+((x3867*x3878))+((cj0*x3892))+(((-1.0)*x3881))+(((-1.0)*cj4*cj5*x3858*x3874))+(((-0.121761000001269)*x3863))+((x3856*x3867))+(((-1.0)*cj0*x3864*x3868))+x3887+(((-1.0)*r11*x3850))+(((-1.0)*cj0*x3847*x3880))+((cj0*x3846*x3847))+(((-1.0)*cj0*x3885))+(((-1.0)*x3891))+((x3848*x3864*x3875))+((cj0*x3868*x3874))+((cj0*x3846*x3852))+(((-1.36279999993186e-7)*x3845))+((cj5*x3858*x3888))+(((-1.0)*cj0*x3852*x3880))+(((-1.0)*x3848*x3874*x3875)));
evalcond[6]=((((0.001538)*cj0))+((sj0*x3885))+(((-1.0)*sj0*x3892))+(((-3.9e-7)*x3853))+((x3870*x3872*x3874))+((x3847*x3893))+(((-1.0)*sj0*x3846*x3847))+((sj0*x3864*x3868))+(((-0.121761000001269)*x3865))+(((-1.0)*sj0*x3846*x3852))+((x3848*x3870*x3874))+((x3853*x3867))+((r01*x3862))+(((-1.0)*r01*x3850))+(((-1.36279999993186e-7)*x3857))+((x3852*x3893))+(((-1.0)*x3873))+((cj5*r01*x3867))+(((-1.0)*sj0*x3868*x3874))+(((-1.0)*x3848*x3864*x3870))+(((-1.0)*x3864*x3870*x3872)));
evalcond[7]=((((0.121761000001269)*sj0*x3863))+((cj5*x3849*x3866))+((x3859*x3878))+x3894+((cj0*x3849*x3853))+((x3875*x3879))+((x3845*x3860))+(((-1.0)*sj0*x3887))+(((-1.0)*x3895))+(((-1.0)*cj4*x3860*x3878))+((py*sj0))+(((-1.0)*cj4*x3856*x3860))+(((-0.001538)*x3843))+((r11*sj0*x3850)));
evalcond[8]=((((-1.0)*cj0*x3873))+(((0.001538)*x3841))+(((-1.0)*x3865*x3876))+(((-1.0)*sj0*x3849*x3856))+(((-1.0)*x3844*x3857))+(((-1.0)*x3850*x3866))+(((-1.0)*x3870*x3871))+(((-1.0)*sj0*x3849*x3878))+x3894+((x3862*x3866))+(((-1.0)*x3895))+((x3844*x3890))+((cj4*x3844*x3853))+(((-1.0)*x3853*x3869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3896=(sj1*sj4);
IkReal x3897=(cj5*r01);
IkReal x3898=(r20*sj5);
IkReal x3899=(cj4*sj1);
IkReal x3900=(r00*sj5);
IkReal x3901=(cj1*sj4);
IkReal x3902=(cj5*r21);
IkReal x3903=(cj1*cj4);
if( IKabs((((x3900*x3901))+((x3897*x3901))+(((-1.0)*r22*x3899))+(((-1.0)*x3896*x3902))+((r02*x3903))+(((-1.0)*x3896*x3898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3901*x3902))+((r22*x3903))+((x3896*x3897))+((x3898*x3901))+((r02*x3899))+((x3896*x3900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3900*x3901))+((x3897*x3901))+(((-1.0)*r22*x3899))+(((-1.0)*x3896*x3902))+((r02*x3903))+(((-1.0)*x3896*x3898))))+IKsqr((((x3901*x3902))+((r22*x3903))+((x3896*x3897))+((x3898*x3901))+((r02*x3899))+((x3896*x3900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3900*x3901))+((x3897*x3901))+(((-1.0)*r22*x3899))+(((-1.0)*x3896*x3902))+((r02*x3903))+(((-1.0)*x3896*x3898))), (((x3901*x3902))+((r22*x3903))+((x3896*x3897))+((x3898*x3901))+((r02*x3899))+((x3896*x3900))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3904=IKcos(j2);
IkReal x3905=IKsin(j2);
IkReal x3906=(r22*sj4);
IkReal x3907=((0.99999999995)*cj3);
IkReal x3908=(r01*sj5);
IkReal x3909=((9.9999999995e-6)*cj3);
IkReal x3910=((1.36279999993186e-7)*cj4);
IkReal x3911=(cj5*r01);
IkReal x3912=(r20*sj5);
IkReal x3913=((9.9999999995e-6)*sj3);
IkReal x3914=((0.99999999995)*sj3);
IkReal x3915=(r00*sj5);
IkReal x3916=(cj5*r21);
IkReal x3917=(r02*sj4);
IkReal x3918=((1.0)*sj4);
IkReal x3919=(cj5*r20);
IkReal x3920=((1.0)*cj4);
IkReal x3921=(r21*sj5);
IkReal x3922=(cj5*r00);
IkReal x3923=(sj1*x3904);
IkReal x3924=(cj1*x3905);
IkReal x3925=(cj1*x3904);
IkReal x3926=(sj1*x3905);
IkReal x3927=(x3923+x3924);
evalcond[0]=((((-1.0)*x3915*x3918))+(((-1.0)*x3911*x3918))+(((-1.0)*r02*x3920))+x3927);
evalcond[1]=((((-1.0)*x3912*x3918))+(((-1.0)*x3926))+(((-1.0)*x3916*x3918))+x3925+(((-1.0)*r22*x3920)));
evalcond[2]=((((-0.121761000001269)*x3919))+(((-0.391671)*x3926))+((x3910*x3912))+((x3910*x3916))+(((0.121761000001269)*x3921))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-3.9e-7)*x3912))+(((-3.9e-7)*x3916))+(((0.52362)*cj1))+(((0.391671)*x3925))+(((-1.36279999993186e-7)*x3906)));
evalcond[3]=((((0.52362)*sj1))+((x3910*x3911))+((x3910*x3915))+(((-1.0)*px))+(((-3.9e-7)*x3911))+(((-3.9e-7)*x3915))+(((-1.92e-6)*cj1))+(((0.391671)*x3924))+(((0.391671)*x3923))+(((-0.121761000001269)*x3922))+(((0.121761000001269)*x3908))+(((-1.36279999993186e-7)*x3917)));
evalcond[4]=((((-1.0)*x3906*x3913))+(((-1.0)*x3914*x3919))+((x3906*x3907))+((x3909*x3921))+(((-1.0)*x3909*x3919))+((x3914*x3921))+((cj4*x3913*x3916))+(((-1.0)*cj4*x3907*x3912))+(((-1.0)*cj4*x3907*x3916))+x3927+((cj4*x3912*x3913)));
evalcond[5]=(((cj4*x3911*x3913))+(((-1.0)*x3925))+((x3907*x3917))+(((-1.0)*x3914*x3922))+((cj4*x3913*x3915))+(((-1.0)*cj4*x3907*x3911))+(((-1.0)*cj4*x3907*x3915))+((x3908*x3909))+x3926+((x3908*x3914))+(((-1.0)*x3909*x3922))+(((-1.0)*x3913*x3917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3928=((1.0)*sj1);
IkReal x3929=(sj4*sj5);
IkReal x3930=(cj4*r22);
IkReal x3931=(cj5*sj4);
IkReal x3932=(cj4*r02);
IkReal x3933=((1.0)*cj1);
if( IKabs(((((-1.0)*r20*x3928*x3929))+(((-1.0)*r00*x3929*x3933))+(((-1.0)*x3932*x3933))+(((-1.0)*r21*x3928*x3931))+(((-1.0)*x3928*x3930))+(((-1.0)*r01*x3931*x3933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3928*x3929))+((cj1*r21*x3931))+((cj1*r20*x3929))+(((-1.0)*r01*x3928*x3931))+(((-1.0)*x3928*x3932))+((cj1*x3930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x3928*x3929))+(((-1.0)*r00*x3929*x3933))+(((-1.0)*x3932*x3933))+(((-1.0)*r21*x3928*x3931))+(((-1.0)*x3928*x3930))+(((-1.0)*r01*x3931*x3933))))+IKsqr(((((-1.0)*r00*x3928*x3929))+((cj1*r21*x3931))+((cj1*r20*x3929))+(((-1.0)*r01*x3928*x3931))+(((-1.0)*x3928*x3932))+((cj1*x3930))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x3928*x3929))+(((-1.0)*r00*x3929*x3933))+(((-1.0)*x3932*x3933))+(((-1.0)*r21*x3928*x3931))+(((-1.0)*x3928*x3930))+(((-1.0)*r01*x3931*x3933))), ((((-1.0)*r00*x3928*x3929))+((cj1*r21*x3931))+((cj1*r20*x3929))+(((-1.0)*r01*x3928*x3931))+(((-1.0)*x3928*x3932))+((cj1*x3930))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3934=IKcos(j2);
IkReal x3935=IKsin(j2);
IkReal x3936=(r22*sj4);
IkReal x3937=((0.99999999995)*cj3);
IkReal x3938=(r01*sj5);
IkReal x3939=((9.9999999995e-6)*cj3);
IkReal x3940=((1.36279999993186e-7)*cj4);
IkReal x3941=(cj5*r01);
IkReal x3942=((0.99999999995)*sj3);
IkReal x3943=(r20*sj5);
IkReal x3944=((9.9999999995e-6)*sj3);
IkReal x3945=(r00*sj5);
IkReal x3946=(cj5*r21);
IkReal x3947=(r02*sj4);
IkReal x3948=((1.0)*sj1);
IkReal x3949=(cj5*r20);
IkReal x3950=((1.0)*sj4);
IkReal x3951=((1.0)*cj4);
IkReal x3952=((0.391671)*sj1);
IkReal x3953=(r21*sj5);
IkReal x3954=(cj5*r00);
IkReal x3955=(cj1*x3934);
IkReal x3956=(cj1*x3935);
IkReal x3957=(x3935*x3948);
evalcond[0]=((((-1.0)*x3946*x3950))+(((-1.0)*r22*x3951))+x3955+(((-1.0)*x3957))+(((-1.0)*x3943*x3950)));
evalcond[1]=((((-1.0)*x3956))+(((-1.0)*x3934*x3948))+(((-1.0)*x3941*x3950))+(((-1.0)*x3945*x3950))+(((-1.0)*r02*x3951)));
evalcond[2]=((((0.121761000001269)*x3953))+(((-3.9e-7)*x3946))+(((-3.9e-7)*x3943))+((x3940*x3946))+((x3940*x3943))+(((-0.121761000001269)*x3949))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.391671)*x3955))+(((-1.0)*x3935*x3952))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x3936)));
evalcond[3]=((((1.92e-6)*cj1))+(((-3.9e-7)*x3945))+(((-3.9e-7)*x3941))+((x3940*x3941))+((x3940*x3945))+(((-0.391671)*x3956))+(((-0.121761000001269)*x3954))+(((-1.0)*x3934*x3952))+(((-1.0)*px))+(((-0.52362)*sj1))+(((-1.36279999993186e-7)*x3947))+(((0.121761000001269)*x3938)));
evalcond[4]=(((cj4*x3943*x3944))+((sj1*x3934))+((x3942*x3953))+((cj4*x3944*x3946))+(((-1.0)*x3942*x3949))+((x3939*x3953))+x3956+(((-1.0)*x3939*x3949))+((x3936*x3937))+(((-1.0)*cj4*x3937*x3943))+(((-1.0)*cj4*x3937*x3946))+(((-1.0)*x3936*x3944)));
evalcond[5]=(((cj4*x3941*x3944))+((cj4*x3944*x3945))+(((-1.0)*x3939*x3954))+((x3938*x3939))+((x3938*x3942))+x3955+(((-1.0)*x3957))+(((-1.0)*x3942*x3954))+((x3937*x3947))+(((-1.0)*x3944*x3947))+(((-1.0)*cj4*x3937*x3945))+(((-1.0)*cj4*x3937*x3941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3958=((1.0)*sj1);
IkReal x3959=(sj4*sj5);
IkReal x3960=(cj4*r22);
IkReal x3961=(cj4*r12);
IkReal x3962=((1.0)*cj1);
IkReal x3963=(cj5*r21*sj4);
IkReal x3964=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r10*x3959*x3962))+(((-1.0)*x3962*x3964))+(((-1.0)*x3958*x3963))+(((-1.0)*x3958*x3960))+(((-1.0)*r20*x3958*x3959))+(((-1.0)*x3961*x3962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x3959))+((cj1*x3963))+((cj1*x3960))+(((-1.0)*x3958*x3964))+(((-1.0)*x3958*x3961))+(((-1.0)*r10*x3958*x3959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3959*x3962))+(((-1.0)*x3962*x3964))+(((-1.0)*x3958*x3963))+(((-1.0)*x3958*x3960))+(((-1.0)*r20*x3958*x3959))+(((-1.0)*x3961*x3962))))+IKsqr((((cj1*r20*x3959))+((cj1*x3963))+((cj1*x3960))+(((-1.0)*x3958*x3964))+(((-1.0)*x3958*x3961))+(((-1.0)*r10*x3958*x3959))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x3959*x3962))+(((-1.0)*x3962*x3964))+(((-1.0)*x3958*x3963))+(((-1.0)*x3958*x3960))+(((-1.0)*r20*x3958*x3959))+(((-1.0)*x3961*x3962))), (((cj1*r20*x3959))+((cj1*x3963))+((cj1*x3960))+(((-1.0)*x3958*x3964))+(((-1.0)*x3958*x3961))+(((-1.0)*r10*x3958*x3959))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3965=IKcos(j2);
IkReal x3966=IKsin(j2);
IkReal x3967=(r22*sj4);
IkReal x3968=(cj5*r10);
IkReal x3969=((0.99999999995)*cj3);
IkReal x3970=((9.9999999995e-6)*sj3);
IkReal x3971=((1.36279999993186e-7)*cj4);
IkReal x3972=(cj5*r11);
IkReal x3973=(cj5*r21);
IkReal x3974=(r10*sj5);
IkReal x3975=((1.0)*sj4);
IkReal x3976=((1.0)*sj1);
IkReal x3977=((9.9999999995e-6)*cj3);
IkReal x3978=(cj5*r20);
IkReal x3979=(r20*sj5);
IkReal x3980=((1.0)*cj4);
IkReal x3981=((0.99999999995)*sj3);
IkReal x3982=((0.391671)*sj1);
IkReal x3983=((0.121761000001269)*sj5);
IkReal x3984=(r11*sj5);
IkReal x3985=(r12*sj4);
IkReal x3986=(r21*sj5);
IkReal x3987=(cj1*x3965);
IkReal x3988=(cj1*x3966);
IkReal x3989=(cj4*x3979);
IkReal x3990=(x3966*x3976);
evalcond[0]=((((-1.0)*x3990))+(((-1.0)*r22*x3980))+x3987+(((-1.0)*x3973*x3975))+(((-1.0)*x3975*x3979)));
evalcond[1]=((((-1.0)*x3972*x3975))+(((-1.0)*r12*x3980))+(((-1.0)*x3965*x3976))+(((-1.0)*x3974*x3975))+(((-1.0)*x3988)));
evalcond[2]=((((-1.0)*x3966*x3982))+((r21*x3983))+(((-1.36279999993186e-7)*x3967))+((x3971*x3979))+((x3971*x3973))+(((-3.9e-7)*x3973))+(((-3.9e-7)*x3979))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((0.391671)*x3987))+(((-0.121761000001269)*x3978)));
evalcond[3]=(((r11*x3983))+(((1.92e-6)*cj1))+(((-1.0)*x3965*x3982))+((x3971*x3974))+((x3971*x3972))+(((-0.391671)*x3988))+(((-3.9e-7)*x3972))+(((-3.9e-7)*x3974))+(((-1.0)*py))+(((-0.52362)*sj1))+(((-1.36279999993186e-7)*x3985))+(((-0.121761000001269)*x3968)));
evalcond[4]=(((x3970*x3989))+(((-1.0)*cj4*x3969*x3973))+(((-1.0)*x3977*x3978))+((x3977*x3986))+((cj4*x3970*x3973))+x3988+((x3981*x3986))+(((-1.0)*x3978*x3981))+(((-1.0)*x3969*x3989))+(((-1.0)*x3967*x3970))+((x3967*x3969))+((sj1*x3965)));
evalcond[5]=((((-1.0)*cj4*x3969*x3972))+(((-1.0)*cj4*x3969*x3974))+(((-1.0)*x3990))+((x3977*x3984))+(((-1.0)*x3968*x3977))+((cj4*x3970*x3972))+((cj4*x3970*x3974))+((x3969*x3985))+x3987+((x3981*x3984))+(((-1.0)*x3970*x3985))+(((-1.0)*x3968*x3981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3991=((1.0)*sj1);
IkReal x3992=(sj4*sj5);
IkReal x3993=(cj4*r12);
IkReal x3994=(cj4*r22);
IkReal x3995=(cj5*sj4);
IkReal x3996=(cj1*x3995);
if( IKabs(((((-1.0)*r21*x3991*x3995))+((cj1*x3993))+((r11*x3996))+((cj1*r10*x3992))+(((-1.0)*x3991*x3994))+(((-1.0)*r20*x3991*x3992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x3992))+((r21*x3996))+((cj1*x3994))+((r10*sj1*x3992))+((sj1*x3993))+((r11*sj1*x3995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x3991*x3995))+((cj1*x3993))+((r11*x3996))+((cj1*r10*x3992))+(((-1.0)*x3991*x3994))+(((-1.0)*r20*x3991*x3992))))+IKsqr((((cj1*r20*x3992))+((r21*x3996))+((cj1*x3994))+((r10*sj1*x3992))+((sj1*x3993))+((r11*sj1*x3995))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x3991*x3995))+((cj1*x3993))+((r11*x3996))+((cj1*r10*x3992))+(((-1.0)*x3991*x3994))+(((-1.0)*r20*x3991*x3992))), (((cj1*r20*x3992))+((r21*x3996))+((cj1*x3994))+((r10*sj1*x3992))+((sj1*x3993))+((r11*sj1*x3995))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3997=IKcos(j2);
IkReal x3998=IKsin(j2);
IkReal x3999=(r22*sj4);
IkReal x4000=(cj5*r10);
IkReal x4001=((0.99999999995)*cj3);
IkReal x4002=((9.9999999995e-6)*sj3);
IkReal x4003=((1.36279999993186e-7)*cj4);
IkReal x4004=(cj5*r11);
IkReal x4005=(cj5*r21);
IkReal x4006=(r10*sj5);
IkReal x4007=((1.0)*sj4);
IkReal x4008=(r12*sj4);
IkReal x4009=((9.9999999995e-6)*cj3);
IkReal x4010=(cj5*r20);
IkReal x4011=(r20*sj5);
IkReal x4012=((1.0)*cj4);
IkReal x4013=((0.99999999995)*sj3);
IkReal x4014=((0.121761000001269)*sj5);
IkReal x4015=(r11*sj5);
IkReal x4016=(r21*sj5);
IkReal x4017=(sj1*x3997);
IkReal x4018=(cj1*x3998);
IkReal x4019=(cj1*x3997);
IkReal x4020=(cj4*x4011);
IkReal x4021=(sj1*x3998);
IkReal x4022=(x4018+x4017);
evalcond[0]=((((-1.0)*r12*x4012))+x4022+(((-1.0)*x4006*x4007))+(((-1.0)*x4004*x4007)));
evalcond[1]=((((-1.0)*r22*x4012))+(((-1.0)*x4021))+x4019+(((-1.0)*x4007*x4011))+(((-1.0)*x4005*x4007)));
evalcond[2]=(((x4003*x4011))+(((-3.9e-7)*x4011))+(((-0.391671)*x4021))+(((-3.9e-7)*x4005))+(((-1.36279999993186e-7)*x3999))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((x4003*x4005))+((r21*x4014))+(((0.52362)*cj1))+(((0.391671)*x4019))+(((-0.121761000001269)*x4010)));
evalcond[3]=((((-3.9e-7)*x4006))+(((-3.9e-7)*x4004))+(((0.52362)*sj1))+(((-0.121761000001269)*x4000))+(((-1.0)*py))+((x4003*x4006))+((x4003*x4004))+(((-1.36279999993186e-7)*x4008))+(((-1.92e-6)*cj1))+(((0.391671)*x4017))+(((0.391671)*x4018))+((r11*x4014)));
evalcond[4]=((((-1.0)*x3999*x4002))+((cj4*x4002*x4005))+(((-1.0)*x4001*x4020))+((x4002*x4020))+(((-1.0)*cj4*x4001*x4005))+((x4013*x4016))+x4022+(((-1.0)*x4009*x4010))+((x4009*x4016))+(((-1.0)*x4010*x4013))+((x3999*x4001)));
evalcond[5]=(((x4001*x4008))+((cj4*x4002*x4006))+((cj4*x4002*x4004))+(((-1.0)*x4000*x4013))+(((-1.0)*x4019))+(((-1.0)*x4002*x4008))+(((-1.0)*x4000*x4009))+(((-1.0)*cj4*x4001*x4004))+(((-1.0)*cj4*x4001*x4006))+((x4013*x4015))+x4021+((x4009*x4015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4023=((1.0)*sj1);
IkReal x4024=(sj4*sj5);
IkReal x4025=(cj0*r20);
IkReal x4026=(cj4*r12);
IkReal x4027=(cj0*cj1);
IkReal x4028=(cj4*r22);
IkReal x4029=((1.0)*cj1);
IkReal x4030=(cj5*sj4);
CheckValue<IkReal> x4031 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4024*x4029))+(((-1.0)*cj0*r21*x4023*x4030))+(((-1.0)*x4023*x4024*x4025))+(((-1.0)*x4026*x4029))+(((-1.0)*cj0*x4023*x4028))+(((-1.0)*r11*x4029*x4030)))),IkReal(((((-1.0)*r10*x4023*x4024))+(((-1.0)*x4023*x4026))+((r21*x4027*x4030))+((cj1*x4024*x4025))+((x4027*x4028))+(((-1.0)*r11*x4023*x4030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4031.valid){
continue;
}
CheckValue<IkReal> x4032=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x4032.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4031.value)+(((1.5707963267949)*(x4032.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x4033=IKsin(j2);
IkReal x4034=IKcos(j2);
IkReal x4035=((9.9999999995e-6)*sj5);
IkReal x4036=(cj3*r01);
IkReal x4037=(cj4*r00);
IkReal x4038=((3.9e-7)*cj5);
IkReal x4039=((1.36279999993186e-7)*sj5);
IkReal x4040=(cj4*r10);
IkReal x4041=((9.9999999995e-6)*cj5);
IkReal x4042=(cj3*r20);
IkReal x4043=(cj0*sj1);
IkReal x4044=((0.121761000001269)*sj5);
IkReal x4045=(cj4*r01);
IkReal x4046=((1.36279999993186e-7)*cj5);
IkReal x4047=((0.99999999995)*cj3);
IkReal x4048=(r02*sj4);
IkReal x4049=(r11*sj3);
IkReal x4050=((0.99999999995)*sj5);
IkReal x4051=((3.9e-7)*sj5);
IkReal x4052=((0.121761000001269)*cj5);
IkReal x4053=((1.0)*sj4);
IkReal x4054=(r22*sj4);
IkReal x4055=((9.9999999995e-6)*sj3);
IkReal x4056=(r12*sj4);
IkReal x4057=((1.0)*cj4);
IkReal x4058=(cj5*r21);
IkReal x4059=(cj4*cj5);
IkReal x4060=(r21*sj3);
IkReal x4061=(cj4*r20);
IkReal x4062=((1.92e-6)*cj1);
IkReal x4063=(sj0*sj1);
IkReal x4064=(cj1*x4033);
IkReal x4065=((1.0)*x4034);
IkReal x4066=((0.391671)*x4034);
IkReal x4067=(sj1*x4033);
IkReal x4068=(cj1*x4034);
IkReal x4069=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*x4053*x4058))+(((-1.0)*r20*sj5*x4053))+x4068+(((-1.0)*x4067))+(((-1.0)*r22*x4057)));
evalcond[1]=(((sj0*x4064))+((x4034*x4063))+(((-1.0)*r00*sj5*x4053))+(((-1.0)*r02*x4057))+(((-1.0)*cj5*r01*x4053)));
evalcond[2]=((((-1.0)*cj5*r11*x4053))+(((-1.0)*x4043*x4065))+(((-1.0)*r10*sj5*x4053))+(((-1.0)*r12*x4057))+(((-1.0)*cj0*x4064)));
evalcond[3]=(((cj1*x4066))+(((-1.0)*r20*x4051))+(((-1.0)*r20*x4052))+((x4039*x4061))+(((-1.36279999993186e-7)*x4054))+((r21*x4044))+(((-1.0)*r21*x4038))+(((-0.391671)*x4067))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((cj4*r21*x4046)));
evalcond[4]=((((0.001538)*cj0))+(((-1.36279999993186e-7)*x4048))+(((-1.0)*r01*x4038))+((x4045*x4046))+((x4037*x4039))+(((0.52362)*x4063))+((x4063*x4066))+(((0.391671)*sj0*x4064))+(((-1.0)*px))+(((-1.0)*r00*x4052))+(((-1.0)*r00*x4051))+((r01*x4044))+(((-1.0)*sj0*x4062)));
evalcond[5]=((((0.001538)*sj0))+(((-1.0)*x4043*x4066))+(((-1.36279999993186e-7)*x4056))+((x4039*x4040))+(((-0.391671)*cj0*x4064))+(((-0.52362)*x4043))+(((-1.0)*py))+((r11*x4044))+(((-1.0)*r10*x4051))+(((-1.0)*r10*x4052))+(((-1.0)*r11*x4038))+((cj0*x4062))+((cj4*r11*x4046)));
evalcond[6]=((((-1.0)*r20*x4069))+(((-1.0)*cj4*x4042*x4050))+((sj3*x4035*x4061))+x4064+(((-1.0)*x4041*x4042))+(((-1.0)*x4054*x4055))+((sj1*x4034))+((x4050*x4060))+((cj4*x4041*x4060))+(((-1.0)*cj4*x4047*x4058))+((x4047*x4054))+((cj3*r21*x4035)));
evalcond[7]=(((sj3*x4041*x4045))+((sj3*x4035*x4037))+(((-1.0)*cj1*sj0*x4065))+((x4035*x4036))+((x4033*x4063))+((r01*sj3*x4050))+(((-0.99999999995)*x4036*x4059))+(((-1.0)*cj3*r00*x4041))+(((-1.0)*sj5*x4037*x4047))+(((-1.0)*r00*x4069))+(((-1.0)*x4048*x4055))+((x4047*x4048)));
evalcond[8]=((((-1.0)*x4055*x4056))+(((-1.0)*cj3*r10*x4041))+((x4049*x4050))+((sj3*x4035*x4040))+(((-1.0)*r11*x4047*x4059))+(((-1.0)*r10*x4069))+(((-1.0)*sj5*x4040*x4047))+((cj3*r11*x4035))+((cj0*x4068))+((x4047*x4056))+(((-1.0)*x4033*x4043))+((cj4*x4041*x4049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4070=((1.0)*sj0);
IkReal x4071=(cj1*sj4);
IkReal x4072=(r20*sj5);
IkReal x4073=(cj4*sj1);
IkReal x4074=(r00*sj5);
IkReal x4075=(sj1*sj4);
IkReal x4076=(cj1*cj4);
IkReal x4077=(cj5*x4075);
CheckValue<IkReal> x4078 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4070*x4073))+(((-1.0)*x4070*x4072*x4075))+((cj5*r01*x4071))+((x4071*x4074))+((r02*x4076))+(((-1.0)*r21*x4070*x4077)))),IkReal((((sj0*x4071*x4072))+((x4074*x4075))+((cj5*r21*sj0*x4071))+((r01*x4077))+((r22*sj0*x4076))+((r02*x4073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4078.valid){
continue;
}
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x4079.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4078.value)+(((1.5707963267949)*(x4079.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x4080=IKsin(j2);
IkReal x4081=IKcos(j2);
IkReal x4082=((9.9999999995e-6)*sj5);
IkReal x4083=(cj3*r01);
IkReal x4084=(cj4*r00);
IkReal x4085=((3.9e-7)*cj5);
IkReal x4086=((1.36279999993186e-7)*sj5);
IkReal x4087=(cj4*r10);
IkReal x4088=((9.9999999995e-6)*cj5);
IkReal x4089=(cj3*r20);
IkReal x4090=(cj0*sj1);
IkReal x4091=((0.121761000001269)*sj5);
IkReal x4092=(cj4*r01);
IkReal x4093=((1.36279999993186e-7)*cj5);
IkReal x4094=((0.99999999995)*cj3);
IkReal x4095=(r02*sj4);
IkReal x4096=(r11*sj3);
IkReal x4097=((0.99999999995)*sj5);
IkReal x4098=((3.9e-7)*sj5);
IkReal x4099=((0.121761000001269)*cj5);
IkReal x4100=((1.0)*sj4);
IkReal x4101=(r22*sj4);
IkReal x4102=((9.9999999995e-6)*sj3);
IkReal x4103=(r12*sj4);
IkReal x4104=((1.0)*cj4);
IkReal x4105=(cj5*r21);
IkReal x4106=(cj4*cj5);
IkReal x4107=(r21*sj3);
IkReal x4108=(cj4*r20);
IkReal x4109=((1.92e-6)*cj1);
IkReal x4110=(sj0*sj1);
IkReal x4111=(cj1*x4080);
IkReal x4112=((1.0)*x4081);
IkReal x4113=((0.391671)*x4081);
IkReal x4114=(sj1*x4080);
IkReal x4115=(cj1*x4081);
IkReal x4116=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*r20*sj5*x4100))+(((-1.0)*r22*x4104))+x4115+(((-1.0)*x4114))+(((-1.0)*x4100*x4105)));
evalcond[1]=(((sj0*x4111))+((x4081*x4110))+(((-1.0)*r00*sj5*x4100))+(((-1.0)*cj5*r01*x4100))+(((-1.0)*r02*x4104)));
evalcond[2]=((((-1.0)*cj5*r11*x4100))+(((-1.0)*r12*x4104))+(((-1.0)*cj0*x4111))+(((-1.0)*x4090*x4112))+(((-1.0)*r10*sj5*x4100)));
evalcond[3]=((((-1.0)*r21*x4085))+(((-0.391671)*x4114))+(((-1.0)*r20*x4099))+(((-1.0)*r20*x4098))+((x4086*x4108))+((r21*x4091))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x4101))+((cj1*x4113))+((cj4*r21*x4093)));
evalcond[4]=((((0.001538)*cj0))+(((-1.36279999993186e-7)*x4095))+((r01*x4091))+((x4084*x4086))+(((0.52362)*x4110))+(((0.391671)*sj0*x4111))+(((-1.0)*px))+(((-1.0)*r01*x4085))+(((-1.0)*r00*x4099))+(((-1.0)*r00*x4098))+(((-1.0)*sj0*x4109))+((x4110*x4113))+((x4092*x4093)));
evalcond[5]=((((0.001538)*sj0))+((x4086*x4087))+(((-1.0)*r10*x4098))+(((-1.0)*r10*x4099))+(((-1.0)*r11*x4085))+((cj0*x4109))+(((-0.52362)*x4090))+((r11*x4091))+(((-1.0)*py))+(((-0.391671)*cj0*x4111))+(((-1.36279999993186e-7)*x4103))+(((-1.0)*x4090*x4113))+((cj4*r11*x4093)));
evalcond[6]=((((-1.0)*cj4*x4089*x4097))+(((-1.0)*r20*x4116))+(((-1.0)*cj4*x4094*x4105))+((x4094*x4101))+((sj3*x4082*x4108))+x4111+((cj4*x4088*x4107))+(((-1.0)*x4088*x4089))+((x4097*x4107))+((sj1*x4081))+(((-1.0)*x4101*x4102))+((cj3*r21*x4082)));
evalcond[7]=((((-1.0)*r00*x4116))+((x4082*x4083))+(((-1.0)*x4095*x4102))+(((-0.99999999995)*x4083*x4106))+((x4094*x4095))+((x4080*x4110))+((sj3*x4088*x4092))+((sj3*x4082*x4084))+((r01*sj3*x4097))+(((-1.0)*sj5*x4084*x4094))+(((-1.0)*cj3*r00*x4088))+(((-1.0)*cj1*sj0*x4112)));
evalcond[8]=(((cj4*x4088*x4096))+(((-1.0)*sj5*x4087*x4094))+(((-1.0)*x4080*x4090))+((cj0*x4115))+((cj3*r11*x4082))+((sj3*x4082*x4087))+(((-1.0)*r10*x4116))+((x4094*x4103))+(((-1.0)*x4102*x4103))+(((-1.0)*r11*x4094*x4106))+(((-1.0)*cj3*r10*x4088))+((x4096*x4097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4117=cj0*cj0;
IkReal x4118=(cj0*py);
IkReal x4119=(cj0*sj0);
IkReal x4120=(cj0*r11);
IkReal x4121=(r20*sj5);
IkReal x4122=((0.391671)*sj4);
IkReal x4123=((1.36279999993186e-7)*cj4);
IkReal x4124=(cj0*cj4);
IkReal x4125=(r10*sj5);
IkReal x4126=(cj5*r21);
IkReal x4127=(cj5*sj4);
IkReal x4128=(cj4*cj5);
IkReal x4129=(cj0*sj4);
IkReal x4130=(cj0*cj5*r10);
IkReal x4131=((((0.121761000001269)*r21*sj5))+(((-1.0)*pz))+(((0.391671)*cj4*r22))+((x4121*x4123))+((x4121*x4122))+((x4123*x4126))+((x4122*x4126))+(((-3.9e-7)*x4126))+(((-3.9e-7)*x4121))+(((-1.36279999993186e-7)*r22*sj4))+(((-0.121761000001269)*cj5*r20)));
IkReal x4132=(x4117*x4131);
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(IKsign(x4117),-1);
if(!x4133.valid){
continue;
}
CheckValue<IkReal> x4134 = IKatan2WithCheck(IkReal(((((-0.4459933349777)*r12*x4129))+(((398478.092629152)*sj5*x4120))+(((-398478.092629152)*x4130))+(((1281792.306375)*r12*x4124))+(((1281792.306375)*x4120*x4127))+(((0.4459933349777)*x4124*x4125))+(((0.4459933349777)*x4120*x4128))+(((5033.29725)*x4119))+(((-1.27632375)*cj5*x4120))+(((-3272625.0)*x4118))+(((-12.0)*x4132))+(((1281792.306375)*x4125*x4129))+(((-1.27632375)*cj0*x4125)))),IkReal(((((-0.018456)*x4119))+(((-3272625.0)*x4132))+(((-1.46113200001522)*sj5*x4120))+(((12.0)*x4118))+(((-4.700052)*x4120*x4127))+(((-1.63535999991823e-6)*x4124*x4125))+(((-4.700052)*r12*x4124))+(((-4.700052)*x4125*x4129))+(((-1.63535999991823e-6)*x4120*x4128))+(((1.46113200001522)*x4130))+(((4.68e-6)*cj5*x4120))+(((4.68e-6)*cj0*x4125))+(((1.63535999991823e-6)*r12*x4129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4134.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4133.value)))+(x4134.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x4135=IKcos(j1);
IkReal x4136=cj0*cj0;
IkReal x4137=IKsin(j1);
IkReal x4138=sj0*sj0;
IkReal x4139=((1.36279999993186e-7)*cj0);
IkReal x4140=(r12*sj4);
IkReal x4141=(r21*sj5);
IkReal x4142=((0.391670999980416)*sj3);
IkReal x4143=(r20*sj5);
IkReal x4144=((0.391671)*sj4);
IkReal x4145=((3.9e-7)*cj5);
IkReal x4146=((1.0)*pz);
IkReal x4147=((3.91670999980416e-6)*cj3);
IkReal x4148=(r00*sj5);
IkReal x4149=(r11*sj5);
IkReal x4150=(cj0*sj0);
IkReal x4151=(cj5*r11);
IkReal x4152=(r02*sj4);
IkReal x4153=(cj0*r21);
IkReal x4154=((3.9e-7)*sj0);
IkReal x4155=((1.36279999993186e-7)*sj0);
IkReal x4156=(r01*sj0);
IkReal x4157=((0.121761000001269)*sj5);
IkReal x4158=(cj5*r10);
IkReal x4159=((3.91670999980416e-6)*sj3);
IkReal x4160=(cj5*r00);
IkReal x4161=(cj0*r01);
IkReal x4162=((1.36279999993186e-7)*cj4);
IkReal x4163=(r22*sj4);
IkReal x4164=((3.9e-7)*cj0);
IkReal x4165=(cj4*sj0);
IkReal x4166=((0.391671)*r12);
IkReal x4167=(cj5*r21);
IkReal x4168=((1.0)*px);
IkReal x4169=((0.391670999980416)*cj3);
IkReal x4170=(cj0*cj4);
IkReal x4171=((0.121761000001269)*cj0);
IkReal x4172=(r01*sj5);
IkReal x4173=(r10*sj5);
IkReal x4174=((0.391671)*r02);
IkReal x4175=(cj5*r20);
IkReal x4176=((1.0)*py);
IkReal x4177=((0.001538)*x4150);
IkReal x4178=((1.92e-6)*x4137);
IkReal x4179=((0.52362)*x4135);
IkReal x4180=((0.52362)*x4137);
IkReal x4181=(sj5*x4162);
IkReal x4182=((0.121761000001269)*x4149);
IkReal x4183=(cj4*x4159);
IkReal x4184=((0.121761000001269)*cj5*sj0);
IkReal x4185=(cj4*cj5*r01);
IkReal x4186=((3.9e-7)*x4173);
IkReal x4187=((1.92e-6)*x4135);
IkReal x4188=(sj0*x4175);
IkReal x4189=(x4150*x4180);
IkReal x4190=(x4150*x4187);
evalcond[0]=(((x4143*x4144))+((x4143*x4162))+((x4144*x4167))+(((0.121761000001269)*x4141))+(((0.391671)*cj4*r22))+x4178+x4179+(((-3.9e-7)*x4143))+(((-1.0)*x4146))+(((-0.121761000001269)*x4175))+(((-1.36279999993186e-7)*x4163))+((x4162*x4167))+(((-1.0)*r21*x4145)));
evalcond[1]=((((-1.0)*cj0*r11*x4145))+((cj0*x4144*x4151))+((cj4*x4139*x4173))+(((-1.0)*x4136*x4180))+(((-1.0)*x4164*x4173))+(((-1.0)*x4158*x4171))+((cj0*x4144*x4173))+((x4149*x4171))+(((-1.0)*x4139*x4140))+((cj4*x4139*x4151))+(((-1.0)*cj0*x4176))+x4177+((x4166*x4170))+((x4136*x4187)));
evalcond[2]=((((-1.0)*x4165*x4174))+((x4145*x4156))+(((-1.0)*x4177))+(((-1.0)*x4155*x4185))+(((-1.0)*x4138*x4180))+((x4152*x4155))+(((-1.0)*x4156*x4157))+(((-1.0)*cj5*x4144*x4156))+(((0.121761000001269)*sj0*x4160))+(((-1.0)*cj4*x4148*x4155))+((px*sj0))+((x4148*x4154))+((x4138*x4187))+(((-1.0)*sj0*x4144*x4148)));
evalcond[3]=(((x4145*x4153))+((x4142*x4149))+(((-1.0)*cj4*x4151*x4169))+(((-1.0)*x4141*x4171))+(((-1.0)*cj4*x4139*x4167))+(((-1.0)*x4147*x4158))+((x4173*x4183))+((x4143*x4164))+(((-1.0)*cj4*x4169*x4173))+((x4140*x4169))+(((-1.0)*x4140*x4159))+((x4139*x4163))+(((-1.0)*x4142*x4158))+(((-1.0)*cj0*x4178))+(((-1.0)*cj0*x4179))+((x4171*x4175))+((x4147*x4149))+((cj0*pz))+((x4151*x4183))+(((-1.0)*cj4*x4139*x4143)));
evalcond[4]=(((cj4*x4143*x4155))+(((0.121761000001269)*sj0*x4141))+(((-1.0)*x4142*x4160))+((cj4*x4155*x4167))+(((-1.0)*x4169*x4185))+(((-1.0)*cj4*x4148*x4169))+((x4148*x4183))+(((-1.0)*x4147*x4160))+(((-1.0)*r21*sj0*x4145))+(((-1.0)*sj0*x4146))+(((-1.0)*x4155*x4163))+((sj0*x4179))+((sj0*x4178))+(((-1.0)*x4152*x4159))+(((-1.0)*x4143*x4154))+((x4152*x4169))+((cj5*r01*x4183))+((x4142*x4172))+(((-0.121761000001269)*x4188))+((x4147*x4172)));
evalcond[5]=((((0.001538)*sj0))+(((-0.121761000001269)*x4158))+(((-1.0)*x4176))+(((-1.0)*x4186))+(((-1.0)*cj0*x4180))+(((-1.0)*cj0*x4147*x4175))+(((-1.0)*cj4*cj5*x4153*x4169))+((x4151*x4162))+((x4162*x4173))+(((-1.0)*cj0*x4159*x4163))+((cj0*x4141*x4142))+((cj0*x4141*x4147))+x4182+(((-1.0)*r11*x4145))+(((-1.0)*x4143*x4169*x4170))+((x4143*x4159*x4170))+((cj5*x4153*x4183))+((cj0*x4163*x4169))+(((-1.0)*cj0*x4142*x4175))+(((-1.36279999993186e-7)*x4140))+((cj0*x4187)));
evalcond[6]=((((0.001538)*cj0))+(((-1.36279999993186e-7)*x4152))+(((-1.0)*sj0*x4187))+(((-1.0)*sj0*x4163*x4169))+((x4148*x4162))+((sj0*x4180))+((r01*x4157))+(((-1.0)*x4168))+((x4165*x4167*x4169))+(((-1.0)*x4143*x4159*x4165))+(((-0.121761000001269)*x4160))+(((-1.0)*r01*x4145))+((cj5*r01*x4162))+(((-3.9e-7)*x4148))+(((-1.0)*x4159*x4165*x4167))+((x4142*x4188))+(((-1.0)*sj0*x4141*x4147))+(((-1.0)*sj0*x4141*x4142))+((x4143*x4165*x4169))+((sj0*x4159*x4163))+((x4147*x4188)));
evalcond[7]=(((x4140*x4155))+(((-1.0)*sj0*x4182))+(((0.121761000001269)*sj0*x4158))+(((-1.0)*x4190))+((cj0*x4144*x4148))+((x4170*x4174))+(((-0.001538)*x4138))+((r11*sj0*x4145))+x4189+((cj5*x4144*x4161))+(((-1.0)*cj4*x4151*x4155))+((x4154*x4173))+((py*sj0))+(((-1.0)*cj4*x4155*x4173)));
evalcond[8]=((((-1.0)*x4145*x4161))+(((-1.0)*x4165*x4166))+(((-1.0)*x4160*x4171))+(((-1.0)*x4190))+(((-1.0)*x4148*x4164))+((cj4*x4139*x4148))+(((-1.0)*sj0*x4144*x4173))+((x4157*x4161))+x4189+(((-1.0)*x4139*x4152))+(((-1.0)*sj0*x4144*x4151))+(((-1.0)*cj0*x4168))+((x4139*x4185))+(((0.001538)*x4136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4191=(sj1*sj4);
IkReal x4192=(cj5*r01);
IkReal x4193=(r20*sj5);
IkReal x4194=(cj4*sj1);
IkReal x4195=(r00*sj5);
IkReal x4196=(cj1*sj4);
IkReal x4197=(cj5*r21);
IkReal x4198=(cj1*cj4);
if( IKabs((((r02*x4198))+(((-1.0)*r22*x4194))+((x4192*x4196))+(((-1.0)*x4191*x4197))+(((-1.0)*x4191*x4193))+((x4195*x4196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4196*x4197))+((r02*x4194))+((x4193*x4196))+((x4191*x4195))+((x4191*x4192))+((r22*x4198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x4198))+(((-1.0)*r22*x4194))+((x4192*x4196))+(((-1.0)*x4191*x4197))+(((-1.0)*x4191*x4193))+((x4195*x4196))))+IKsqr((((x4196*x4197))+((r02*x4194))+((x4193*x4196))+((x4191*x4195))+((x4191*x4192))+((r22*x4198))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x4198))+(((-1.0)*r22*x4194))+((x4192*x4196))+(((-1.0)*x4191*x4197))+(((-1.0)*x4191*x4193))+((x4195*x4196))), (((x4196*x4197))+((r02*x4194))+((x4193*x4196))+((x4191*x4195))+((x4191*x4192))+((r22*x4198))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4199=IKcos(j2);
IkReal x4200=IKsin(j2);
IkReal x4201=(r22*sj4);
IkReal x4202=((0.99999999995)*cj3);
IkReal x4203=(r01*sj5);
IkReal x4204=((9.9999999995e-6)*cj3);
IkReal x4205=((1.36279999993186e-7)*cj4);
IkReal x4206=(cj5*r01);
IkReal x4207=(r20*sj5);
IkReal x4208=((9.9999999995e-6)*sj3);
IkReal x4209=((0.99999999995)*sj3);
IkReal x4210=(r00*sj5);
IkReal x4211=(cj5*r21);
IkReal x4212=(r02*sj4);
IkReal x4213=((1.0)*sj4);
IkReal x4214=(cj5*r20);
IkReal x4215=((1.0)*cj4);
IkReal x4216=(r21*sj5);
IkReal x4217=(cj5*r00);
IkReal x4218=(sj1*x4199);
IkReal x4219=(cj1*x4200);
IkReal x4220=(cj1*x4199);
IkReal x4221=(sj1*x4200);
IkReal x4222=(x4219+x4218);
evalcond[0]=((((-1.0)*x4210*x4213))+(((-1.0)*r02*x4215))+(((-1.0)*x4206*x4213))+x4222);
evalcond[1]=((((-1.0)*x4221))+(((-1.0)*x4207*x4213))+(((-1.0)*r22*x4215))+x4220+(((-1.0)*x4211*x4213)));
evalcond[2]=(((x4205*x4211))+(((0.121761000001269)*x4216))+(((0.391671)*x4220))+((x4205*x4207))+(((1.92e-6)*sj1))+(((-0.121761000001269)*x4214))+(((-1.0)*pz))+(((-1.36279999993186e-7)*x4201))+(((0.52362)*cj1))+(((-3.9e-7)*x4207))+(((-0.391671)*x4221))+(((-3.9e-7)*x4211)));
evalcond[3]=(((x4205*x4210))+(((0.52362)*sj1))+((x4205*x4206))+(((0.121761000001269)*x4203))+(((-0.121761000001269)*x4217))+(((-1.0)*px))+(((0.391671)*x4218))+(((0.391671)*x4219))+(((-1.92e-6)*cj1))+(((-3.9e-7)*x4206))+(((-3.9e-7)*x4210))+(((-1.36279999993186e-7)*x4212)));
evalcond[4]=(((cj4*x4208*x4211))+(((-1.0)*x4204*x4214))+(((-1.0)*cj4*x4202*x4211))+(((-1.0)*x4201*x4208))+((x4209*x4216))+((cj4*x4207*x4208))+((x4201*x4202))+x4222+(((-1.0)*cj4*x4202*x4207))+((x4204*x4216))+(((-1.0)*x4209*x4214)));
evalcond[5]=(((cj4*x4208*x4210))+(((-1.0)*x4204*x4217))+(((-1.0)*cj4*x4202*x4210))+((x4202*x4212))+(((-1.0)*x4220))+((cj4*x4206*x4208))+((x4203*x4204))+((x4203*x4209))+(((-1.0)*x4208*x4212))+x4221+(((-1.0)*cj4*x4202*x4206))+(((-1.0)*x4209*x4217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4223=((1.0)*sj1);
IkReal x4224=(sj4*sj5);
IkReal x4225=(cj4*r22);
IkReal x4226=(cj5*sj4);
IkReal x4227=(cj4*r02);
IkReal x4228=((1.0)*cj1);
if( IKabs(((((-1.0)*x4227*x4228))+(((-1.0)*r00*x4224*x4228))+(((-1.0)*x4223*x4225))+(((-1.0)*r01*x4226*x4228))+(((-1.0)*r20*x4223*x4224))+(((-1.0)*r21*x4223*x4226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x4226))+(((-1.0)*x4223*x4227))+((cj1*x4225))+(((-1.0)*r00*x4223*x4224))+(((-1.0)*r01*x4223*x4226))+((cj1*r20*x4224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4227*x4228))+(((-1.0)*r00*x4224*x4228))+(((-1.0)*x4223*x4225))+(((-1.0)*r01*x4226*x4228))+(((-1.0)*r20*x4223*x4224))+(((-1.0)*r21*x4223*x4226))))+IKsqr((((cj1*r21*x4226))+(((-1.0)*x4223*x4227))+((cj1*x4225))+(((-1.0)*r00*x4223*x4224))+(((-1.0)*r01*x4223*x4226))+((cj1*r20*x4224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4227*x4228))+(((-1.0)*r00*x4224*x4228))+(((-1.0)*x4223*x4225))+(((-1.0)*r01*x4226*x4228))+(((-1.0)*r20*x4223*x4224))+(((-1.0)*r21*x4223*x4226))), (((cj1*r21*x4226))+(((-1.0)*x4223*x4227))+((cj1*x4225))+(((-1.0)*r00*x4223*x4224))+(((-1.0)*r01*x4223*x4226))+((cj1*r20*x4224))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4229=IKcos(j2);
IkReal x4230=IKsin(j2);
IkReal x4231=(r22*sj4);
IkReal x4232=((0.99999999995)*cj3);
IkReal x4233=(r01*sj5);
IkReal x4234=((9.9999999995e-6)*cj3);
IkReal x4235=((1.36279999993186e-7)*cj4);
IkReal x4236=(cj5*r01);
IkReal x4237=((0.99999999995)*sj3);
IkReal x4238=(r20*sj5);
IkReal x4239=((9.9999999995e-6)*sj3);
IkReal x4240=(r00*sj5);
IkReal x4241=(cj5*r21);
IkReal x4242=(r02*sj4);
IkReal x4243=((1.0)*sj1);
IkReal x4244=(cj5*r20);
IkReal x4245=((1.0)*sj4);
IkReal x4246=((1.0)*cj4);
IkReal x4247=((0.391671)*sj1);
IkReal x4248=(r21*sj5);
IkReal x4249=(cj5*r00);
IkReal x4250=(cj1*x4229);
IkReal x4251=(cj1*x4230);
IkReal x4252=(x4230*x4243);
evalcond[0]=((((-1.0)*x4241*x4245))+(((-1.0)*r22*x4246))+(((-1.0)*x4252))+(((-1.0)*x4238*x4245))+x4250);
evalcond[1]=((((-1.0)*x4240*x4245))+(((-1.0)*x4236*x4245))+(((-1.0)*x4251))+(((-1.0)*r02*x4246))+(((-1.0)*x4229*x4243)));
evalcond[2]=(((x4235*x4238))+(((-0.121761000001269)*x4244))+((x4235*x4241))+(((-1.0)*x4230*x4247))+(((-3.9e-7)*x4238))+(((-1.36279999993186e-7)*x4231))+(((-3.9e-7)*x4241))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((0.391671)*x4250))+(((0.121761000001269)*x4248)));
evalcond[3]=(((x4235*x4236))+(((1.92e-6)*cj1))+(((-0.121761000001269)*x4249))+(((-1.36279999993186e-7)*x4242))+((x4235*x4240))+(((-3.9e-7)*x4236))+(((-3.9e-7)*x4240))+(((-1.0)*px))+(((-0.52362)*sj1))+(((0.121761000001269)*x4233))+(((-0.391671)*x4251))+(((-1.0)*x4229*x4247)));
evalcond[4]=(((cj4*x4238*x4239))+(((-1.0)*x4231*x4239))+((x4231*x4232))+((x4237*x4248))+(((-1.0)*cj4*x4232*x4241))+((sj1*x4229))+(((-1.0)*x4237*x4244))+x4251+((x4234*x4248))+(((-1.0)*cj4*x4232*x4238))+((cj4*x4239*x4241))+(((-1.0)*x4234*x4244)));
evalcond[5]=(((x4232*x4242))+((cj4*x4236*x4239))+(((-1.0)*cj4*x4232*x4240))+(((-1.0)*x4252))+(((-1.0)*x4237*x4249))+x4250+(((-1.0)*x4239*x4242))+((x4233*x4234))+((x4233*x4237))+(((-1.0)*cj4*x4232*x4236))+((cj4*x4239*x4240))+(((-1.0)*x4234*x4249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4253=((1.0)*sj1);
IkReal x4254=(sj4*sj5);
IkReal x4255=(cj4*r22);
IkReal x4256=(cj4*r12);
IkReal x4257=((1.0)*cj1);
IkReal x4258=(cj5*r21*sj4);
IkReal x4259=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r20*x4253*x4254))+(((-1.0)*x4253*x4258))+(((-1.0)*x4253*x4255))+(((-1.0)*x4257*x4259))+(((-1.0)*r10*x4254*x4257))+(((-1.0)*x4256*x4257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x4253*x4254))+(((-1.0)*x4253*x4259))+(((-1.0)*x4253*x4256))+((cj1*r20*x4254))+((cj1*x4258))+((cj1*x4255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x4253*x4254))+(((-1.0)*x4253*x4258))+(((-1.0)*x4253*x4255))+(((-1.0)*x4257*x4259))+(((-1.0)*r10*x4254*x4257))+(((-1.0)*x4256*x4257))))+IKsqr(((((-1.0)*r10*x4253*x4254))+(((-1.0)*x4253*x4259))+(((-1.0)*x4253*x4256))+((cj1*r20*x4254))+((cj1*x4258))+((cj1*x4255))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x4253*x4254))+(((-1.0)*x4253*x4258))+(((-1.0)*x4253*x4255))+(((-1.0)*x4257*x4259))+(((-1.0)*r10*x4254*x4257))+(((-1.0)*x4256*x4257))), ((((-1.0)*r10*x4253*x4254))+(((-1.0)*x4253*x4259))+(((-1.0)*x4253*x4256))+((cj1*r20*x4254))+((cj1*x4258))+((cj1*x4255))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4260=IKcos(j2);
IkReal x4261=IKsin(j2);
IkReal x4262=(r22*sj4);
IkReal x4263=(cj5*r10);
IkReal x4264=((0.99999999995)*cj3);
IkReal x4265=((9.9999999995e-6)*sj3);
IkReal x4266=((1.36279999993186e-7)*cj4);
IkReal x4267=(cj5*r11);
IkReal x4268=(cj5*r21);
IkReal x4269=(r10*sj5);
IkReal x4270=((1.0)*sj4);
IkReal x4271=((1.0)*sj1);
IkReal x4272=((9.9999999995e-6)*cj3);
IkReal x4273=(cj5*r20);
IkReal x4274=(r20*sj5);
IkReal x4275=((1.0)*cj4);
IkReal x4276=((0.99999999995)*sj3);
IkReal x4277=((0.391671)*sj1);
IkReal x4278=((0.121761000001269)*sj5);
IkReal x4279=(r11*sj5);
IkReal x4280=(r12*sj4);
IkReal x4281=(r21*sj5);
IkReal x4282=(cj1*x4260);
IkReal x4283=(cj1*x4261);
IkReal x4284=(cj4*x4274);
IkReal x4285=(x4261*x4271);
evalcond[0]=((((-1.0)*x4285))+(((-1.0)*r22*x4275))+x4282+(((-1.0)*x4268*x4270))+(((-1.0)*x4270*x4274)));
evalcond[1]=((((-1.0)*r12*x4275))+(((-1.0)*x4260*x4271))+(((-1.0)*x4283))+(((-1.0)*x4269*x4270))+(((-1.0)*x4267*x4270)));
evalcond[2]=((((-1.36279999993186e-7)*x4262))+((r21*x4278))+((x4266*x4268))+((x4266*x4274))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-1.0)*x4261*x4277))+(((-3.9e-7)*x4268))+(((-0.121761000001269)*x4273))+(((0.52362)*cj1))+(((0.391671)*x4282))+(((-3.9e-7)*x4274)));
evalcond[3]=((((1.92e-6)*cj1))+((x4266*x4267))+((x4266*x4269))+((r11*x4278))+(((-0.391671)*x4283))+(((-1.0)*py))+(((-0.121761000001269)*x4263))+(((-1.0)*x4260*x4277))+(((-3.9e-7)*x4269))+(((-3.9e-7)*x4267))+(((-0.52362)*sj1))+(((-1.36279999993186e-7)*x4280)));
evalcond[4]=((((-1.0)*x4273*x4276))+(((-1.0)*x4264*x4284))+((x4265*x4284))+(((-1.0)*cj4*x4264*x4268))+((cj4*x4265*x4268))+((x4276*x4281))+(((-1.0)*x4272*x4273))+x4283+((sj1*x4260))+((x4262*x4264))+(((-1.0)*x4262*x4265))+((x4272*x4281)));
evalcond[5]=((((-1.0)*x4285))+(((-1.0)*x4265*x4280))+(((-1.0)*cj4*x4264*x4269))+(((-1.0)*cj4*x4264*x4267))+(((-1.0)*x4263*x4276))+(((-1.0)*x4263*x4272))+((cj4*x4265*x4267))+((cj4*x4265*x4269))+((x4276*x4279))+x4282+((x4264*x4280))+((x4272*x4279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4286=((1.0)*sj1);
IkReal x4287=(sj4*sj5);
IkReal x4288=(cj4*r12);
IkReal x4289=(cj4*r22);
IkReal x4290=(cj5*sj4);
IkReal x4291=(cj1*x4290);
if( IKabs(((((-1.0)*r20*x4286*x4287))+(((-1.0)*x4286*x4289))+(((-1.0)*r21*x4286*x4290))+((r11*x4291))+((cj1*x4288))+((cj1*r10*x4287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x4287))+((cj1*r20*x4287))+((r21*x4291))+((sj1*x4288))+((r11*sj1*x4290))+((cj1*x4289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x4286*x4287))+(((-1.0)*x4286*x4289))+(((-1.0)*r21*x4286*x4290))+((r11*x4291))+((cj1*x4288))+((cj1*r10*x4287))))+IKsqr((((r10*sj1*x4287))+((cj1*r20*x4287))+((r21*x4291))+((sj1*x4288))+((r11*sj1*x4290))+((cj1*x4289))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x4286*x4287))+(((-1.0)*x4286*x4289))+(((-1.0)*r21*x4286*x4290))+((r11*x4291))+((cj1*x4288))+((cj1*r10*x4287))), (((r10*sj1*x4287))+((cj1*r20*x4287))+((r21*x4291))+((sj1*x4288))+((r11*sj1*x4290))+((cj1*x4289))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4292=IKcos(j2);
IkReal x4293=IKsin(j2);
IkReal x4294=(r22*sj4);
IkReal x4295=(cj5*r10);
IkReal x4296=((0.99999999995)*cj3);
IkReal x4297=((9.9999999995e-6)*sj3);
IkReal x4298=((1.36279999993186e-7)*cj4);
IkReal x4299=(cj5*r11);
IkReal x4300=(cj5*r21);
IkReal x4301=(r10*sj5);
IkReal x4302=((1.0)*sj4);
IkReal x4303=(r12*sj4);
IkReal x4304=((9.9999999995e-6)*cj3);
IkReal x4305=(cj5*r20);
IkReal x4306=(r20*sj5);
IkReal x4307=((1.0)*cj4);
IkReal x4308=((0.99999999995)*sj3);
IkReal x4309=((0.121761000001269)*sj5);
IkReal x4310=(r11*sj5);
IkReal x4311=(r21*sj5);
IkReal x4312=(sj1*x4292);
IkReal x4313=(cj1*x4293);
IkReal x4314=(cj1*x4292);
IkReal x4315=(cj4*x4306);
IkReal x4316=(sj1*x4293);
IkReal x4317=(x4312+x4313);
evalcond[0]=((((-1.0)*r12*x4307))+x4317+(((-1.0)*x4299*x4302))+(((-1.0)*x4301*x4302)));
evalcond[1]=((((-1.0)*r22*x4307))+x4314+(((-1.0)*x4316))+(((-1.0)*x4300*x4302))+(((-1.0)*x4302*x4306)));
evalcond[2]=((((-0.391671)*x4316))+(((-3.9e-7)*x4306))+(((-3.9e-7)*x4300))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-1.36279999993186e-7)*x4294))+((x4298*x4306))+((x4298*x4300))+(((0.52362)*cj1))+((r21*x4309))+(((0.391671)*x4314))+(((-0.121761000001269)*x4305)));
evalcond[3]=(((x4298*x4299))+(((-0.121761000001269)*x4295))+((r11*x4309))+(((-1.36279999993186e-7)*x4303))+(((0.52362)*sj1))+(((-3.9e-7)*x4299))+(((-3.9e-7)*x4301))+(((-1.0)*py))+((x4298*x4301))+(((-1.92e-6)*cj1))+(((0.391671)*x4313))+(((0.391671)*x4312)));
evalcond[4]=(((x4297*x4315))+((x4308*x4311))+(((-1.0)*x4294*x4297))+((x4304*x4311))+x4317+(((-1.0)*cj4*x4296*x4300))+(((-1.0)*x4305*x4308))+((cj4*x4297*x4300))+(((-1.0)*x4296*x4315))+(((-1.0)*x4304*x4305))+((x4294*x4296)));
evalcond[5]=(((x4308*x4310))+((cj4*x4297*x4299))+(((-1.0)*x4297*x4303))+(((-1.0)*x4295*x4304))+(((-1.0)*x4295*x4308))+(((-1.0)*cj4*x4296*x4299))+((x4304*x4310))+x4316+(((-1.0)*x4314))+(((-1.0)*cj4*x4296*x4301))+((cj4*x4297*x4301))+((x4296*x4303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4318=((1.0)*sj1);
IkReal x4319=(sj4*sj5);
IkReal x4320=(cj0*r20);
IkReal x4321=(cj4*r12);
IkReal x4322=(cj0*cj1);
IkReal x4323=(cj4*r22);
IkReal x4324=((1.0)*cj1);
IkReal x4325=(cj5*sj4);
CheckValue<IkReal> x4326 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x4324*x4325))+(((-1.0)*r10*x4319*x4324))+(((-1.0)*x4321*x4324))+(((-1.0)*cj0*r21*x4318*x4325))+(((-1.0)*x4318*x4319*x4320))+(((-1.0)*cj0*x4318*x4323)))),IkReal(((((-1.0)*r10*x4318*x4319))+((r21*x4322*x4325))+(((-1.0)*r11*x4318*x4325))+((x4322*x4323))+(((-1.0)*x4318*x4321))+((cj1*x4319*x4320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4326.valid){
continue;
}
CheckValue<IkReal> x4327=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x4327.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4326.value)+(((1.5707963267949)*(x4327.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x4328=IKsin(j2);
IkReal x4329=IKcos(j2);
IkReal x4330=((9.9999999995e-6)*sj5);
IkReal x4331=(cj3*r01);
IkReal x4332=(cj4*r00);
IkReal x4333=((3.9e-7)*cj5);
IkReal x4334=((1.36279999993186e-7)*sj5);
IkReal x4335=(cj4*r10);
IkReal x4336=((9.9999999995e-6)*cj5);
IkReal x4337=(cj3*r20);
IkReal x4338=(cj0*sj1);
IkReal x4339=((0.121761000001269)*sj5);
IkReal x4340=(cj4*r01);
IkReal x4341=((1.36279999993186e-7)*cj5);
IkReal x4342=((0.99999999995)*cj3);
IkReal x4343=(r02*sj4);
IkReal x4344=(r11*sj3);
IkReal x4345=((0.99999999995)*sj5);
IkReal x4346=((3.9e-7)*sj5);
IkReal x4347=((0.121761000001269)*cj5);
IkReal x4348=((1.0)*sj4);
IkReal x4349=(r22*sj4);
IkReal x4350=((9.9999999995e-6)*sj3);
IkReal x4351=(r12*sj4);
IkReal x4352=((1.0)*cj4);
IkReal x4353=(cj5*r21);
IkReal x4354=(cj4*cj5);
IkReal x4355=(r21*sj3);
IkReal x4356=(cj4*r20);
IkReal x4357=((1.92e-6)*cj1);
IkReal x4358=(sj0*sj1);
IkReal x4359=(cj1*x4328);
IkReal x4360=((1.0)*x4329);
IkReal x4361=((0.391671)*x4329);
IkReal x4362=(sj1*x4328);
IkReal x4363=(cj1*x4329);
IkReal x4364=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*r20*sj5*x4348))+(((-1.0)*x4362))+x4363+(((-1.0)*r22*x4352))+(((-1.0)*x4348*x4353)));
evalcond[1]=((((-1.0)*r02*x4352))+(((-1.0)*cj5*r01*x4348))+(((-1.0)*r00*sj5*x4348))+((sj0*x4359))+((x4329*x4358)));
evalcond[2]=((((-1.0)*r12*x4352))+(((-1.0)*x4338*x4360))+(((-1.0)*r10*sj5*x4348))+(((-1.0)*cj0*x4359))+(((-1.0)*cj5*r11*x4348)));
evalcond[3]=((((-1.0)*r20*x4346))+(((-1.0)*r20*x4347))+((cj1*x4361))+(((-1.0)*r21*x4333))+(((-0.391671)*x4362))+((r21*x4339))+(((-1.36279999993186e-7)*x4349))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((cj4*r21*x4341))+((x4334*x4356)));
evalcond[4]=((((0.001538)*cj0))+((r01*x4339))+(((-1.0)*r01*x4333))+(((0.391671)*sj0*x4359))+(((0.52362)*x4358))+(((-1.36279999993186e-7)*x4343))+(((-1.0)*px))+(((-1.0)*sj0*x4357))+((x4340*x4341))+((x4332*x4334))+((x4358*x4361))+(((-1.0)*r00*x4347))+(((-1.0)*r00*x4346)));
evalcond[5]=(((cj0*x4357))+(((0.001538)*sj0))+((x4334*x4335))+(((-0.52362)*x4338))+(((-1.36279999993186e-7)*x4351))+(((-0.391671)*cj0*x4359))+(((-1.0)*x4338*x4361))+(((-1.0)*py))+(((-1.0)*r10*x4346))+(((-1.0)*r10*x4347))+(((-1.0)*r11*x4333))+((cj4*r11*x4341))+((r11*x4339)));
evalcond[6]=((((-1.0)*x4349*x4350))+((x4342*x4349))+(((-1.0)*r20*x4364))+((sj1*x4329))+((cj3*r21*x4330))+(((-1.0)*cj4*x4337*x4345))+((cj4*x4336*x4355))+x4359+((sj3*x4330*x4356))+(((-1.0)*x4336*x4337))+(((-1.0)*cj4*x4342*x4353))+((x4345*x4355)));
evalcond[7]=(((r01*sj3*x4345))+(((-1.0)*x4343*x4350))+((x4342*x4343))+((x4328*x4358))+(((-1.0)*cj1*sj0*x4360))+(((-1.0)*sj5*x4332*x4342))+((sj3*x4330*x4332))+(((-0.99999999995)*x4331*x4354))+((x4330*x4331))+((sj3*x4336*x4340))+(((-1.0)*r00*x4364))+(((-1.0)*cj3*r00*x4336)));
evalcond[8]=((((-1.0)*sj5*x4335*x4342))+(((-1.0)*r11*x4342*x4354))+((x4344*x4345))+((x4342*x4351))+(((-1.0)*x4350*x4351))+((cj0*x4363))+((cj3*r11*x4330))+((cj4*x4336*x4344))+(((-1.0)*x4328*x4338))+((sj3*x4330*x4335))+(((-1.0)*cj3*r10*x4336))+(((-1.0)*r10*x4364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4365=((1.0)*sj0);
IkReal x4366=(cj1*sj4);
IkReal x4367=(r20*sj5);
IkReal x4368=(cj4*sj1);
IkReal x4369=(r00*sj5);
IkReal x4370=(sj1*sj4);
IkReal x4371=(cj1*cj4);
IkReal x4372=(cj5*x4370);
CheckValue<IkReal> x4373=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x4373.valid){
continue;
}
CheckValue<IkReal> x4374 = IKatan2WithCheck(IkReal((((r02*x4371))+(((-1.0)*x4365*x4367*x4370))+((cj5*r01*x4366))+(((-1.0)*r22*x4365*x4368))+(((-1.0)*r21*x4365*x4372))+((x4366*x4369)))),IkReal((((cj5*r21*sj0*x4366))+((r01*x4372))+((sj0*x4366*x4367))+((r22*sj0*x4371))+((x4369*x4370))+((r02*x4368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4374.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4373.value)))+(x4374.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x4375=IKsin(j2);
IkReal x4376=IKcos(j2);
IkReal x4377=((9.9999999995e-6)*sj5);
IkReal x4378=(cj3*r01);
IkReal x4379=(cj4*r00);
IkReal x4380=((3.9e-7)*cj5);
IkReal x4381=((1.36279999993186e-7)*sj5);
IkReal x4382=(cj4*r10);
IkReal x4383=((9.9999999995e-6)*cj5);
IkReal x4384=(cj3*r20);
IkReal x4385=(cj0*sj1);
IkReal x4386=((0.121761000001269)*sj5);
IkReal x4387=(cj4*r01);
IkReal x4388=((1.36279999993186e-7)*cj5);
IkReal x4389=((0.99999999995)*cj3);
IkReal x4390=(r02*sj4);
IkReal x4391=(r11*sj3);
IkReal x4392=((0.99999999995)*sj5);
IkReal x4393=((3.9e-7)*sj5);
IkReal x4394=((0.121761000001269)*cj5);
IkReal x4395=((1.0)*sj4);
IkReal x4396=(r22*sj4);
IkReal x4397=((9.9999999995e-6)*sj3);
IkReal x4398=(r12*sj4);
IkReal x4399=((1.0)*cj4);
IkReal x4400=(cj5*r21);
IkReal x4401=(cj4*cj5);
IkReal x4402=(r21*sj3);
IkReal x4403=(cj4*r20);
IkReal x4404=((1.92e-6)*cj1);
IkReal x4405=(sj0*sj1);
IkReal x4406=(cj1*x4375);
IkReal x4407=((1.0)*x4376);
IkReal x4408=((0.391671)*x4376);
IkReal x4409=(sj1*x4375);
IkReal x4410=(cj1*x4376);
IkReal x4411=((0.99999999995)*cj5*sj3);
evalcond[0]=(x4410+(((-1.0)*r22*x4399))+(((-1.0)*x4409))+(((-1.0)*x4395*x4400))+(((-1.0)*r20*sj5*x4395)));
evalcond[1]=((((-1.0)*cj5*r01*x4395))+(((-1.0)*r02*x4399))+((x4376*x4405))+(((-1.0)*r00*sj5*x4395))+((sj0*x4406)));
evalcond[2]=((((-1.0)*r12*x4399))+(((-1.0)*cj0*x4406))+(((-1.0)*r10*sj5*x4395))+(((-1.0)*x4385*x4407))+(((-1.0)*cj5*r11*x4395)));
evalcond[3]=(((cj4*r21*x4388))+((cj1*x4408))+((x4381*x4403))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((r21*x4386))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x4396))+(((-0.391671)*x4409))+(((-1.0)*r20*x4393))+(((-1.0)*r20*x4394))+(((-1.0)*r21*x4380)));
evalcond[4]=((((0.001538)*cj0))+(((0.391671)*sj0*x4406))+(((-1.0)*r00*x4393))+(((-1.0)*r00*x4394))+(((-1.0)*r01*x4380))+(((-1.0)*px))+((x4387*x4388))+((x4405*x4408))+(((-1.0)*sj0*x4404))+((x4379*x4381))+(((-1.36279999993186e-7)*x4390))+((r01*x4386))+(((0.52362)*x4405)));
evalcond[5]=((((-0.391671)*cj0*x4406))+(((-1.0)*r11*x4380))+(((0.001538)*sj0))+((cj4*r11*x4388))+(((-1.0)*py))+(((-1.0)*r10*x4394))+(((-1.0)*r10*x4393))+((x4381*x4382))+(((-0.52362)*x4385))+(((-1.36279999993186e-7)*x4398))+((cj0*x4404))+(((-1.0)*x4385*x4408))+((r11*x4386)));
evalcond[6]=((((-1.0)*cj4*x4384*x4392))+(((-1.0)*x4396*x4397))+x4406+((sj1*x4376))+((sj3*x4377*x4403))+((x4389*x4396))+((cj4*x4383*x4402))+(((-1.0)*r20*x4411))+(((-1.0)*cj4*x4389*x4400))+((cj3*r21*x4377))+((x4392*x4402))+(((-1.0)*x4383*x4384)));
evalcond[7]=(((r01*sj3*x4392))+((x4377*x4378))+(((-0.99999999995)*x4378*x4401))+((x4375*x4405))+((x4389*x4390))+((sj3*x4383*x4387))+(((-1.0)*x4390*x4397))+(((-1.0)*cj1*sj0*x4407))+(((-1.0)*r00*x4411))+(((-1.0)*cj3*r00*x4383))+((sj3*x4377*x4379))+(((-1.0)*sj5*x4379*x4389)));
evalcond[8]=(((x4391*x4392))+(((-1.0)*r10*x4411))+(((-1.0)*cj3*r10*x4383))+((sj3*x4377*x4382))+((x4389*x4398))+(((-1.0)*r11*x4389*x4401))+((cj0*x4410))+((cj4*x4383*x4391))+(((-1.0)*sj5*x4382*x4389))+(((-1.0)*x4375*x4385))+((cj3*r11*x4377))+(((-1.0)*x4397*x4398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4412=((0.99999999995)*cj0);
IkReal x4413=(r22*sj4);
IkReal x4414=(cj4*cj5);
IkReal x4415=(cj5*r20);
IkReal x4416=((9.9999999995e-6)*cj0);
IkReal x4417=(r21*x4416);
IkReal x4418=(cj4*r20*sj5);
CheckValue<IkReal> x4419=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x4419.valid){
continue;
}
CheckValue<IkReal> x4420 = IKatan2WithCheck(IkReal((((x4414*x4417))+(((-1.0)*x4412*x4415))+(((-1.0)*x4413*x4416))+((x4416*x4418))+((r21*sj5*x4412)))),IkReal((((x4412*x4413))+(((-1.0)*x4412*x4418))+(((-1.0)*r21*x4412*x4414))+((sj5*x4417))+(((-1.0)*x4415*x4416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4420.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4419.value)))+(x4420.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x4421=IKcos(j3);
IkReal x4422=IKsin(j3);
IkReal x4423=(r10*sj5);
IkReal x4424=(cj5*r01);
IkReal x4425=(r22*sj4);
IkReal x4426=(cj5*r10);
IkReal x4427=(r02*sj4);
IkReal x4428=(r11*sj5);
IkReal x4429=(cj5*r20);
IkReal x4430=(cj5*r21);
IkReal x4431=(r20*sj5);
IkReal x4432=(r12*sj4);
IkReal x4433=(r21*sj5);
IkReal x4434=(r00*sj5);
IkReal x4435=(cj5*r00);
IkReal x4436=(r01*sj5);
IkReal x4437=(cj5*r11);
IkReal x4438=((0.99999999995)*x4422);
IkReal x4439=((9.9999999995e-6)*x4422);
IkReal x4440=((9.9999999995e-6)*x4421);
IkReal x4441=((0.99999999995)*x4421);
IkReal x4442=(cj4*x4440);
evalcond[0]=(((x4430*x4442))+((x4429*x4439))+(((-1.0)*x4429*x4441))+(((-1.0)*x4433*x4439))+((x4431*x4442))+(((-1.0)*x4425*x4438))+((cj4*x4431*x4438))+(((-1.0)*x4425*x4440))+((cj4*x4430*x4438))+((x4433*x4441)));
evalcond[1]=((((-1.0)*x4427*x4438))+cj0+((cj4*x4424*x4438))+((x4435*x4439))+(((-1.0)*x4435*x4441))+((x4434*x4442))+((x4436*x4441))+(((-1.0)*x4436*x4439))+((x4424*x4442))+(((-1.0)*x4427*x4440))+((cj4*x4434*x4438)));
evalcond[2]=(((cj4*x4423*x4438))+(((-1.0)*x4426*x4441))+(((-1.0)*x4428*x4439))+sj0+(((-1.0)*x4432*x4440))+(((-1.0)*x4432*x4438))+((cj4*x4437*x4438))+((x4437*x4442))+((x4423*x4442))+((x4426*x4439))+((x4428*x4441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x4443=cj0*cj0;
j1eval[0]=x4443;
j1eval[1]=IKsign(x4443);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x4444=sj0*sj0;
j1eval[0]=x4444;
j1eval[1]=IKsign(x4444);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=cj0;
j1eval[1]=IKsign(cj0);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4445=(r22*sj4);
IkReal x4446=((0.232536954279117)*cj5);
IkReal x4447=(cj5*r01);
IkReal x4448=(r02*sj4);
IkReal x4449=(cj5*r21);
IkReal x4450=((9.54335107914695e-13)*cj4);
IkReal x4451=((0.748006187683308)*cj4);
IkReal x4452=((8.52662144715453e-7)*cj5);
IkReal x4453=((2.60265077711611e-7)*cj4);
IkReal x4454=(r00*sj5);
IkReal x4455=((8.52662144715453e-7)*sj5);
IkReal x4456=(r20*sj5);
IkReal x4457=((0.748006187683308)*sj4);
IkReal x4458=((0.232536954279117)*sj5);
IkReal x4459=((2.74277506655963e-6)*cj4);
IkReal x4460=((2.74277506655963e-6)*sj4);
if( IKabs(((((7.44814942123594e-7)*x4454))+((r00*x4446))+((r20*x4452))+(((-1.0)*r02*x4451))+(((2.73107346716569e-12)*x4449))+(((2.73107346716569e-12)*x4456))+(((-1.0)*r22*x4459))+(((-1.0)*x4454*x4457))+(((-1.0)*x4449*x4450))+(((2.60265077711611e-7)*x4448))+(((-1.0)*r01*x4458))+(((9.54335107914695e-13)*x4445))+(((1.90978190288101)*px))+(((-1.0)*x4447*x4453))+(((-1.0)*x4447*x4457))+(((-1.0)*x4456*x4460))+(((-1.0)*r21*x4455))+(((-1.0)*x4450*x4456))+(((7.44814942123594e-7)*x4447))+(((-1.0)*x4449*x4460))+(((7.00275247991204e-6)*pz))+(((-1.0)*x4453*x4454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.44814942123594e-7)*x4456))+(((-7.00275247991204e-6)*px))+((r01*x4455))+((x4450*x4454))+(((-9.54335107914695e-13)*x4448))+((r20*x4446))+(((-1.0)*x4456*x4457))+(((-1.0)*r22*x4451))+((x4447*x4460))+((x4454*x4460))+(((-1.0)*x4449*x4457))+(((-1.0)*x4449*x4453))+(((-2.73107346716569e-12)*x4454))+(((2.60265077711611e-7)*x4445))+(((-2.73107346716569e-12)*x4447))+(((-1.0)*r00*x4452))+(((1.90978190288101)*pz))+((r02*x4459))+(((-1.0)*r21*x4458))+(((7.44814942123594e-7)*x4449))+((x4447*x4450))+(((-1.0)*x4453*x4456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.44814942123594e-7)*x4454))+((r00*x4446))+((r20*x4452))+(((-1.0)*r02*x4451))+(((2.73107346716569e-12)*x4449))+(((2.73107346716569e-12)*x4456))+(((-1.0)*r22*x4459))+(((-1.0)*x4454*x4457))+(((-1.0)*x4449*x4450))+(((2.60265077711611e-7)*x4448))+(((-1.0)*r01*x4458))+(((9.54335107914695e-13)*x4445))+(((1.90978190288101)*px))+(((-1.0)*x4447*x4453))+(((-1.0)*x4447*x4457))+(((-1.0)*x4456*x4460))+(((-1.0)*r21*x4455))+(((-1.0)*x4450*x4456))+(((7.44814942123594e-7)*x4447))+(((-1.0)*x4449*x4460))+(((7.00275247991204e-6)*pz))+(((-1.0)*x4453*x4454))))+IKsqr(((((7.44814942123594e-7)*x4456))+(((-7.00275247991204e-6)*px))+((r01*x4455))+((x4450*x4454))+(((-9.54335107914695e-13)*x4448))+((r20*x4446))+(((-1.0)*x4456*x4457))+(((-1.0)*r22*x4451))+((x4447*x4460))+((x4454*x4460))+(((-1.0)*x4449*x4457))+(((-1.0)*x4449*x4453))+(((-2.73107346716569e-12)*x4454))+(((2.60265077711611e-7)*x4445))+(((-2.73107346716569e-12)*x4447))+(((-1.0)*r00*x4452))+(((1.90978190288101)*pz))+((r02*x4459))+(((-1.0)*r21*x4458))+(((7.44814942123594e-7)*x4449))+((x4447*x4450))+(((-1.0)*x4453*x4456))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((7.44814942123594e-7)*x4454))+((r00*x4446))+((r20*x4452))+(((-1.0)*r02*x4451))+(((2.73107346716569e-12)*x4449))+(((2.73107346716569e-12)*x4456))+(((-1.0)*r22*x4459))+(((-1.0)*x4454*x4457))+(((-1.0)*x4449*x4450))+(((2.60265077711611e-7)*x4448))+(((-1.0)*r01*x4458))+(((9.54335107914695e-13)*x4445))+(((1.90978190288101)*px))+(((-1.0)*x4447*x4453))+(((-1.0)*x4447*x4457))+(((-1.0)*x4456*x4460))+(((-1.0)*r21*x4455))+(((-1.0)*x4450*x4456))+(((7.44814942123594e-7)*x4447))+(((-1.0)*x4449*x4460))+(((7.00275247991204e-6)*pz))+(((-1.0)*x4453*x4454))), ((((7.44814942123594e-7)*x4456))+(((-7.00275247991204e-6)*px))+((r01*x4455))+((x4450*x4454))+(((-9.54335107914695e-13)*x4448))+((r20*x4446))+(((-1.0)*x4456*x4457))+(((-1.0)*r22*x4451))+((x4447*x4460))+((x4454*x4460))+(((-1.0)*x4449*x4457))+(((-1.0)*x4449*x4453))+(((-2.73107346716569e-12)*x4454))+(((2.60265077711611e-7)*x4445))+(((-2.73107346716569e-12)*x4447))+(((-1.0)*r00*x4452))+(((1.90978190288101)*pz))+((r02*x4459))+(((-1.0)*r21*x4458))+(((7.44814942123594e-7)*x4449))+((x4447*x4450))+(((-1.0)*x4453*x4456))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x4461=IKsin(j1);
IkReal x4462=IKcos(j1);
IkReal x4463=((1.0)*pz);
IkReal x4464=((0.391671)*cj4);
IkReal x4465=(r20*sj5);
IkReal x4466=((0.391671)*sj4);
IkReal x4467=((3.91670999980416e-6)*cj5);
IkReal x4468=((1.36279999993186e-7)*cj4);
IkReal x4469=(r21*sj3);
IkReal x4470=((0.391670999980416)*sj5);
IkReal x4471=((3.9e-7)*cj5);
IkReal x4472=(cj5*r01);
IkReal x4473=(r00*sj5);
IkReal x4474=((1.36279999993186e-7)*sj4);
IkReal x4475=(r01*sj5);
IkReal x4476=((3.91670999980416e-6)*cj3);
IkReal x4477=(cj5*r00);
IkReal x4478=((0.391670999980416)*sj3);
IkReal x4479=(cj5*r21);
IkReal x4480=(r01*sj3);
IkReal x4481=(r21*sj5);
IkReal x4482=(cj5*r20);
IkReal x4483=((0.121761000001269)*x4475);
IkReal x4484=((0.52362)*x4461);
IkReal x4485=(r02*x4474);
IkReal x4486=((3.9e-7)*x4473);
IkReal x4487=((0.121761000001269)*x4477);
IkReal x4488=((1.92e-6)*x4462);
IkReal x4489=(r01*x4471);
IkReal x4490=((1.92e-6)*x4461);
IkReal x4491=((0.121761000001269)*x4481);
IkReal x4492=((0.52362)*x4462);
IkReal x4493=(r21*x4471);
IkReal x4494=((3.9e-7)*x4465);
IkReal x4495=(r22*x4474);
IkReal x4496=((0.121761000001269)*x4482);
IkReal x4497=((0.391670999980416)*cj3*cj4);
IkReal x4498=((3.91670999980416e-6)*cj4*sj3);
IkReal x4499=((3.91670999980416e-6)*sj3*sj4);
IkReal x4500=((0.391670999980416)*cj3*sj4);
IkReal x4501=(x4468*x4472);
IkReal x4502=(x4468*x4473);
IkReal x4503=(x4465*x4468);
IkReal x4504=(x4468*x4479);
IkReal x4505=(x4496+x4495+x4494+x4493+x4463);
IkReal x4506=(x4484+x4483+x4501+x4502);
IkReal x4507=(x4485+x4486+x4487+x4488+x4489);
IkReal x4508=(x4492+x4491+x4490+x4504+x4503);
evalcond[0]=((((-1.0)*x4506))+x4507+(((-1.0)*r02*x4464))+px+(((-1.0)*x4466*x4472))+(((-1.0)*x4466*x4473)));
evalcond[1]=(((r22*x4464))+(((-1.0)*x4505))+x4508+((x4465*x4466))+((x4466*x4479)));
evalcond[2]=((((-1.0)*x4465*x4498))+(((-1.0)*x4507))+x4506+(((-1.0)*x4476*x4481))+((x4478*x4482))+((x4465*x4497))+(((-1.0)*px))+((x4479*x4497))+((r22*x4499))+(((-1.0)*r22*x4500))+(((-1.0)*x4469*x4470))+((cj3*r20*x4467))+(((-1.0)*cj4*x4467*x4469)));
evalcond[3]=(((x4470*x4480))+(((-1.0)*r02*x4499))+(((-1.0)*cj3*cj4*r00*x4470))+(((-1.0)*x4505))+x4508+(((-1.0)*cj3*r00*x4467))+(((-1.0)*x4472*x4497))+((cj4*x4467*x4480))+((r02*x4500))+((x4473*x4498))+((x4475*x4476))+(((-1.0)*x4477*x4478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4509=(sj1*sj4);
IkReal x4510=(cj5*r01);
IkReal x4511=(r20*sj5);
IkReal x4512=(cj4*sj1);
IkReal x4513=(r00*sj5);
IkReal x4514=(cj1*sj4);
IkReal x4515=(cj5*r21);
IkReal x4516=(cj1*cj4);
if( IKabs((((r02*x4516))+(((-1.0)*r22*x4512))+((x4510*x4514))+((x4513*x4514))+(((-1.0)*x4509*x4511))+(((-1.0)*x4509*x4515)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x4512))+((x4511*x4514))+((r22*x4516))+((x4514*x4515))+((x4509*x4510))+((x4509*x4513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x4516))+(((-1.0)*r22*x4512))+((x4510*x4514))+((x4513*x4514))+(((-1.0)*x4509*x4511))+(((-1.0)*x4509*x4515))))+IKsqr((((r02*x4512))+((x4511*x4514))+((r22*x4516))+((x4514*x4515))+((x4509*x4510))+((x4509*x4513))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x4516))+(((-1.0)*r22*x4512))+((x4510*x4514))+((x4513*x4514))+(((-1.0)*x4509*x4511))+(((-1.0)*x4509*x4515))), (((r02*x4512))+((x4511*x4514))+((r22*x4516))+((x4514*x4515))+((x4509*x4510))+((x4509*x4513))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4517=IKcos(j2);
IkReal x4518=IKsin(j2);
IkReal x4519=(r22*sj4);
IkReal x4520=((0.99999999995)*cj3);
IkReal x4521=(r01*sj5);
IkReal x4522=((9.9999999995e-6)*cj3);
IkReal x4523=((1.36279999993186e-7)*cj4);
IkReal x4524=(cj5*r01);
IkReal x4525=(r20*sj5);
IkReal x4526=((9.9999999995e-6)*sj3);
IkReal x4527=((0.99999999995)*sj3);
IkReal x4528=(r00*sj5);
IkReal x4529=(cj5*r21);
IkReal x4530=(r02*sj4);
IkReal x4531=((1.0)*sj4);
IkReal x4532=(cj5*r20);
IkReal x4533=((1.0)*cj4);
IkReal x4534=(r21*sj5);
IkReal x4535=(cj5*r00);
IkReal x4536=(sj1*x4517);
IkReal x4537=(cj1*x4518);
IkReal x4538=(cj1*x4517);
IkReal x4539=(sj1*x4518);
IkReal x4540=(x4536+x4537);
evalcond[0]=(x4540+(((-1.0)*x4528*x4531))+(((-1.0)*x4524*x4531))+(((-1.0)*r02*x4533)));
evalcond[1]=((((-1.0)*x4539))+x4538+(((-1.0)*x4525*x4531))+(((-1.0)*r22*x4533))+(((-1.0)*x4529*x4531)));
evalcond[2]=(((x4523*x4525))+((x4523*x4529))+(((0.121761000001269)*x4534))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-0.121761000001269)*x4532))+(((0.52362)*cj1))+(((-0.391671)*x4539))+(((0.391671)*x4538))+(((-1.36279999993186e-7)*x4519))+(((-3.9e-7)*x4525))+(((-3.9e-7)*x4529)));
evalcond[3]=(((x4523*x4528))+((x4523*x4524))+(((0.52362)*sj1))+(((0.121761000001269)*x4521))+(((-1.36279999993186e-7)*x4530))+(((-1.0)*px))+(((-0.121761000001269)*x4535))+(((-1.92e-6)*cj1))+(((0.391671)*x4537))+(((0.391671)*x4536))+(((-3.9e-7)*x4524))+(((-3.9e-7)*x4528)));
evalcond[4]=((((-1.0)*cj4*x4520*x4529))+(((-1.0)*cj4*x4520*x4525))+((x4527*x4534))+x4540+(((-1.0)*x4527*x4532))+((cj4*x4525*x4526))+((cj4*x4526*x4529))+(((-1.0)*x4522*x4532))+(((-1.0)*x4519*x4526))+((x4522*x4534))+((x4519*x4520)));
evalcond[5]=((((-1.0)*cj4*x4520*x4524))+(((-1.0)*cj4*x4520*x4528))+(((-1.0)*x4538))+x4539+((x4521*x4522))+((x4521*x4527))+(((-1.0)*x4527*x4535))+((cj4*x4526*x4528))+(((-1.0)*x4526*x4530))+((cj4*x4524*x4526))+((x4520*x4530))+(((-1.0)*x4522*x4535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4541=(r22*sj4);
IkReal x4542=((0.232536954279117)*cj5);
IkReal x4543=(cj5*r01);
IkReal x4544=(r02*sj4);
IkReal x4545=(cj5*r21);
IkReal x4546=((9.54335107914695e-13)*cj4);
IkReal x4547=((0.748006187683308)*cj4);
IkReal x4548=((8.52662144715453e-7)*cj5);
IkReal x4549=((2.60265077711611e-7)*cj4);
IkReal x4550=(r00*sj5);
IkReal x4551=((8.52662144715453e-7)*sj5);
IkReal x4552=(r20*sj5);
IkReal x4553=((0.748006187683308)*sj4);
IkReal x4554=((0.232536954279117)*sj5);
IkReal x4555=((2.74277506655963e-6)*cj4);
IkReal x4556=((2.74277506655963e-6)*sj4);
if( IKabs(((((-1.0)*r21*x4551))+((x4550*x4553))+((r01*x4554))+((r02*x4547))+(((-1.0)*x4545*x4546))+(((-1.0)*x4552*x4556))+(((9.54335107914695e-13)*x4541))+(((-7.44814942123594e-7)*x4543))+(((2.73107346716569e-12)*x4545))+(((-1.0)*r00*x4542))+(((2.73107346716569e-12)*x4552))+((r20*x4548))+((x4543*x4553))+(((-2.60265077711611e-7)*x4544))+(((-1.0)*x4545*x4556))+(((-1.0)*r22*x4555))+(((-7.44814942123594e-7)*x4550))+((x4543*x4549))+((x4549*x4550))+(((-1.0)*x4546*x4552))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4551))+(((2.60265077711611e-7)*x4541))+(((-1.0)*r22*x4547))+(((-1.0)*r21*x4554))+(((-1.0)*x4550*x4556))+(((-1.0)*x4545*x4549))+(((-1.0)*x4552*x4553))+(((9.54335107914695e-13)*x4544))+(((2.73107346716569e-12)*x4543))+(((7.44814942123594e-7)*x4545))+((r00*x4548))+(((2.73107346716569e-12)*x4550))+((r20*x4542))+(((-1.0)*x4549*x4552))+(((-1.0)*x4545*x4553))+(((1.90978190288101)*pz))+(((-1.0)*x4543*x4556))+(((7.44814942123594e-7)*x4552))+(((-1.0)*x4543*x4546))+(((-1.0)*r02*x4555))+(((-1.0)*x4546*x4550))+(((7.00275247991204e-6)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x4551))+((x4550*x4553))+((r01*x4554))+((r02*x4547))+(((-1.0)*x4545*x4546))+(((-1.0)*x4552*x4556))+(((9.54335107914695e-13)*x4541))+(((-7.44814942123594e-7)*x4543))+(((2.73107346716569e-12)*x4545))+(((-1.0)*r00*x4542))+(((2.73107346716569e-12)*x4552))+((r20*x4548))+((x4543*x4553))+(((-2.60265077711611e-7)*x4544))+(((-1.0)*x4545*x4556))+(((-1.0)*r22*x4555))+(((-7.44814942123594e-7)*x4550))+((x4543*x4549))+((x4549*x4550))+(((-1.0)*x4546*x4552))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px))))+IKsqr(((((-1.0)*r01*x4551))+(((2.60265077711611e-7)*x4541))+(((-1.0)*r22*x4547))+(((-1.0)*r21*x4554))+(((-1.0)*x4550*x4556))+(((-1.0)*x4545*x4549))+(((-1.0)*x4552*x4553))+(((9.54335107914695e-13)*x4544))+(((2.73107346716569e-12)*x4543))+(((7.44814942123594e-7)*x4545))+((r00*x4548))+(((2.73107346716569e-12)*x4550))+((r20*x4542))+(((-1.0)*x4549*x4552))+(((-1.0)*x4545*x4553))+(((1.90978190288101)*pz))+(((-1.0)*x4543*x4556))+(((7.44814942123594e-7)*x4552))+(((-1.0)*x4543*x4546))+(((-1.0)*r02*x4555))+(((-1.0)*x4546*x4550))+(((7.00275247991204e-6)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r21*x4551))+((x4550*x4553))+((r01*x4554))+((r02*x4547))+(((-1.0)*x4545*x4546))+(((-1.0)*x4552*x4556))+(((9.54335107914695e-13)*x4541))+(((-7.44814942123594e-7)*x4543))+(((2.73107346716569e-12)*x4545))+(((-1.0)*r00*x4542))+(((2.73107346716569e-12)*x4552))+((r20*x4548))+((x4543*x4553))+(((-2.60265077711611e-7)*x4544))+(((-1.0)*x4545*x4556))+(((-1.0)*r22*x4555))+(((-7.44814942123594e-7)*x4550))+((x4543*x4549))+((x4549*x4550))+(((-1.0)*x4546*x4552))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*px))), ((((-1.0)*r01*x4551))+(((2.60265077711611e-7)*x4541))+(((-1.0)*r22*x4547))+(((-1.0)*r21*x4554))+(((-1.0)*x4550*x4556))+(((-1.0)*x4545*x4549))+(((-1.0)*x4552*x4553))+(((9.54335107914695e-13)*x4544))+(((2.73107346716569e-12)*x4543))+(((7.44814942123594e-7)*x4545))+((r00*x4548))+(((2.73107346716569e-12)*x4550))+((r20*x4542))+(((-1.0)*x4549*x4552))+(((-1.0)*x4545*x4553))+(((1.90978190288101)*pz))+(((-1.0)*x4543*x4556))+(((7.44814942123594e-7)*x4552))+(((-1.0)*x4543*x4546))+(((-1.0)*r02*x4555))+(((-1.0)*x4546*x4550))+(((7.00275247991204e-6)*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x4557=IKsin(j1);
IkReal x4558=IKcos(j1);
IkReal x4559=((1.0)*px);
IkReal x4560=((0.391671)*cj4);
IkReal x4561=(r20*sj5);
IkReal x4562=((0.391671)*sj4);
IkReal x4563=((3.91670999980416e-6)*cj5);
IkReal x4564=((1.36279999993186e-7)*cj4);
IkReal x4565=(r21*sj3);
IkReal x4566=((0.391670999980416)*sj5);
IkReal x4567=((3.9e-7)*cj5);
IkReal x4568=(cj5*r01);
IkReal x4569=(r00*sj5);
IkReal x4570=((1.36279999993186e-7)*sj4);
IkReal x4571=(r01*sj5);
IkReal x4572=((3.91670999980416e-6)*cj3);
IkReal x4573=(cj5*r00);
IkReal x4574=((0.391670999980416)*sj3);
IkReal x4575=(cj5*r21);
IkReal x4576=(r01*sj3);
IkReal x4577=(r21*sj5);
IkReal x4578=(cj5*r20);
IkReal x4579=(r21*x4567);
IkReal x4580=((3.9e-7)*x4561);
IkReal x4581=(r22*x4570);
IkReal x4582=((0.121761000001269)*x4578);
IkReal x4583=((1.92e-6)*x4557);
IkReal x4584=((0.121761000001269)*x4577);
IkReal x4585=((0.52362)*x4558);
IkReal x4586=((0.121761000001269)*x4571);
IkReal x4587=((1.92e-6)*x4558);
IkReal x4588=(r02*x4570);
IkReal x4589=((3.9e-7)*x4569);
IkReal x4590=((0.52362)*x4557);
IkReal x4591=((0.121761000001269)*x4573);
IkReal x4592=(r01*x4567);
IkReal x4593=((0.391670999980416)*cj3*cj4);
IkReal x4594=((3.91670999980416e-6)*cj4*sj3);
IkReal x4595=((3.91670999980416e-6)*sj3*sj4);
IkReal x4596=((0.391670999980416)*cj3*sj4);
IkReal x4597=(x4561*x4564);
IkReal x4598=(x4564*x4575);
IkReal x4599=(x4564*x4568);
IkReal x4600=(x4564*x4569);
IkReal x4601=(x4581+x4580+x4582+x4579);
IkReal x4602=(x4599+x4587+x4586+x4600);
IkReal x4603=(x4592+x4590+x4591+x4589+x4588+x4559);
IkReal x4604=(x4597+x4598+x4585+x4584+x4583);
evalcond[0]=((((-1.0)*x4603))+((r02*x4560))+x4602+((x4562*x4569))+((x4562*x4568)));
evalcond[1]=((((-1.0)*x4601))+((r22*x4560))+x4604+(((-1.0)*pz))+((x4561*x4562))+((x4562*x4575)));
evalcond[2]=(((x4569*x4594))+(((-1.0)*cj3*r00*x4563))+(((-1.0)*x4604))+((r02*x4596))+x4601+(((-1.0)*cj3*cj4*r00*x4566))+((x4571*x4572))+pz+(((-1.0)*r02*x4595))+((cj4*x4563*x4576))+(((-1.0)*x4573*x4574))+((x4566*x4576))+(((-1.0)*x4568*x4593)));
evalcond[3]=(((x4565*x4566))+((r22*x4596))+(((-1.0)*r22*x4595))+(((-1.0)*x4603))+(((-1.0)*x4575*x4593))+x4602+(((-1.0)*cj3*r20*x4563))+(((-1.0)*x4561*x4593))+(((-1.0)*x4574*x4578))+((x4561*x4594))+((x4572*x4577))+((cj4*x4563*x4565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4605=((1.0)*sj1);
IkReal x4606=(sj4*sj5);
IkReal x4607=(cj4*r22);
IkReal x4608=(cj5*sj4);
IkReal x4609=(cj4*r02);
IkReal x4610=((1.0)*cj1);
if( IKabs(((((-1.0)*r01*x4608*x4610))+(((-1.0)*r20*x4605*x4606))+(((-1.0)*r00*x4606*x4610))+(((-1.0)*x4609*x4610))+(((-1.0)*r21*x4605*x4608))+(((-1.0)*x4605*x4607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4605*x4608))+((cj1*x4607))+(((-1.0)*r00*x4605*x4606))+((cj1*r20*x4606))+(((-1.0)*x4605*x4609))+((cj1*r21*x4608)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x4608*x4610))+(((-1.0)*r20*x4605*x4606))+(((-1.0)*r00*x4606*x4610))+(((-1.0)*x4609*x4610))+(((-1.0)*r21*x4605*x4608))+(((-1.0)*x4605*x4607))))+IKsqr(((((-1.0)*r01*x4605*x4608))+((cj1*x4607))+(((-1.0)*r00*x4605*x4606))+((cj1*r20*x4606))+(((-1.0)*x4605*x4609))+((cj1*r21*x4608))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x4608*x4610))+(((-1.0)*r20*x4605*x4606))+(((-1.0)*r00*x4606*x4610))+(((-1.0)*x4609*x4610))+(((-1.0)*r21*x4605*x4608))+(((-1.0)*x4605*x4607))), ((((-1.0)*r01*x4605*x4608))+((cj1*x4607))+(((-1.0)*r00*x4605*x4606))+((cj1*r20*x4606))+(((-1.0)*x4605*x4609))+((cj1*r21*x4608))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4611=IKcos(j2);
IkReal x4612=IKsin(j2);
IkReal x4613=(r22*sj4);
IkReal x4614=((0.99999999995)*cj3);
IkReal x4615=(r01*sj5);
IkReal x4616=((9.9999999995e-6)*cj3);
IkReal x4617=((1.36279999993186e-7)*cj4);
IkReal x4618=(cj5*r01);
IkReal x4619=((0.99999999995)*sj3);
IkReal x4620=(r20*sj5);
IkReal x4621=((9.9999999995e-6)*sj3);
IkReal x4622=(r00*sj5);
IkReal x4623=(cj5*r21);
IkReal x4624=(r02*sj4);
IkReal x4625=((1.0)*sj1);
IkReal x4626=(cj5*r20);
IkReal x4627=((1.0)*sj4);
IkReal x4628=((1.0)*cj4);
IkReal x4629=((0.391671)*sj1);
IkReal x4630=(r21*sj5);
IkReal x4631=(cj5*r00);
IkReal x4632=(cj1*x4611);
IkReal x4633=(cj1*x4612);
IkReal x4634=(x4612*x4625);
evalcond[0]=((((-1.0)*x4634))+(((-1.0)*r22*x4628))+x4632+(((-1.0)*x4620*x4627))+(((-1.0)*x4623*x4627)));
evalcond[1]=((((-1.0)*x4633))+(((-1.0)*r02*x4628))+(((-1.0)*x4618*x4627))+(((-1.0)*x4611*x4625))+(((-1.0)*x4622*x4627)));
evalcond[2]=((((0.391671)*x4632))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-0.121761000001269)*x4626))+(((0.52362)*cj1))+(((-1.0)*x4612*x4629))+(((-3.9e-7)*x4623))+(((-3.9e-7)*x4620))+(((-1.36279999993186e-7)*x4613))+((x4617*x4623))+((x4617*x4620))+(((0.121761000001269)*x4630)));
evalcond[3]=((((-1.36279999993186e-7)*x4624))+(((1.92e-6)*cj1))+(((0.121761000001269)*x4615))+(((-1.0)*px))+(((-0.391671)*x4633))+((x4617*x4618))+(((-0.52362)*sj1))+(((-0.121761000001269)*x4631))+(((-3.9e-7)*x4622))+((x4617*x4622))+(((-1.0)*x4611*x4629))+(((-3.9e-7)*x4618)));
evalcond[4]=(((sj1*x4611))+((x4616*x4630))+x4633+(((-1.0)*x4619*x4626))+(((-1.0)*x4616*x4626))+((cj4*x4620*x4621))+(((-1.0)*x4613*x4621))+(((-1.0)*cj4*x4614*x4623))+(((-1.0)*cj4*x4614*x4620))+((x4613*x4614))+((x4619*x4630))+((cj4*x4621*x4623)));
evalcond[5]=((((-1.0)*x4634))+(((-1.0)*x4621*x4624))+x4632+((x4615*x4616))+((x4615*x4619))+((cj4*x4618*x4621))+((x4614*x4624))+(((-1.0)*cj4*x4614*x4622))+(((-1.0)*x4616*x4631))+((cj4*x4621*x4622))+(((-1.0)*cj4*x4614*x4618))+(((-1.0)*x4619*x4631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4635=(r22*sj4);
IkReal x4636=((0.232536954279117)*cj5);
IkReal x4637=((9.54335107914695e-13)*cj4);
IkReal x4638=(cj5*r21);
IkReal x4639=(cj4*r22);
IkReal x4640=(cj4*r12);
IkReal x4641=(r10*sj5);
IkReal x4642=((2.60265077711611e-7)*cj4);
IkReal x4643=(r21*sj5);
IkReal x4644=(r11*sj5);
IkReal x4645=(cj5*r11);
IkReal x4646=((8.52662144715453e-7)*cj5);
IkReal x4647=((0.748006187683308)*sj4);
IkReal x4648=(r20*sj5);
IkReal x4649=((2.74277506655963e-6)*sj4);
IkReal x4650=(r12*sj4);
if( IKabs(((((0.232536954279117)*x4644))+(((2.73107346716569e-12)*x4638))+(((-1.0)*x4637*x4648))+(((-1.0)*x4648*x4649))+((x4641*x4642))+((x4641*x4647))+(((-8.52662144715453e-7)*x4643))+(((-7.44814942123594e-7)*x4645))+(((-7.44814942123594e-7)*x4641))+(((2.73107346716569e-12)*x4648))+((x4642*x4645))+((x4645*x4647))+(((-2.60265077711611e-7)*x4650))+(((-1.0)*x4637*x4638))+(((-1.0)*r10*x4636))+(((9.54335107914695e-13)*x4635))+(((-1.0)*x4638*x4649))+(((0.748006187683308)*x4640))+((r20*x4646))+(((-2.74277506655963e-6)*x4639))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4647*x4648))+(((-1.0)*x4645*x4649))+(((-1.0)*x4637*x4641))+(((-1.0)*x4637*x4645))+(((-8.52662144715453e-7)*x4644))+(((7.44814942123594e-7)*x4648))+(((-0.748006187683308)*x4639))+(((2.60265077711611e-7)*x4635))+((r10*x4646))+((r20*x4636))+(((2.73107346716569e-12)*x4645))+(((2.73107346716569e-12)*x4641))+(((-0.232536954279117)*x4643))+(((9.54335107914695e-13)*x4650))+(((-2.74277506655963e-6)*x4640))+(((1.90978190288101)*pz))+(((-1.0)*x4641*x4649))+(((7.44814942123594e-7)*x4638))+(((-1.0)*x4638*x4642))+(((-1.0)*x4638*x4647))+(((7.00275247991204e-6)*py))+(((-1.0)*x4642*x4648)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.232536954279117)*x4644))+(((2.73107346716569e-12)*x4638))+(((-1.0)*x4637*x4648))+(((-1.0)*x4648*x4649))+((x4641*x4642))+((x4641*x4647))+(((-8.52662144715453e-7)*x4643))+(((-7.44814942123594e-7)*x4645))+(((-7.44814942123594e-7)*x4641))+(((2.73107346716569e-12)*x4648))+((x4642*x4645))+((x4645*x4647))+(((-2.60265077711611e-7)*x4650))+(((-1.0)*x4637*x4638))+(((-1.0)*r10*x4636))+(((9.54335107914695e-13)*x4635))+(((-1.0)*x4638*x4649))+(((0.748006187683308)*x4640))+((r20*x4646))+(((-2.74277506655963e-6)*x4639))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))))+IKsqr(((((-1.0)*x4647*x4648))+(((-1.0)*x4645*x4649))+(((-1.0)*x4637*x4641))+(((-1.0)*x4637*x4645))+(((-8.52662144715453e-7)*x4644))+(((7.44814942123594e-7)*x4648))+(((-0.748006187683308)*x4639))+(((2.60265077711611e-7)*x4635))+((r10*x4646))+((r20*x4636))+(((2.73107346716569e-12)*x4645))+(((2.73107346716569e-12)*x4641))+(((-0.232536954279117)*x4643))+(((9.54335107914695e-13)*x4650))+(((-2.74277506655963e-6)*x4640))+(((1.90978190288101)*pz))+(((-1.0)*x4641*x4649))+(((7.44814942123594e-7)*x4638))+(((-1.0)*x4638*x4642))+(((-1.0)*x4638*x4647))+(((7.00275247991204e-6)*py))+(((-1.0)*x4642*x4648))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.232536954279117)*x4644))+(((2.73107346716569e-12)*x4638))+(((-1.0)*x4637*x4648))+(((-1.0)*x4648*x4649))+((x4641*x4642))+((x4641*x4647))+(((-8.52662144715453e-7)*x4643))+(((-7.44814942123594e-7)*x4645))+(((-7.44814942123594e-7)*x4641))+(((2.73107346716569e-12)*x4648))+((x4642*x4645))+((x4645*x4647))+(((-2.60265077711611e-7)*x4650))+(((-1.0)*x4637*x4638))+(((-1.0)*r10*x4636))+(((9.54335107914695e-13)*x4635))+(((-1.0)*x4638*x4649))+(((0.748006187683308)*x4640))+((r20*x4646))+(((-2.74277506655963e-6)*x4639))+(((7.00275247991204e-6)*pz))+(((-1.90978190288101)*py))), ((((-1.0)*x4647*x4648))+(((-1.0)*x4645*x4649))+(((-1.0)*x4637*x4641))+(((-1.0)*x4637*x4645))+(((-8.52662144715453e-7)*x4644))+(((7.44814942123594e-7)*x4648))+(((-0.748006187683308)*x4639))+(((2.60265077711611e-7)*x4635))+((r10*x4646))+((r20*x4636))+(((2.73107346716569e-12)*x4645))+(((2.73107346716569e-12)*x4641))+(((-0.232536954279117)*x4643))+(((9.54335107914695e-13)*x4650))+(((-2.74277506655963e-6)*x4640))+(((1.90978190288101)*pz))+(((-1.0)*x4641*x4649))+(((7.44814942123594e-7)*x4638))+(((-1.0)*x4638*x4642))+(((-1.0)*x4638*x4647))+(((7.00275247991204e-6)*py))+(((-1.0)*x4642*x4648))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x4651=IKsin(j1);
IkReal x4652=IKcos(j1);
IkReal x4653=((1.0)*py);
IkReal x4654=(cj5*r10);
IkReal x4655=((3.91670999980416e-6)*sj3);
IkReal x4656=(r12*sj4);
IkReal x4657=(r20*sj5);
IkReal x4658=((0.391671)*sj4);
IkReal x4659=((0.391670999980416)*sj3);
IkReal x4660=((3.91670999980416e-6)*cj3);
IkReal x4661=(cj5*r20);
IkReal x4662=((1.36279999993186e-7)*cj4);
IkReal x4663=(cj5*r11);
IkReal x4664=(r21*sj5);
IkReal x4665=(cj5*r21);
IkReal x4666=(r22*sj4);
IkReal x4667=(r10*sj5);
IkReal x4668=(r11*sj5);
IkReal x4669=((0.391671)*cj4);
IkReal x4670=((0.391670999980416)*cj3);
IkReal x4671=((3.9e-7)*x4665);
IkReal x4672=((3.9e-7)*x4657);
IkReal x4673=((1.36279999993186e-7)*x4666);
IkReal x4674=((0.121761000001269)*x4661);
IkReal x4675=((1.92e-6)*x4651);
IkReal x4676=((0.121761000001269)*x4664);
IkReal x4677=((0.52362)*x4652);
IkReal x4678=((0.121761000001269)*x4668);
IkReal x4679=((1.92e-6)*x4652);
IkReal x4680=((1.36279999993186e-7)*x4656);
IkReal x4681=((3.9e-7)*x4667);
IkReal x4682=((0.121761000001269)*x4654);
IkReal x4683=((0.52362)*x4651);
IkReal x4684=((3.9e-7)*x4663);
IkReal x4685=(cj4*x4670);
IkReal x4686=(x4657*x4662);
IkReal x4687=(x4662*x4665);
IkReal x4688=(x4662*x4667);
IkReal x4689=(x4662*x4663);
IkReal x4690=(x4674+x4673+x4672+x4671);
IkReal x4691=(x4679+x4678+x4688+x4689);
IkReal x4692=(x4677+x4676+x4675+x4686+x4687);
IkReal x4693=(x4653+x4684+x4682+x4683+x4680+x4681);
evalcond[0]=(((r12*x4669))+((x4658*x4667))+((x4658*x4663))+x4691+(((-1.0)*x4693)));
evalcond[1]=(((x4658*x4665))+x4692+(((-1.0)*pz))+((x4657*x4658))+((r22*x4669))+(((-1.0)*x4690)));
evalcond[2]=((((-1.0)*x4654*x4660))+((cj4*x4655*x4663))+((cj4*x4655*x4667))+(((-1.0)*x4655*x4656))+(((-1.0)*x4654*x4659))+x4690+((x4659*x4668))+(((-1.0)*x4667*x4685))+pz+((x4656*x4670))+(((-1.0)*x4663*x4685))+(((-1.0)*x4692))+((x4660*x4668)));
evalcond[3]=(((cj4*x4655*x4665))+(((-1.0)*x4659*x4661))+((cj4*x4655*x4657))+(((-1.0)*x4657*x4685))+x4691+((x4659*x4664))+(((-1.0)*x4665*x4685))+(((-1.0)*x4660*x4661))+((x4666*x4670))+(((-1.0)*x4693))+((x4660*x4664))+(((-1.0)*x4655*x4666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4694=((1.0)*sj1);
IkReal x4695=(sj4*sj5);
IkReal x4696=(cj4*r22);
IkReal x4697=(cj4*r12);
IkReal x4698=((1.0)*cj1);
IkReal x4699=(cj5*r21*sj4);
IkReal x4700=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x4698*x4700))+(((-1.0)*r20*x4694*x4695))+(((-1.0)*x4697*x4698))+(((-1.0)*x4694*x4699))+(((-1.0)*x4694*x4696))+(((-1.0)*r10*x4695*x4698)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4694*x4700))+((cj1*r20*x4695))+(((-1.0)*x4694*x4697))+(((-1.0)*r10*x4694*x4695))+((cj1*x4699))+((cj1*x4696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4698*x4700))+(((-1.0)*r20*x4694*x4695))+(((-1.0)*x4697*x4698))+(((-1.0)*x4694*x4699))+(((-1.0)*x4694*x4696))+(((-1.0)*r10*x4695*x4698))))+IKsqr(((((-1.0)*x4694*x4700))+((cj1*r20*x4695))+(((-1.0)*x4694*x4697))+(((-1.0)*r10*x4694*x4695))+((cj1*x4699))+((cj1*x4696))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4698*x4700))+(((-1.0)*r20*x4694*x4695))+(((-1.0)*x4697*x4698))+(((-1.0)*x4694*x4699))+(((-1.0)*x4694*x4696))+(((-1.0)*r10*x4695*x4698))), ((((-1.0)*x4694*x4700))+((cj1*r20*x4695))+(((-1.0)*x4694*x4697))+(((-1.0)*r10*x4694*x4695))+((cj1*x4699))+((cj1*x4696))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4701=IKcos(j2);
IkReal x4702=IKsin(j2);
IkReal x4703=(r22*sj4);
IkReal x4704=(cj5*r10);
IkReal x4705=((0.99999999995)*cj3);
IkReal x4706=((9.9999999995e-6)*sj3);
IkReal x4707=((1.36279999993186e-7)*cj4);
IkReal x4708=(cj5*r11);
IkReal x4709=(cj5*r21);
IkReal x4710=(r10*sj5);
IkReal x4711=((1.0)*sj4);
IkReal x4712=((1.0)*sj1);
IkReal x4713=((9.9999999995e-6)*cj3);
IkReal x4714=(cj5*r20);
IkReal x4715=(r20*sj5);
IkReal x4716=((1.0)*cj4);
IkReal x4717=((0.99999999995)*sj3);
IkReal x4718=((0.391671)*sj1);
IkReal x4719=((0.121761000001269)*sj5);
IkReal x4720=(r11*sj5);
IkReal x4721=(r12*sj4);
IkReal x4722=(r21*sj5);
IkReal x4723=(cj1*x4701);
IkReal x4724=(cj1*x4702);
IkReal x4725=(cj4*x4715);
IkReal x4726=(x4702*x4712);
evalcond[0]=((((-1.0)*x4709*x4711))+(((-1.0)*r22*x4716))+(((-1.0)*x4726))+(((-1.0)*x4711*x4715))+x4723);
evalcond[1]=((((-1.0)*x4724))+(((-1.0)*x4701*x4712))+(((-1.0)*x4710*x4711))+(((-1.0)*r12*x4716))+(((-1.0)*x4708*x4711)));
evalcond[2]=((((0.391671)*x4723))+(((-1.36279999993186e-7)*x4703))+(((-3.9e-7)*x4715))+((r21*x4719))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((x4707*x4709))+(((0.52362)*cj1))+((x4707*x4715))+(((-0.121761000001269)*x4714))+(((-1.0)*x4702*x4718))+(((-3.9e-7)*x4709)));
evalcond[3]=((((1.92e-6)*cj1))+(((-3.9e-7)*x4710))+(((-1.0)*x4701*x4718))+(((-1.0)*py))+((x4707*x4708))+(((-0.52362)*sj1))+(((-0.391671)*x4724))+((x4707*x4710))+(((-1.36279999993186e-7)*x4721))+((r11*x4719))+(((-0.121761000001269)*x4704))+(((-3.9e-7)*x4708)));
evalcond[4]=((((-1.0)*x4714*x4717))+((x4713*x4722))+(((-1.0)*x4705*x4725))+(((-1.0)*x4703*x4706))+x4724+((sj1*x4701))+(((-1.0)*cj4*x4705*x4709))+((x4717*x4722))+((x4706*x4725))+((cj4*x4706*x4709))+(((-1.0)*x4713*x4714))+((x4703*x4705)));
evalcond[5]=(((x4705*x4721))+((x4713*x4720))+(((-1.0)*x4706*x4721))+(((-1.0)*x4726))+(((-1.0)*x4704*x4717))+(((-1.0)*x4704*x4713))+x4723+(((-1.0)*cj4*x4705*x4708))+((cj4*x4706*x4710))+((x4717*x4720))+(((-1.0)*cj4*x4705*x4710))+((cj4*x4706*x4708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4727=(r22*sj4);
IkReal x4728=((0.232536954279117)*cj5);
IkReal x4729=(cj4*cj5);
IkReal x4730=(cj4*r22);
IkReal x4731=(cj4*r12);
IkReal x4732=(r21*sj5);
IkReal x4733=(r11*sj5);
IkReal x4734=(r10*sj5);
IkReal x4735=((7.44814942123594e-7)*cj5);
IkReal x4736=(cj5*r11);
IkReal x4737=((8.52662144715453e-7)*cj5);
IkReal x4738=((0.748006187683308)*sj4);
IkReal x4739=(r20*sj5);
IkReal x4740=((2.74277506655963e-6)*sj4);
IkReal x4741=(cj5*r21);
IkReal x4742=(r12*sj4);
IkReal x4743=(cj4*x4734);
if( IKabs((((r11*x4735))+(((-1.0)*x4734*x4738))+(((-1.0)*x4736*x4738))+((r20*x4737))+(((-8.52662144715453e-7)*x4732))+(((-2.74277506655963e-6)*x4730))+(((-0.232536954279117)*x4733))+(((7.44814942123594e-7)*x4734))+(((-2.60265077711611e-7)*x4743))+(((-2.60265077711611e-7)*r11*x4729))+(((9.54335107914695e-13)*x4727))+(((-1.0)*x4740*x4741))+(((1.90978190288101)*py))+(((-9.54335107914695e-13)*r21*x4729))+(((-0.748006187683308)*x4731))+(((2.73107346716569e-12)*x4739))+((r10*x4728))+(((2.73107346716569e-12)*x4741))+(((2.60265077711611e-7)*x4742))+(((-9.54335107914695e-13)*cj4*x4739))+(((-1.0)*x4739*x4740))+(((7.00275247991204e-6)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-7.00275247991204e-6)*py))+(((-2.60265077711611e-7)*cj4*x4739))+((r20*x4728))+(((-1.0)*r10*x4737))+(((9.54335107914695e-13)*r11*x4729))+((x4734*x4740))+(((-2.73107346716569e-12)*x4734))+(((-2.73107346716569e-12)*x4736))+(((-9.54335107914695e-13)*x4742))+(((2.74277506655963e-6)*x4731))+((r21*x4735))+(((9.54335107914695e-13)*x4743))+(((-0.232536954279117)*x4732))+(((-2.60265077711611e-7)*r21*x4729))+(((7.44814942123594e-7)*x4739))+((x4736*x4740))+(((8.52662144715453e-7)*x4733))+(((1.90978190288101)*pz))+(((-0.748006187683308)*x4730))+(((-1.0)*x4738*x4739))+(((-1.0)*x4738*x4741))+(((2.60265077711611e-7)*x4727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x4735))+(((-1.0)*x4734*x4738))+(((-1.0)*x4736*x4738))+((r20*x4737))+(((-8.52662144715453e-7)*x4732))+(((-2.74277506655963e-6)*x4730))+(((-0.232536954279117)*x4733))+(((7.44814942123594e-7)*x4734))+(((-2.60265077711611e-7)*x4743))+(((-2.60265077711611e-7)*r11*x4729))+(((9.54335107914695e-13)*x4727))+(((-1.0)*x4740*x4741))+(((1.90978190288101)*py))+(((-9.54335107914695e-13)*r21*x4729))+(((-0.748006187683308)*x4731))+(((2.73107346716569e-12)*x4739))+((r10*x4728))+(((2.73107346716569e-12)*x4741))+(((2.60265077711611e-7)*x4742))+(((-9.54335107914695e-13)*cj4*x4739))+(((-1.0)*x4739*x4740))+(((7.00275247991204e-6)*pz))))+IKsqr(((((-7.00275247991204e-6)*py))+(((-2.60265077711611e-7)*cj4*x4739))+((r20*x4728))+(((-1.0)*r10*x4737))+(((9.54335107914695e-13)*r11*x4729))+((x4734*x4740))+(((-2.73107346716569e-12)*x4734))+(((-2.73107346716569e-12)*x4736))+(((-9.54335107914695e-13)*x4742))+(((2.74277506655963e-6)*x4731))+((r21*x4735))+(((9.54335107914695e-13)*x4743))+(((-0.232536954279117)*x4732))+(((-2.60265077711611e-7)*r21*x4729))+(((7.44814942123594e-7)*x4739))+((x4736*x4740))+(((8.52662144715453e-7)*x4733))+(((1.90978190288101)*pz))+(((-0.748006187683308)*x4730))+(((-1.0)*x4738*x4739))+(((-1.0)*x4738*x4741))+(((2.60265077711611e-7)*x4727))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x4735))+(((-1.0)*x4734*x4738))+(((-1.0)*x4736*x4738))+((r20*x4737))+(((-8.52662144715453e-7)*x4732))+(((-2.74277506655963e-6)*x4730))+(((-0.232536954279117)*x4733))+(((7.44814942123594e-7)*x4734))+(((-2.60265077711611e-7)*x4743))+(((-2.60265077711611e-7)*r11*x4729))+(((9.54335107914695e-13)*x4727))+(((-1.0)*x4740*x4741))+(((1.90978190288101)*py))+(((-9.54335107914695e-13)*r21*x4729))+(((-0.748006187683308)*x4731))+(((2.73107346716569e-12)*x4739))+((r10*x4728))+(((2.73107346716569e-12)*x4741))+(((2.60265077711611e-7)*x4742))+(((-9.54335107914695e-13)*cj4*x4739))+(((-1.0)*x4739*x4740))+(((7.00275247991204e-6)*pz))), ((((-7.00275247991204e-6)*py))+(((-2.60265077711611e-7)*cj4*x4739))+((r20*x4728))+(((-1.0)*r10*x4737))+(((9.54335107914695e-13)*r11*x4729))+((x4734*x4740))+(((-2.73107346716569e-12)*x4734))+(((-2.73107346716569e-12)*x4736))+(((-9.54335107914695e-13)*x4742))+(((2.74277506655963e-6)*x4731))+((r21*x4735))+(((9.54335107914695e-13)*x4743))+(((-0.232536954279117)*x4732))+(((-2.60265077711611e-7)*r21*x4729))+(((7.44814942123594e-7)*x4739))+((x4736*x4740))+(((8.52662144715453e-7)*x4733))+(((1.90978190288101)*pz))+(((-0.748006187683308)*x4730))+(((-1.0)*x4738*x4739))+(((-1.0)*x4738*x4741))+(((2.60265077711611e-7)*x4727))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x4744=IKsin(j1);
IkReal x4745=IKcos(j1);
IkReal x4746=((1.0)*pz);
IkReal x4747=(cj5*r10);
IkReal x4748=((3.91670999980416e-6)*sj3);
IkReal x4749=(r12*sj4);
IkReal x4750=(r20*sj5);
IkReal x4751=((0.391671)*sj4);
IkReal x4752=((0.391670999980416)*sj3);
IkReal x4753=((3.91670999980416e-6)*cj3);
IkReal x4754=(cj5*r20);
IkReal x4755=((1.36279999993186e-7)*cj4);
IkReal x4756=(cj5*r11);
IkReal x4757=(r21*sj5);
IkReal x4758=(cj5*r21);
IkReal x4759=(r22*sj4);
IkReal x4760=(r10*sj5);
IkReal x4761=(r11*sj5);
IkReal x4762=((0.391671)*cj4);
IkReal x4763=((0.391670999980416)*cj3);
IkReal x4764=((0.52362)*x4744);
IkReal x4765=((0.121761000001269)*x4761);
IkReal x4766=((1.36279999993186e-7)*x4749);
IkReal x4767=((3.9e-7)*x4760);
IkReal x4768=((0.121761000001269)*x4747);
IkReal x4769=((1.92e-6)*x4745);
IkReal x4770=((3.9e-7)*x4756);
IkReal x4771=((1.92e-6)*x4744);
IkReal x4772=((0.121761000001269)*x4757);
IkReal x4773=((0.52362)*x4745);
IkReal x4774=((3.9e-7)*x4758);
IkReal x4775=((3.9e-7)*x4750);
IkReal x4776=((1.36279999993186e-7)*x4759);
IkReal x4777=((0.121761000001269)*x4754);
IkReal x4778=(cj4*x4763);
IkReal x4779=(x4755*x4760);
IkReal x4780=(x4755*x4756);
IkReal x4781=(x4750*x4755);
IkReal x4782=(x4755*x4758);
IkReal x4783=(x4746+x4776+x4777+x4774+x4775);
IkReal x4784=(x4779+x4765+x4764+x4780);
IkReal x4785=(x4770+x4767+x4766+x4769+x4768);
IkReal x4786=(x4772+x4773+x4771+x4782+x4781);
evalcond[0]=((((-1.0)*x4751*x4760))+x4785+(((-1.0)*x4751*x4756))+(((-1.0)*r12*x4762))+py+(((-1.0)*x4784)));
evalcond[1]=(((r22*x4762))+x4786+((x4750*x4751))+((x4751*x4758))+(((-1.0)*x4783)));
evalcond[2]=((((-1.0)*x4753*x4757))+((x4753*x4754))+((x4750*x4778))+x4784+(((-1.0)*x4752*x4757))+(((-1.0)*py))+((x4748*x4759))+(((-1.0)*x4759*x4763))+((x4752*x4754))+((x4758*x4778))+(((-1.0)*cj4*x4748*x4750))+(((-1.0)*cj4*x4748*x4758))+(((-1.0)*x4785)));
evalcond[3]=(((x4753*x4761))+(((-1.0)*x4756*x4778))+((cj4*x4748*x4760))+(((-1.0)*x4748*x4749))+((x4752*x4761))+x4786+(((-1.0)*x4760*x4778))+(((-1.0)*x4747*x4752))+(((-1.0)*x4747*x4753))+((x4749*x4763))+(((-1.0)*x4783))+((cj4*x4748*x4756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4787=((1.0)*sj1);
IkReal x4788=(sj4*sj5);
IkReal x4789=(cj4*r12);
IkReal x4790=(cj4*r22);
IkReal x4791=(cj5*sj4);
IkReal x4792=(cj1*x4791);
if( IKabs(((((-1.0)*x4787*x4790))+(((-1.0)*r20*x4787*x4788))+((cj1*x4789))+((cj1*r10*x4788))+(((-1.0)*r21*x4787*x4791))+((r11*x4792)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x4788))+((cj1*x4790))+((r21*x4792))+((cj1*r20*x4788))+((r11*sj1*x4791))+((sj1*x4789)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4787*x4790))+(((-1.0)*r20*x4787*x4788))+((cj1*x4789))+((cj1*r10*x4788))+(((-1.0)*r21*x4787*x4791))+((r11*x4792))))+IKsqr((((r10*sj1*x4788))+((cj1*x4790))+((r21*x4792))+((cj1*r20*x4788))+((r11*sj1*x4791))+((sj1*x4789))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4787*x4790))+(((-1.0)*r20*x4787*x4788))+((cj1*x4789))+((cj1*r10*x4788))+(((-1.0)*r21*x4787*x4791))+((r11*x4792))), (((r10*sj1*x4788))+((cj1*x4790))+((r21*x4792))+((cj1*r20*x4788))+((r11*sj1*x4791))+((sj1*x4789))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4793=IKcos(j2);
IkReal x4794=IKsin(j2);
IkReal x4795=(r22*sj4);
IkReal x4796=(cj5*r10);
IkReal x4797=((0.99999999995)*cj3);
IkReal x4798=((9.9999999995e-6)*sj3);
IkReal x4799=((1.36279999993186e-7)*cj4);
IkReal x4800=(cj5*r11);
IkReal x4801=(cj5*r21);
IkReal x4802=(r10*sj5);
IkReal x4803=((1.0)*sj4);
IkReal x4804=(r12*sj4);
IkReal x4805=((9.9999999995e-6)*cj3);
IkReal x4806=(cj5*r20);
IkReal x4807=(r20*sj5);
IkReal x4808=((1.0)*cj4);
IkReal x4809=((0.99999999995)*sj3);
IkReal x4810=((0.121761000001269)*sj5);
IkReal x4811=(r11*sj5);
IkReal x4812=(r21*sj5);
IkReal x4813=(sj1*x4793);
IkReal x4814=(cj1*x4794);
IkReal x4815=(cj1*x4793);
IkReal x4816=(cj4*x4807);
IkReal x4817=(sj1*x4794);
IkReal x4818=(x4813+x4814);
evalcond[0]=((((-1.0)*x4800*x4803))+(((-1.0)*x4802*x4803))+(((-1.0)*r12*x4808))+x4818);
evalcond[1]=((((-1.0)*r22*x4808))+(((-1.0)*x4801*x4803))+(((-1.0)*x4817))+(((-1.0)*x4803*x4807))+x4815);
evalcond[2]=((((-1.36279999993186e-7)*x4795))+((r21*x4810))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-0.121761000001269)*x4806))+(((0.52362)*cj1))+(((0.391671)*x4815))+(((-0.391671)*x4817))+(((-3.9e-7)*x4807))+(((-3.9e-7)*x4801))+((x4799*x4801))+((x4799*x4807)));
evalcond[3]=((((-1.36279999993186e-7)*x4804))+(((-0.121761000001269)*x4796))+(((0.52362)*sj1))+((r11*x4810))+(((-1.0)*py))+(((-1.92e-6)*cj1))+(((0.391671)*x4814))+(((0.391671)*x4813))+(((-3.9e-7)*x4802))+(((-3.9e-7)*x4800))+((x4799*x4800))+((x4799*x4802)));
evalcond[4]=((((-1.0)*x4805*x4806))+((x4809*x4812))+((x4795*x4797))+((x4798*x4816))+(((-1.0)*x4795*x4798))+(((-1.0)*x4806*x4809))+(((-1.0)*x4797*x4816))+x4818+(((-1.0)*cj4*x4797*x4801))+((cj4*x4798*x4801))+((x4805*x4812)));
evalcond[5]=(((x4809*x4811))+(((-1.0)*x4815))+(((-1.0)*x4796*x4809))+(((-1.0)*x4796*x4805))+((x4797*x4804))+(((-1.0)*x4798*x4804))+x4817+(((-1.0)*cj4*x4797*x4800))+(((-1.0)*cj4*x4797*x4802))+((cj4*x4798*x4802))+((cj4*x4798*x4800))+((x4805*x4811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4819=(r22*sj4);
IkReal x4820=(r10*sj5);
IkReal x4821=(cj0*r21);
IkReal x4822=(sj3*sj5);
IkReal x4823=(r20*sj5);
IkReal x4824=((0.391671)*sj4);
IkReal x4825=(cj3*cj5);
IkReal x4826=((9791774.99951041)*cj4);
IkReal x4827=((1.36279999993186e-7)*cj4);
IkReal x4828=(cj5*r21);
IkReal x4829=(cj0*r20);
IkReal x4830=(cj5*r10);
IkReal x4831=((26704006.3814773)*cj4);
IkReal x4832=(r11*sj5);
IkReal x4833=(cj0*cj3);
IkReal x4834=((929152.781203542)*cj4);
IkReal x4835=(cj5*r11);
IkReal x4836=(r12*sj4);
IkReal x4837=(cj0*sj3);
IkReal x4838=(cj5*sj3);
IkReal x4839=((2670400638147.73)*cj4);
IkReal x4840=(cj3*sj5);
IkReal x4841=((-3.40699999982965)*cj4);
IkReal x4842=((-97.9177499951041)*cj4);
IkReal x4843=((((-3.9e-7)*x4823))+(((-3.9e-7)*x4828))+(((0.121761000001269)*r21*sj5))+((x4823*x4827))+((x4823*x4824))+(((-1.0)*pz))+((x4824*x4828))+(((0.391671)*cj4*r22))+((x4827*x4828))+(((-1.36279999993186e-7)*x4819))+(((-0.121761000001269)*cj5*r20)));
IkReal x4844=(cj0*x4843);
CheckValue<IkReal> x4845=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x4845.valid){
continue;
}
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal(((((-2659007.8125)*x4820))+(((-26704006.3814773)*x4825*x4829))+((x4820*x4834))+(((-830162692977.399)*x4830))+(((2670400638147.73)*x4821*x4822))+(((-25000000.0)*x4844))+(((-6817968750000.0)*py))+(((-26704006.3814773)*x4819*x4837))+(((10486035937.5)*sj0))+(((2670400638147.73)*x4819*x4833))+((x4834*x4835))+(((830162692977.399)*x4832))+(((-2659007.8125)*x4835))+(((-1.0)*x4823*x4833*x4839))+((x4822*x4829*x4831))+(((-2670400638147.73)*x4829*x4838))+((x4821*x4831*x4838))+(((26704006.3814773)*x4821*x4840))+(((-929152.781203542)*x4836))+(((-1.0)*x4821*x4825*x4839)))),IkReal(((((97.9177499951041)*x4825*x4829))+((x4821*x4825*x4826))+((x4835*x4841))+(((-38450.0)*sj0))+(((9791774.99951041)*x4829*x4838))+(((-9791774.99951041)*x4821*x4822))+(((3.40699999982965)*x4836))+(((9.75)*x4820))+((x4822*x4829*x4842))+(((25000000.0)*py))+((x4820*x4841))+(((-9791774.99951041)*x4819*x4833))+((x4823*x4826*x4833))+(((3044025.00003172)*x4830))+(((9.75)*x4835))+(((-97.9177499951041)*x4821*x4840))+(((-6817968750000.0)*x4844))+(((97.9177499951041)*x4819*x4837))+(((-3044025.00003172)*x4832))+((x4821*x4838*x4842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4845.value)))+(x4846.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x4847=IKcos(j1);
IkReal x4848=cj0*cj0;
IkReal x4849=IKsin(j1);
IkReal x4850=sj0*sj0;
IkReal x4851=((1.36279999993186e-7)*cj0);
IkReal x4852=(r12*sj4);
IkReal x4853=(r21*sj5);
IkReal x4854=((0.391670999980416)*sj3);
IkReal x4855=(r20*sj5);
IkReal x4856=((0.391671)*sj4);
IkReal x4857=((3.9e-7)*cj5);
IkReal x4858=((1.0)*pz);
IkReal x4859=((3.91670999980416e-6)*cj3);
IkReal x4860=(r00*sj5);
IkReal x4861=(r11*sj5);
IkReal x4862=(cj0*sj0);
IkReal x4863=(cj5*r11);
IkReal x4864=(r02*sj4);
IkReal x4865=(cj0*r21);
IkReal x4866=((3.9e-7)*sj0);
IkReal x4867=((1.36279999993186e-7)*sj0);
IkReal x4868=(r01*sj0);
IkReal x4869=((0.121761000001269)*sj5);
IkReal x4870=(cj5*r10);
IkReal x4871=((3.91670999980416e-6)*sj3);
IkReal x4872=(cj5*r00);
IkReal x4873=(cj0*r01);
IkReal x4874=((1.36279999993186e-7)*cj4);
IkReal x4875=(r22*sj4);
IkReal x4876=((3.9e-7)*cj0);
IkReal x4877=(cj4*sj0);
IkReal x4878=((0.391671)*r12);
IkReal x4879=(cj5*r21);
IkReal x4880=((1.0)*px);
IkReal x4881=((0.391670999980416)*cj3);
IkReal x4882=(cj0*cj4);
IkReal x4883=((0.121761000001269)*cj0);
IkReal x4884=(r01*sj5);
IkReal x4885=(r10*sj5);
IkReal x4886=((0.391671)*r02);
IkReal x4887=(cj5*r20);
IkReal x4888=((1.0)*py);
IkReal x4889=((0.001538)*x4862);
IkReal x4890=((1.92e-6)*x4849);
IkReal x4891=((0.52362)*x4847);
IkReal x4892=((0.52362)*x4849);
IkReal x4893=(sj5*x4874);
IkReal x4894=((0.121761000001269)*x4861);
IkReal x4895=(cj4*x4871);
IkReal x4896=((0.121761000001269)*cj5*sj0);
IkReal x4897=(cj4*cj5*r01);
IkReal x4898=((3.9e-7)*x4885);
IkReal x4899=((1.92e-6)*x4847);
IkReal x4900=(sj0*x4887);
IkReal x4901=(x4862*x4892);
IkReal x4902=(x4862*x4899);
evalcond[0]=(((x4855*x4874))+((x4874*x4879))+(((-1.36279999993186e-7)*x4875))+(((-1.0)*r21*x4857))+(((0.121761000001269)*x4853))+(((-1.0)*x4858))+(((0.391671)*cj4*r22))+((x4855*x4856))+(((-0.121761000001269)*x4887))+(((-3.9e-7)*x4855))+x4891+x4890+((x4856*x4879)));
evalcond[1]=((((-1.0)*x4876*x4885))+((x4848*x4899))+((cj4*x4851*x4885))+((cj4*x4851*x4863))+(((-1.0)*cj0*r11*x4857))+(((-1.0)*x4848*x4892))+((x4878*x4882))+((cj0*x4856*x4885))+((x4861*x4883))+(((-1.0)*x4851*x4852))+((cj0*x4856*x4863))+(((-1.0)*x4870*x4883))+(((-1.0)*cj0*x4888))+x4889);
evalcond[2]=((((-1.0)*x4877*x4886))+(((-1.0)*cj4*x4860*x4867))+(((0.121761000001269)*sj0*x4872))+(((-1.0)*x4889))+(((-1.0)*sj0*x4856*x4860))+((x4860*x4866))+(((-1.0)*x4868*x4869))+(((-1.0)*cj5*x4856*x4868))+((x4857*x4868))+(((-1.0)*x4850*x4892))+((x4850*x4899))+((px*sj0))+(((-1.0)*x4867*x4897))+((x4864*x4867)));
evalcond[3]=((((-1.0)*x4859*x4870))+((x4855*x4876))+((x4859*x4861))+((x4854*x4861))+((x4885*x4895))+((x4851*x4875))+(((-1.0)*cj4*x4881*x4885))+(((-1.0)*x4853*x4883))+((x4852*x4881))+((x4863*x4895))+((x4857*x4865))+(((-1.0)*cj4*x4851*x4855))+(((-1.0)*x4852*x4871))+(((-1.0)*cj4*x4863*x4881))+(((-1.0)*x4854*x4870))+((cj0*pz))+(((-1.0)*cj0*x4890))+(((-1.0)*cj0*x4891))+((x4883*x4887))+(((-1.0)*cj4*x4851*x4879)));
evalcond[4]=((((-1.0)*x4855*x4866))+(((-1.0)*x4859*x4872))+(((-1.0)*sj0*x4858))+(((-1.0)*x4881*x4897))+(((-0.121761000001269)*x4900))+((x4854*x4884))+((cj4*x4867*x4879))+((x4859*x4884))+(((-1.0)*cj4*x4860*x4881))+((x4860*x4895))+((cj5*r01*x4895))+(((0.121761000001269)*sj0*x4853))+(((-1.0)*x4854*x4872))+((sj0*x4890))+((sj0*x4891))+((cj4*x4855*x4867))+(((-1.0)*x4867*x4875))+((x4864*x4881))+(((-1.0)*x4864*x4871))+(((-1.0)*r21*sj0*x4857)));
evalcond[5]=(((x4855*x4871*x4882))+((x4863*x4874))+(((0.001538)*sj0))+(((-1.0)*x4898))+(((-1.0)*cj0*x4854*x4887))+(((-1.0)*x4855*x4881*x4882))+(((-1.0)*x4888))+(((-1.0)*r11*x4857))+((x4874*x4885))+((cj0*x4875*x4881))+(((-1.0)*cj0*x4871*x4875))+((cj0*x4899))+(((-1.0)*cj0*x4859*x4887))+(((-0.121761000001269)*x4870))+((cj0*x4853*x4854))+((cj0*x4853*x4859))+((cj5*x4865*x4895))+(((-1.0)*cj4*cj5*x4865*x4881))+(((-1.0)*cj0*x4892))+x4894+(((-1.36279999993186e-7)*x4852)));
evalcond[6]=((((0.001538)*cj0))+(((-1.0)*sj0*x4899))+(((-1.0)*sj0*x4875*x4881))+(((-1.0)*r01*x4857))+((x4877*x4879*x4881))+((r01*x4869))+(((-1.0)*sj0*x4853*x4859))+(((-1.0)*sj0*x4853*x4854))+((cj5*r01*x4874))+((x4860*x4874))+(((-1.0)*x4871*x4877*x4879))+(((-1.0)*x4880))+((x4855*x4877*x4881))+((sj0*x4871*x4875))+((x4859*x4900))+((x4854*x4900))+(((-0.121761000001269)*x4872))+(((-1.0)*x4855*x4871*x4877))+((sj0*x4892))+(((-1.36279999993186e-7)*x4864))+(((-3.9e-7)*x4860)));
evalcond[7]=((((-1.0)*sj0*x4894))+x4901+((cj5*x4856*x4873))+(((-1.0)*cj4*x4863*x4867))+((r11*sj0*x4857))+(((-1.0)*x4902))+((x4866*x4885))+(((0.121761000001269)*sj0*x4870))+(((-1.0)*cj4*x4867*x4885))+((cj0*x4856*x4860))+((x4852*x4867))+((py*sj0))+((x4882*x4886))+(((-0.001538)*x4850)));
evalcond[8]=(x4901+((x4869*x4873))+(((-1.0)*x4902))+(((0.001538)*x4848))+(((-1.0)*sj0*x4856*x4863))+((cj4*x4851*x4860))+(((-1.0)*x4857*x4873))+(((-1.0)*x4872*x4883))+((x4851*x4897))+(((-1.0)*x4851*x4864))+(((-1.0)*x4860*x4876))+(((-1.0)*cj0*x4880))+(((-1.0)*sj0*x4856*x4885))+(((-1.0)*x4877*x4878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4903=(sj1*sj4);
IkReal x4904=(cj5*r01);
IkReal x4905=(r20*sj5);
IkReal x4906=(cj4*sj1);
IkReal x4907=(r00*sj5);
IkReal x4908=(cj1*sj4);
IkReal x4909=(cj5*r21);
IkReal x4910=(cj1*cj4);
if( IKabs((((r02*x4910))+((x4904*x4908))+((x4907*x4908))+(((-1.0)*r22*x4906))+(((-1.0)*x4903*x4909))+(((-1.0)*x4903*x4905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x4906))+((x4905*x4908))+((x4903*x4904))+((x4903*x4907))+((x4908*x4909))+((r22*x4910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x4910))+((x4904*x4908))+((x4907*x4908))+(((-1.0)*r22*x4906))+(((-1.0)*x4903*x4909))+(((-1.0)*x4903*x4905))))+IKsqr((((r02*x4906))+((x4905*x4908))+((x4903*x4904))+((x4903*x4907))+((x4908*x4909))+((r22*x4910))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x4910))+((x4904*x4908))+((x4907*x4908))+(((-1.0)*r22*x4906))+(((-1.0)*x4903*x4909))+(((-1.0)*x4903*x4905))), (((r02*x4906))+((x4905*x4908))+((x4903*x4904))+((x4903*x4907))+((x4908*x4909))+((r22*x4910))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4911=IKcos(j2);
IkReal x4912=IKsin(j2);
IkReal x4913=(r22*sj4);
IkReal x4914=((0.99999999995)*cj3);
IkReal x4915=(r01*sj5);
IkReal x4916=((9.9999999995e-6)*cj3);
IkReal x4917=((1.36279999993186e-7)*cj4);
IkReal x4918=(cj5*r01);
IkReal x4919=(r20*sj5);
IkReal x4920=((9.9999999995e-6)*sj3);
IkReal x4921=((0.99999999995)*sj3);
IkReal x4922=(r00*sj5);
IkReal x4923=(cj5*r21);
IkReal x4924=(r02*sj4);
IkReal x4925=((1.0)*sj4);
IkReal x4926=(cj5*r20);
IkReal x4927=((1.0)*cj4);
IkReal x4928=(r21*sj5);
IkReal x4929=(cj5*r00);
IkReal x4930=(sj1*x4911);
IkReal x4931=(cj1*x4912);
IkReal x4932=(cj1*x4911);
IkReal x4933=(sj1*x4912);
IkReal x4934=(x4930+x4931);
evalcond[0]=(x4934+(((-1.0)*r02*x4927))+(((-1.0)*x4918*x4925))+(((-1.0)*x4922*x4925)));
evalcond[1]=(x4932+(((-1.0)*x4933))+(((-1.0)*x4919*x4925))+(((-1.0)*r22*x4927))+(((-1.0)*x4923*x4925)));
evalcond[2]=((((-0.391671)*x4933))+((x4917*x4919))+(((0.121761000001269)*x4928))+(((-1.36279999993186e-7)*x4913))+((x4917*x4923))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-0.121761000001269)*x4926))+(((-3.9e-7)*x4919))+(((0.391671)*x4932))+(((0.52362)*cj1))+(((-3.9e-7)*x4923)));
evalcond[3]=((((-1.36279999993186e-7)*x4924))+(((0.52362)*sj1))+((x4917*x4918))+((x4917*x4922))+(((-1.0)*px))+(((-0.121761000001269)*x4929))+(((-3.9e-7)*x4918))+(((0.391671)*x4930))+(((0.391671)*x4931))+(((-1.92e-6)*cj1))+(((-3.9e-7)*x4922))+(((0.121761000001269)*x4915)));
evalcond[4]=(x4934+(((-1.0)*cj4*x4914*x4923))+((x4921*x4928))+(((-1.0)*x4916*x4926))+((cj4*x4919*x4920))+((x4913*x4914))+(((-1.0)*x4913*x4920))+(((-1.0)*cj4*x4914*x4919))+((cj4*x4920*x4923))+(((-1.0)*x4921*x4926))+((x4916*x4928)));
evalcond[5]=(x4933+(((-1.0)*x4932))+(((-1.0)*cj4*x4914*x4922))+((cj4*x4918*x4920))+(((-1.0)*x4916*x4929))+((x4915*x4921))+(((-1.0)*cj4*x4914*x4918))+((cj4*x4920*x4922))+((x4914*x4924))+((x4915*x4916))+(((-1.0)*x4920*x4924))+(((-1.0)*x4921*x4929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4935=((1.0)*sj1);
IkReal x4936=(sj4*sj5);
IkReal x4937=(cj4*r22);
IkReal x4938=(cj5*sj4);
IkReal x4939=(cj4*r02);
IkReal x4940=((1.0)*cj1);
if( IKabs(((((-1.0)*x4939*x4940))+(((-1.0)*r01*x4938*x4940))+(((-1.0)*x4935*x4937))+(((-1.0)*r00*x4936*x4940))+(((-1.0)*r21*x4935*x4938))+(((-1.0)*r20*x4935*x4936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x4938))+(((-1.0)*r01*x4935*x4938))+(((-1.0)*x4935*x4939))+(((-1.0)*r00*x4935*x4936))+((cj1*x4937))+((cj1*r20*x4936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4939*x4940))+(((-1.0)*r01*x4938*x4940))+(((-1.0)*x4935*x4937))+(((-1.0)*r00*x4936*x4940))+(((-1.0)*r21*x4935*x4938))+(((-1.0)*r20*x4935*x4936))))+IKsqr((((cj1*r21*x4938))+(((-1.0)*r01*x4935*x4938))+(((-1.0)*x4935*x4939))+(((-1.0)*r00*x4935*x4936))+((cj1*x4937))+((cj1*r20*x4936))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4939*x4940))+(((-1.0)*r01*x4938*x4940))+(((-1.0)*x4935*x4937))+(((-1.0)*r00*x4936*x4940))+(((-1.0)*r21*x4935*x4938))+(((-1.0)*r20*x4935*x4936))), (((cj1*r21*x4938))+(((-1.0)*r01*x4935*x4938))+(((-1.0)*x4935*x4939))+(((-1.0)*r00*x4935*x4936))+((cj1*x4937))+((cj1*r20*x4936))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4941=IKcos(j2);
IkReal x4942=IKsin(j2);
IkReal x4943=(r22*sj4);
IkReal x4944=((0.99999999995)*cj3);
IkReal x4945=(r01*sj5);
IkReal x4946=((9.9999999995e-6)*cj3);
IkReal x4947=((1.36279999993186e-7)*cj4);
IkReal x4948=(cj5*r01);
IkReal x4949=((0.99999999995)*sj3);
IkReal x4950=(r20*sj5);
IkReal x4951=((9.9999999995e-6)*sj3);
IkReal x4952=(r00*sj5);
IkReal x4953=(cj5*r21);
IkReal x4954=(r02*sj4);
IkReal x4955=((1.0)*sj1);
IkReal x4956=(cj5*r20);
IkReal x4957=((1.0)*sj4);
IkReal x4958=((1.0)*cj4);
IkReal x4959=((0.391671)*sj1);
IkReal x4960=(r21*sj5);
IkReal x4961=(cj5*r00);
IkReal x4962=(cj1*x4941);
IkReal x4963=(cj1*x4942);
IkReal x4964=(x4942*x4955);
evalcond[0]=(x4962+(((-1.0)*x4964))+(((-1.0)*r22*x4958))+(((-1.0)*x4950*x4957))+(((-1.0)*x4953*x4957)));
evalcond[1]=((((-1.0)*x4941*x4955))+(((-1.0)*r02*x4958))+(((-1.0)*x4963))+(((-1.0)*x4948*x4957))+(((-1.0)*x4952*x4957)));
evalcond[2]=((((0.391671)*x4962))+(((-1.0)*x4942*x4959))+(((-3.9e-7)*x4953))+(((-3.9e-7)*x4950))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((x4947*x4953))+((x4947*x4950))+(((0.52362)*cj1))+(((0.121761000001269)*x4960))+(((-1.36279999993186e-7)*x4943))+(((-0.121761000001269)*x4956)));
evalcond[3]=((((-0.121761000001269)*x4961))+(((1.92e-6)*cj1))+(((-1.0)*x4941*x4959))+(((-3.9e-7)*x4948))+(((-3.9e-7)*x4952))+(((-0.391671)*x4963))+(((-1.0)*px))+((x4947*x4952))+(((-0.52362)*sj1))+((x4947*x4948))+(((-1.36279999993186e-7)*x4954))+(((0.121761000001269)*x4945)));
evalcond[4]=(x4963+(((-1.0)*x4943*x4951))+(((-1.0)*x4946*x4956))+((x4943*x4944))+((sj1*x4941))+(((-1.0)*x4949*x4956))+((x4946*x4960))+((cj4*x4951*x4953))+(((-1.0)*cj4*x4944*x4950))+(((-1.0)*cj4*x4944*x4953))+((cj4*x4950*x4951))+((x4949*x4960)));
evalcond[5]=(x4962+((cj4*x4948*x4951))+(((-1.0)*x4946*x4961))+(((-1.0)*x4964))+(((-1.0)*cj4*x4944*x4948))+(((-1.0)*x4949*x4961))+((x4945*x4949))+((x4945*x4946))+((cj4*x4951*x4952))+(((-1.0)*cj4*x4944*x4952))+((x4944*x4954))+(((-1.0)*x4951*x4954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4965=((1.0)*sj1);
IkReal x4966=(sj4*sj5);
IkReal x4967=(cj4*r22);
IkReal x4968=(cj4*r12);
IkReal x4969=((1.0)*cj1);
IkReal x4970=(cj5*r21*sj4);
IkReal x4971=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r10*x4966*x4969))+(((-1.0)*x4968*x4969))+(((-1.0)*x4965*x4970))+(((-1.0)*x4965*x4967))+(((-1.0)*r20*x4965*x4966))+(((-1.0)*x4969*x4971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x4965*x4966))+((cj1*x4970))+((cj1*x4967))+((cj1*r20*x4966))+(((-1.0)*x4965*x4971))+(((-1.0)*x4965*x4968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4966*x4969))+(((-1.0)*x4968*x4969))+(((-1.0)*x4965*x4970))+(((-1.0)*x4965*x4967))+(((-1.0)*r20*x4965*x4966))+(((-1.0)*x4969*x4971))))+IKsqr(((((-1.0)*r10*x4965*x4966))+((cj1*x4970))+((cj1*x4967))+((cj1*r20*x4966))+(((-1.0)*x4965*x4971))+(((-1.0)*x4965*x4968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x4966*x4969))+(((-1.0)*x4968*x4969))+(((-1.0)*x4965*x4970))+(((-1.0)*x4965*x4967))+(((-1.0)*r20*x4965*x4966))+(((-1.0)*x4969*x4971))), ((((-1.0)*r10*x4965*x4966))+((cj1*x4970))+((cj1*x4967))+((cj1*r20*x4966))+(((-1.0)*x4965*x4971))+(((-1.0)*x4965*x4968))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4972=IKcos(j2);
IkReal x4973=IKsin(j2);
IkReal x4974=(r22*sj4);
IkReal x4975=(cj5*r10);
IkReal x4976=((0.99999999995)*cj3);
IkReal x4977=((9.9999999995e-6)*sj3);
IkReal x4978=((1.36279999993186e-7)*cj4);
IkReal x4979=(cj5*r11);
IkReal x4980=(cj5*r21);
IkReal x4981=(r10*sj5);
IkReal x4982=((1.0)*sj4);
IkReal x4983=((1.0)*sj1);
IkReal x4984=((9.9999999995e-6)*cj3);
IkReal x4985=(cj5*r20);
IkReal x4986=(r20*sj5);
IkReal x4987=((1.0)*cj4);
IkReal x4988=((0.99999999995)*sj3);
IkReal x4989=((0.391671)*sj1);
IkReal x4990=((0.121761000001269)*sj5);
IkReal x4991=(r11*sj5);
IkReal x4992=(r12*sj4);
IkReal x4993=(r21*sj5);
IkReal x4994=(cj1*x4972);
IkReal x4995=(cj1*x4973);
IkReal x4996=(cj4*x4986);
IkReal x4997=(x4973*x4983);
evalcond[0]=(x4994+(((-1.0)*r22*x4987))+(((-1.0)*x4982*x4986))+(((-1.0)*x4997))+(((-1.0)*x4980*x4982)));
evalcond[1]=((((-1.0)*x4972*x4983))+(((-1.0)*r12*x4987))+(((-1.0)*x4979*x4982))+(((-1.0)*x4981*x4982))+(((-1.0)*x4995)));
evalcond[2]=((((-1.0)*x4973*x4989))+(((-3.9e-7)*x4986))+(((-3.9e-7)*x4980))+((x4978*x4980))+((x4978*x4986))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-0.121761000001269)*x4985))+(((-1.36279999993186e-7)*x4974))+((r21*x4990))+(((0.391671)*x4994)));
evalcond[3]=((((1.92e-6)*cj1))+(((-1.0)*x4972*x4989))+(((-3.9e-7)*x4981))+((x4978*x4981))+(((-3.9e-7)*x4979))+((r11*x4990))+(((-0.391671)*x4995))+(((-1.0)*py))+(((-0.52362)*sj1))+((x4978*x4979))+(((-1.36279999993186e-7)*x4992))+(((-0.121761000001269)*x4975)));
evalcond[4]=(x4995+((x4977*x4996))+(((-1.0)*x4985*x4988))+((cj4*x4977*x4980))+((sj1*x4972))+((x4988*x4993))+((x4974*x4976))+((x4984*x4993))+(((-1.0)*x4984*x4985))+(((-1.0)*x4976*x4996))+(((-1.0)*x4974*x4977))+(((-1.0)*cj4*x4976*x4980)));
evalcond[5]=(x4994+(((-1.0)*x4997))+((cj4*x4977*x4981))+(((-1.0)*x4975*x4984))+(((-1.0)*x4975*x4988))+((x4976*x4992))+(((-1.0)*cj4*x4976*x4979))+((x4988*x4991))+((x4984*x4991))+(((-1.0)*x4977*x4992))+((cj4*x4977*x4979))+(((-1.0)*cj4*x4976*x4981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4998=((1.0)*sj1);
IkReal x4999=(sj4*sj5);
IkReal x5000=(cj4*r12);
IkReal x5001=(cj4*r22);
IkReal x5002=(cj5*sj4);
IkReal x5003=(cj1*x5002);
if( IKabs((((r11*x5003))+(((-1.0)*x4998*x5001))+((cj1*x5000))+(((-1.0)*r20*x4998*x4999))+((cj1*r10*x4999))+(((-1.0)*r21*x4998*x5002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x4999))+((cj1*x5001))+((sj1*x5000))+((r11*sj1*x5002))+((cj1*r20*x4999))+((r21*x5003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x5003))+(((-1.0)*x4998*x5001))+((cj1*x5000))+(((-1.0)*r20*x4998*x4999))+((cj1*r10*x4999))+(((-1.0)*r21*x4998*x5002))))+IKsqr((((r10*sj1*x4999))+((cj1*x5001))+((sj1*x5000))+((r11*sj1*x5002))+((cj1*r20*x4999))+((r21*x5003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x5003))+(((-1.0)*x4998*x5001))+((cj1*x5000))+(((-1.0)*r20*x4998*x4999))+((cj1*r10*x4999))+(((-1.0)*r21*x4998*x5002))), (((r10*sj1*x4999))+((cj1*x5001))+((sj1*x5000))+((r11*sj1*x5002))+((cj1*r20*x4999))+((r21*x5003))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5004=IKcos(j2);
IkReal x5005=IKsin(j2);
IkReal x5006=(r22*sj4);
IkReal x5007=(cj5*r10);
IkReal x5008=((0.99999999995)*cj3);
IkReal x5009=((9.9999999995e-6)*sj3);
IkReal x5010=((1.36279999993186e-7)*cj4);
IkReal x5011=(cj5*r11);
IkReal x5012=(cj5*r21);
IkReal x5013=(r10*sj5);
IkReal x5014=((1.0)*sj4);
IkReal x5015=(r12*sj4);
IkReal x5016=((9.9999999995e-6)*cj3);
IkReal x5017=(cj5*r20);
IkReal x5018=(r20*sj5);
IkReal x5019=((1.0)*cj4);
IkReal x5020=((0.99999999995)*sj3);
IkReal x5021=((0.121761000001269)*sj5);
IkReal x5022=(r11*sj5);
IkReal x5023=(r21*sj5);
IkReal x5024=(sj1*x5004);
IkReal x5025=(cj1*x5005);
IkReal x5026=(cj1*x5004);
IkReal x5027=(cj4*x5018);
IkReal x5028=(sj1*x5005);
IkReal x5029=(x5025+x5024);
evalcond[0]=(x5029+(((-1.0)*x5013*x5014))+(((-1.0)*x5011*x5014))+(((-1.0)*r12*x5019)));
evalcond[1]=((((-1.0)*x5028))+(((-1.0)*x5014*x5018))+(((-1.0)*r22*x5019))+x5026+(((-1.0)*x5012*x5014)));
evalcond[2]=((((-0.391671)*x5028))+((x5010*x5012))+((x5010*x5018))+(((-1.36279999993186e-7)*x5006))+(((0.391671)*x5026))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-3.9e-7)*x5018))+(((-3.9e-7)*x5012))+(((-0.121761000001269)*x5017))+((r21*x5021)));
evalcond[3]=(((r11*x5021))+((x5010*x5011))+((x5010*x5013))+(((0.52362)*sj1))+(((0.391671)*x5024))+(((0.391671)*x5025))+(((-1.0)*py))+(((-1.36279999993186e-7)*x5015))+(((-1.92e-6)*cj1))+(((-3.9e-7)*x5013))+(((-3.9e-7)*x5011))+(((-0.121761000001269)*x5007)));
evalcond[4]=((((-1.0)*cj4*x5008*x5012))+((x5020*x5023))+(((-1.0)*x5006*x5009))+(((-1.0)*x5016*x5017))+((x5009*x5027))+x5029+((x5016*x5023))+(((-1.0)*x5017*x5020))+((cj4*x5009*x5012))+((x5006*x5008))+(((-1.0)*x5008*x5027)));
evalcond[5]=((((-1.0)*cj4*x5008*x5011))+(((-1.0)*cj4*x5008*x5013))+(((-1.0)*x5009*x5015))+((x5020*x5022))+(((-1.0)*x5007*x5020))+(((-1.0)*x5026))+x5028+((x5016*x5022))+((x5008*x5015))+((cj4*x5009*x5011))+((cj4*x5009*x5013))+(((-1.0)*x5007*x5016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5030=((1.0)*sj1);
IkReal x5031=(sj4*sj5);
IkReal x5032=(cj0*r20);
IkReal x5033=(cj4*r12);
IkReal x5034=(cj0*cj1);
IkReal x5035=(cj4*r22);
IkReal x5036=((1.0)*cj1);
IkReal x5037=(cj5*sj4);
CheckValue<IkReal> x5038 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x5030*x5037))+(((-1.0)*x5033*x5036))+(((-1.0)*r11*x5036*x5037))+(((-1.0)*x5030*x5031*x5032))+(((-1.0)*r10*x5031*x5036))+(((-1.0)*cj0*x5030*x5035)))),IkReal((((r21*x5034*x5037))+((cj1*x5031*x5032))+(((-1.0)*x5030*x5033))+((x5034*x5035))+(((-1.0)*r10*x5030*x5031))+(((-1.0)*r11*x5030*x5037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5038.valid){
continue;
}
CheckValue<IkReal> x5039=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x5039.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5038.value)+(((1.5707963267949)*(x5039.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x5040=IKsin(j2);
IkReal x5041=IKcos(j2);
IkReal x5042=((9.9999999995e-6)*sj5);
IkReal x5043=(cj3*r01);
IkReal x5044=(cj4*r00);
IkReal x5045=((3.9e-7)*cj5);
IkReal x5046=((1.36279999993186e-7)*sj5);
IkReal x5047=(cj4*r10);
IkReal x5048=((9.9999999995e-6)*cj5);
IkReal x5049=(cj3*r20);
IkReal x5050=(cj0*sj1);
IkReal x5051=((0.121761000001269)*sj5);
IkReal x5052=(cj4*r01);
IkReal x5053=((1.36279999993186e-7)*cj5);
IkReal x5054=((0.99999999995)*cj3);
IkReal x5055=(r02*sj4);
IkReal x5056=(r11*sj3);
IkReal x5057=((0.99999999995)*sj5);
IkReal x5058=((3.9e-7)*sj5);
IkReal x5059=((0.121761000001269)*cj5);
IkReal x5060=((1.0)*sj4);
IkReal x5061=(r22*sj4);
IkReal x5062=((9.9999999995e-6)*sj3);
IkReal x5063=(r12*sj4);
IkReal x5064=((1.0)*cj4);
IkReal x5065=(cj5*r21);
IkReal x5066=(cj4*cj5);
IkReal x5067=(r21*sj3);
IkReal x5068=(cj4*r20);
IkReal x5069=((1.92e-6)*cj1);
IkReal x5070=(sj0*sj1);
IkReal x5071=(cj1*x5040);
IkReal x5072=((1.0)*x5041);
IkReal x5073=((0.391671)*x5041);
IkReal x5074=(sj1*x5040);
IkReal x5075=(cj1*x5041);
IkReal x5076=((0.99999999995)*cj5*sj3);
evalcond[0]=(x5075+(((-1.0)*r20*sj5*x5060))+(((-1.0)*r22*x5064))+(((-1.0)*x5074))+(((-1.0)*x5060*x5065)));
evalcond[1]=(((sj0*x5071))+(((-1.0)*r02*x5064))+(((-1.0)*cj5*r01*x5060))+((x5041*x5070))+(((-1.0)*r00*sj5*x5060)));
evalcond[2]=((((-1.0)*cj0*x5071))+(((-1.0)*cj5*r11*x5060))+(((-1.0)*x5050*x5072))+(((-1.0)*r12*x5064))+(((-1.0)*r10*sj5*x5060)));
evalcond[3]=(((cj4*r21*x5053))+((r21*x5051))+(((-0.391671)*x5074))+(((-1.0)*r21*x5045))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x5061))+((cj1*x5073))+(((-1.0)*r20*x5059))+(((-1.0)*r20*x5058))+((x5046*x5068)));
evalcond[4]=((((0.001538)*cj0))+(((0.391671)*sj0*x5071))+(((0.52362)*x5070))+(((-1.0)*sj0*x5069))+((x5052*x5053))+((r01*x5051))+((x5070*x5073))+(((-1.0)*px))+((x5044*x5046))+(((-1.0)*r01*x5045))+(((-1.36279999993186e-7)*x5055))+(((-1.0)*r00*x5058))+(((-1.0)*r00*x5059)));
evalcond[5]=((((0.001538)*sj0))+((cj0*x5069))+(((-1.0)*r10*x5059))+(((-1.0)*r10*x5058))+((r11*x5051))+(((-1.0)*x5050*x5073))+(((-0.52362)*x5050))+(((-1.0)*py))+(((-0.391671)*cj0*x5071))+(((-1.36279999993186e-7)*x5063))+((x5046*x5047))+(((-1.0)*r11*x5045))+((cj4*r11*x5053)));
evalcond[6]=(((cj3*r21*x5042))+(((-1.0)*x5061*x5062))+(((-1.0)*r20*x5076))+((sj1*x5041))+(((-1.0)*cj4*x5054*x5065))+((x5054*x5061))+((sj3*x5042*x5068))+x5071+(((-1.0)*x5048*x5049))+(((-1.0)*cj4*x5049*x5057))+((x5057*x5067))+((cj4*x5048*x5067)));
evalcond[7]=((((-1.0)*cj1*sj0*x5072))+((r01*sj3*x5057))+((x5040*x5070))+(((-1.0)*sj5*x5044*x5054))+(((-1.0)*x5055*x5062))+((sj3*x5048*x5052))+((x5042*x5043))+((sj3*x5042*x5044))+(((-0.99999999995)*x5043*x5066))+(((-1.0)*r00*x5076))+(((-1.0)*cj3*r00*x5048))+((x5054*x5055)));
evalcond[8]=(((cj0*x5075))+((cj3*r11*x5042))+(((-1.0)*x5040*x5050))+(((-1.0)*r10*x5076))+((x5054*x5063))+((cj4*x5048*x5056))+((x5056*x5057))+((sj3*x5042*x5047))+(((-1.0)*r11*x5054*x5066))+(((-1.0)*cj3*r10*x5048))+(((-1.0)*x5062*x5063))+(((-1.0)*sj5*x5047*x5054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5077=((1.0)*sj0);
IkReal x5078=(cj1*sj4);
IkReal x5079=(r20*sj5);
IkReal x5080=(cj4*sj1);
IkReal x5081=(r00*sj5);
IkReal x5082=(sj1*sj4);
IkReal x5083=(cj1*cj4);
IkReal x5084=(cj5*x5082);
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x5085.valid){
continue;
}
CheckValue<IkReal> x5086 = IKatan2WithCheck(IkReal((((cj5*r01*x5078))+((x5078*x5081))+((r02*x5083))+(((-1.0)*r21*x5077*x5084))+(((-1.0)*x5077*x5079*x5082))+(((-1.0)*r22*x5077*x5080)))),IkReal((((r01*x5084))+((sj0*x5078*x5079))+((cj5*r21*sj0*x5078))+((r22*sj0*x5083))+((r02*x5080))+((x5081*x5082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5086.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5085.value)))+(x5086.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x5087=IKsin(j2);
IkReal x5088=IKcos(j2);
IkReal x5089=((9.9999999995e-6)*sj5);
IkReal x5090=(cj3*r01);
IkReal x5091=(cj4*r00);
IkReal x5092=((3.9e-7)*cj5);
IkReal x5093=((1.36279999993186e-7)*sj5);
IkReal x5094=(cj4*r10);
IkReal x5095=((9.9999999995e-6)*cj5);
IkReal x5096=(cj3*r20);
IkReal x5097=(cj0*sj1);
IkReal x5098=((0.121761000001269)*sj5);
IkReal x5099=(cj4*r01);
IkReal x5100=((1.36279999993186e-7)*cj5);
IkReal x5101=((0.99999999995)*cj3);
IkReal x5102=(r02*sj4);
IkReal x5103=(r11*sj3);
IkReal x5104=((0.99999999995)*sj5);
IkReal x5105=((3.9e-7)*sj5);
IkReal x5106=((0.121761000001269)*cj5);
IkReal x5107=((1.0)*sj4);
IkReal x5108=(r22*sj4);
IkReal x5109=((9.9999999995e-6)*sj3);
IkReal x5110=(r12*sj4);
IkReal x5111=((1.0)*cj4);
IkReal x5112=(cj5*r21);
IkReal x5113=(cj4*cj5);
IkReal x5114=(r21*sj3);
IkReal x5115=(cj4*r20);
IkReal x5116=((1.92e-6)*cj1);
IkReal x5117=(sj0*sj1);
IkReal x5118=(cj1*x5087);
IkReal x5119=((1.0)*x5088);
IkReal x5120=((0.391671)*x5088);
IkReal x5121=(sj1*x5087);
IkReal x5122=(cj1*x5088);
IkReal x5123=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*r22*x5111))+x5122+(((-1.0)*x5107*x5112))+(((-1.0)*x5121))+(((-1.0)*r20*sj5*x5107)));
evalcond[1]=((((-1.0)*r00*sj5*x5107))+((x5088*x5117))+(((-1.0)*r02*x5111))+((sj0*x5118))+(((-1.0)*cj5*r01*x5107)));
evalcond[2]=((((-1.0)*x5097*x5119))+(((-1.0)*cj5*r11*x5107))+(((-1.0)*cj0*x5118))+(((-1.0)*r10*sj5*x5107))+(((-1.0)*r12*x5111)));
evalcond[3]=((((-0.391671)*x5121))+((r21*x5098))+(((-1.36279999993186e-7)*x5108))+((cj4*r21*x5100))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((x5093*x5115))+(((-1.0)*r21*x5092))+(((-1.0)*r20*x5105))+(((-1.0)*r20*x5106))+((cj1*x5120)));
evalcond[4]=((((0.001538)*cj0))+(((-1.36279999993186e-7)*x5102))+((x5099*x5100))+(((-1.0)*r01*x5092))+((x5091*x5093))+((r01*x5098))+(((0.52362)*x5117))+(((-1.0)*px))+(((-1.0)*sj0*x5116))+(((0.391671)*sj0*x5118))+((x5117*x5120))+(((-1.0)*r00*x5106))+(((-1.0)*r00*x5105)));
evalcond[5]=((((-1.0)*r10*x5105))+(((-1.0)*r10*x5106))+(((0.001538)*sj0))+(((-1.0)*r11*x5092))+((x5093*x5094))+((cj4*r11*x5100))+(((-1.36279999993186e-7)*x5110))+((cj0*x5116))+(((-0.391671)*cj0*x5118))+((r11*x5098))+(((-1.0)*py))+(((-0.52362)*x5097))+(((-1.0)*x5097*x5120)));
evalcond[6]=((((-1.0)*cj4*x5096*x5104))+((x5104*x5114))+((cj4*x5095*x5114))+((x5101*x5108))+(((-1.0)*r20*x5123))+x5118+(((-1.0)*cj4*x5101*x5112))+((sj3*x5089*x5115))+(((-1.0)*x5108*x5109))+((cj3*r21*x5089))+((sj1*x5088))+(((-1.0)*x5095*x5096)));
evalcond[7]=(((sj3*x5095*x5099))+(((-0.99999999995)*x5090*x5113))+((x5101*x5102))+(((-1.0)*r00*x5123))+(((-1.0)*cj1*sj0*x5119))+((r01*sj3*x5104))+(((-1.0)*sj5*x5091*x5101))+((x5089*x5090))+(((-1.0)*x5102*x5109))+(((-1.0)*cj3*r00*x5095))+((x5087*x5117))+((sj3*x5089*x5091)));
evalcond[8]=(((cj4*x5095*x5103))+(((-1.0)*r10*x5123))+((x5101*x5110))+(((-1.0)*x5087*x5097))+((cj0*x5122))+(((-1.0)*x5109*x5110))+(((-1.0)*r11*x5101*x5113))+((cj3*r11*x5089))+(((-1.0)*sj5*x5094*x5101))+(((-1.0)*cj3*r10*x5095))+((x5103*x5104))+((sj3*x5089*x5094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5124=sj0*sj0;
IkReal x5125=(cj4*cj5);
IkReal x5126=(sj4*sj5);
IkReal x5127=(r00*sj0);
IkReal x5128=(r01*sj0);
IkReal x5129=(px*sj0);
IkReal x5130=(cj4*sj5);
IkReal x5131=(cj5*r21);
IkReal x5132=(r02*sj0);
IkReal x5133=(cj5*sj4);
IkReal x5134=(cj0*sj0);
IkReal x5135=((((0.121761000001269)*r21*sj5))+(((-3.9e-7)*r20*sj5))+(((-3.9e-7)*x5131))+(((0.391671)*r20*x5126))+(((0.391671)*sj4*x5131))+(((-1.0)*pz))+(((0.391671)*cj4*r22))+(((1.36279999993186e-7)*r21*x5125))+(((1.36279999993186e-7)*r20*x5130))+(((-1.36279999993186e-7)*r22*sj4))+(((-0.121761000001269)*cj5*r20)));
IkReal x5136=(x5124*x5135);
CheckValue<IkReal> x5137=IKPowWithIntegerCheck(IKsign(x5124),-1);
if(!x5137.valid){
continue;
}
CheckValue<IkReal> x5138 = IKatan2WithCheck(IkReal(((((-5033.29725)*x5134))+(((-12.0)*x5136))+(((1.27632375)*cj5*x5128))+(((-398478.092629152)*sj5*x5128))+(((-1281792.306375)*x5128*x5133))+(((398478.092629152)*cj5*x5127))+(((-0.4459933349777)*x5127*x5130))+(((-1281792.306375)*x5126*x5127))+(((0.4459933349777)*sj4*x5132))+(((-0.4459933349777)*x5125*x5128))+(((3272625.0)*x5129))+(((-1281792.306375)*cj4*x5132))+(((1.27632375)*sj5*x5127)))),IkReal(((((1.63535999991823e-6)*x5125*x5128))+(((-3272625.0)*x5136))+(((-4.68e-6)*sj5*x5127))+(((1.46113200001522)*sj5*x5128))+(((-12.0)*x5129))+(((1.63535999991823e-6)*x5127*x5130))+(((4.700052)*x5128*x5133))+(((-4.68e-6)*cj5*x5128))+(((4.700052)*x5126*x5127))+(((0.018456)*x5134))+(((-1.46113200001522)*cj5*x5127))+(((-1.63535999991823e-6)*sj4*x5132))+(((4.700052)*cj4*x5132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5138.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5137.value)))+(x5138.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x5139=IKcos(j1);
IkReal x5140=cj0*cj0;
IkReal x5141=IKsin(j1);
IkReal x5142=sj0*sj0;
IkReal x5143=((1.36279999993186e-7)*cj0);
IkReal x5144=(r12*sj4);
IkReal x5145=(r21*sj5);
IkReal x5146=((0.391670999980416)*sj3);
IkReal x5147=(r20*sj5);
IkReal x5148=((0.391671)*sj4);
IkReal x5149=((3.9e-7)*cj5);
IkReal x5150=((1.0)*pz);
IkReal x5151=((3.91670999980416e-6)*cj3);
IkReal x5152=(r00*sj5);
IkReal x5153=(r11*sj5);
IkReal x5154=(cj0*sj0);
IkReal x5155=(cj5*r11);
IkReal x5156=(r02*sj4);
IkReal x5157=(cj0*r21);
IkReal x5158=((3.9e-7)*sj0);
IkReal x5159=((1.36279999993186e-7)*sj0);
IkReal x5160=(r01*sj0);
IkReal x5161=((0.121761000001269)*sj5);
IkReal x5162=(cj5*r10);
IkReal x5163=((3.91670999980416e-6)*sj3);
IkReal x5164=(cj5*r00);
IkReal x5165=(cj0*r01);
IkReal x5166=((1.36279999993186e-7)*cj4);
IkReal x5167=(r22*sj4);
IkReal x5168=((3.9e-7)*cj0);
IkReal x5169=(cj4*sj0);
IkReal x5170=((0.391671)*r12);
IkReal x5171=(cj5*r21);
IkReal x5172=((1.0)*px);
IkReal x5173=((0.391670999980416)*cj3);
IkReal x5174=(cj0*cj4);
IkReal x5175=((0.121761000001269)*cj0);
IkReal x5176=(r01*sj5);
IkReal x5177=(r10*sj5);
IkReal x5178=((0.391671)*r02);
IkReal x5179=(cj5*r20);
IkReal x5180=((1.0)*py);
IkReal x5181=((0.001538)*x5154);
IkReal x5182=((1.92e-6)*x5141);
IkReal x5183=((0.52362)*x5139);
IkReal x5184=((0.52362)*x5141);
IkReal x5185=(sj5*x5166);
IkReal x5186=((0.121761000001269)*x5153);
IkReal x5187=(cj4*x5163);
IkReal x5188=((0.121761000001269)*cj5*sj0);
IkReal x5189=(cj4*cj5*r01);
IkReal x5190=((3.9e-7)*x5177);
IkReal x5191=((1.92e-6)*x5139);
IkReal x5192=(sj0*x5179);
IkReal x5193=(x5154*x5184);
IkReal x5194=(x5154*x5191);
evalcond[0]=(((x5147*x5148))+(((-1.0)*r21*x5149))+((x5166*x5171))+(((-1.36279999993186e-7)*x5167))+x5182+x5183+(((0.391671)*cj4*r22))+(((-3.9e-7)*x5147))+(((-1.0)*x5150))+((x5148*x5171))+(((-0.121761000001269)*x5179))+(((0.121761000001269)*x5145))+((x5147*x5166)));
evalcond[1]=(((cj4*x5143*x5177))+(((-1.0)*x5140*x5184))+((x5153*x5175))+(((-1.0)*x5143*x5144))+((x5140*x5191))+(((-1.0)*cj0*r11*x5149))+((cj4*x5143*x5155))+(((-1.0)*x5168*x5177))+x5181+(((-1.0)*x5162*x5175))+((x5170*x5174))+((cj0*x5148*x5155))+((cj0*x5148*x5177))+(((-1.0)*cj0*x5180)));
evalcond[2]=(((x5142*x5191))+(((-1.0)*x5142*x5184))+(((-1.0)*x5160*x5161))+(((-1.0)*x5169*x5178))+((x5149*x5160))+(((0.121761000001269)*sj0*x5164))+((px*sj0))+(((-1.0)*sj0*x5148*x5152))+((x5152*x5158))+(((-1.0)*cj5*x5148*x5160))+(((-1.0)*x5181))+(((-1.0)*cj4*x5152*x5159))+(((-1.0)*x5159*x5189))+((x5156*x5159)));
evalcond[3]=(((x5146*x5153))+((x5177*x5187))+(((-1.0)*cj4*x5143*x5171))+(((-1.0)*cj4*x5143*x5147))+((x5143*x5167))+((x5149*x5157))+((x5155*x5187))+(((-1.0)*cj4*x5155*x5173))+(((-1.0)*x5151*x5162))+((x5151*x5153))+((x5175*x5179))+(((-1.0)*x5146*x5162))+((cj0*pz))+(((-1.0)*cj4*x5173*x5177))+(((-1.0)*cj0*x5182))+(((-1.0)*cj0*x5183))+(((-1.0)*x5144*x5163))+(((-1.0)*x5145*x5175))+((x5144*x5173))+((x5147*x5168)));
evalcond[4]=(((x5151*x5176))+(((-1.0)*sj0*x5150))+(((-1.0)*r21*sj0*x5149))+((x5156*x5173))+(((-0.121761000001269)*x5192))+(((-1.0)*x5159*x5167))+((cj5*r01*x5187))+(((-1.0)*x5151*x5164))+((x5152*x5187))+(((-1.0)*x5156*x5163))+(((-1.0)*cj4*x5152*x5173))+(((-1.0)*x5147*x5158))+((sj0*x5182))+((sj0*x5183))+(((0.121761000001269)*sj0*x5145))+(((-1.0)*x5146*x5164))+((cj4*x5159*x5171))+((x5146*x5176))+(((-1.0)*x5173*x5189))+((cj4*x5147*x5159)));
evalcond[5]=((((0.001538)*sj0))+((cj0*x5191))+(((-1.0)*r11*x5149))+(((-1.36279999993186e-7)*x5144))+((cj5*x5157*x5187))+((x5147*x5163*x5174))+(((-1.0)*cj0*x5163*x5167))+(((-1.0)*cj0*x5151*x5179))+((x5166*x5177))+(((-1.0)*x5190))+x5186+((x5155*x5166))+((cj0*x5145*x5146))+(((-1.0)*cj4*cj5*x5157*x5173))+((cj0*x5145*x5151))+((cj0*x5167*x5173))+(((-1.0)*cj0*x5146*x5179))+(((-0.121761000001269)*x5162))+(((-1.0)*x5180))+(((-1.0)*cj0*x5184))+(((-1.0)*x5147*x5173*x5174)));
evalcond[6]=((((0.001538)*cj0))+((r01*x5161))+(((-1.0)*sj0*x5145*x5151))+((x5152*x5166))+((x5146*x5192))+((cj5*r01*x5166))+((x5151*x5192))+(((-1.0)*r01*x5149))+(((-1.0)*x5172))+(((-1.0)*sj0*x5191))+(((-1.0)*sj0*x5167*x5173))+((x5169*x5171*x5173))+(((-3.9e-7)*x5152))+((sj0*x5163*x5167))+((sj0*x5184))+(((-0.121761000001269)*x5164))+(((-1.36279999993186e-7)*x5156))+((x5147*x5169*x5173))+(((-1.0)*x5147*x5163*x5169))+(((-1.0)*sj0*x5145*x5146))+(((-1.0)*x5163*x5169*x5171)));
evalcond[7]=((((-1.0)*cj4*x5159*x5177))+(((-1.0)*cj4*x5155*x5159))+(((-0.001538)*x5142))+(((-1.0)*x5194))+x5193+((x5158*x5177))+((cj5*x5148*x5165))+(((0.121761000001269)*sj0*x5162))+((cj0*x5148*x5152))+((r11*sj0*x5149))+(((-1.0)*sj0*x5186))+((py*sj0))+((x5174*x5178))+((x5144*x5159)));
evalcond[8]=((((-1.0)*cj0*x5172))+(((0.001538)*x5140))+(((-1.0)*x5149*x5165))+(((-1.0)*x5169*x5170))+((cj4*x5143*x5152))+(((-1.0)*x5194))+((x5143*x5189))+x5193+(((-1.0)*x5164*x5175))+(((-1.0)*x5143*x5156))+(((-1.0)*sj0*x5148*x5155))+(((-1.0)*x5152*x5168))+((x5161*x5165))+(((-1.0)*sj0*x5148*x5177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5195=(sj1*sj4);
IkReal x5196=(cj5*r01);
IkReal x5197=(r20*sj5);
IkReal x5198=(cj4*sj1);
IkReal x5199=(r00*sj5);
IkReal x5200=(cj1*sj4);
IkReal x5201=(cj5*r21);
IkReal x5202=(cj1*cj4);
if( IKabs(((((-1.0)*x5195*x5197))+((x5196*x5200))+(((-1.0)*x5195*x5201))+((r02*x5202))+(((-1.0)*r22*x5198))+((x5199*x5200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5195*x5196))+((x5195*x5199))+((r02*x5198))+((x5200*x5201))+((x5197*x5200))+((r22*x5202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5195*x5197))+((x5196*x5200))+(((-1.0)*x5195*x5201))+((r02*x5202))+(((-1.0)*r22*x5198))+((x5199*x5200))))+IKsqr((((x5195*x5196))+((x5195*x5199))+((r02*x5198))+((x5200*x5201))+((x5197*x5200))+((r22*x5202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5195*x5197))+((x5196*x5200))+(((-1.0)*x5195*x5201))+((r02*x5202))+(((-1.0)*r22*x5198))+((x5199*x5200))), (((x5195*x5196))+((x5195*x5199))+((r02*x5198))+((x5200*x5201))+((x5197*x5200))+((r22*x5202))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5203=IKcos(j2);
IkReal x5204=IKsin(j2);
IkReal x5205=(r22*sj4);
IkReal x5206=((0.99999999995)*cj3);
IkReal x5207=(r01*sj5);
IkReal x5208=((9.9999999995e-6)*cj3);
IkReal x5209=((1.36279999993186e-7)*cj4);
IkReal x5210=(cj5*r01);
IkReal x5211=(r20*sj5);
IkReal x5212=((9.9999999995e-6)*sj3);
IkReal x5213=((0.99999999995)*sj3);
IkReal x5214=(r00*sj5);
IkReal x5215=(cj5*r21);
IkReal x5216=(r02*sj4);
IkReal x5217=((1.0)*sj4);
IkReal x5218=(cj5*r20);
IkReal x5219=((1.0)*cj4);
IkReal x5220=(r21*sj5);
IkReal x5221=(cj5*r00);
IkReal x5222=(sj1*x5203);
IkReal x5223=(cj1*x5204);
IkReal x5224=(cj1*x5203);
IkReal x5225=(sj1*x5204);
IkReal x5226=(x5223+x5222);
evalcond[0]=(x5226+(((-1.0)*x5214*x5217))+(((-1.0)*x5210*x5217))+(((-1.0)*r02*x5219)));
evalcond[1]=((((-1.0)*x5215*x5217))+x5224+(((-1.0)*x5211*x5217))+(((-1.0)*r22*x5219))+(((-1.0)*x5225)));
evalcond[2]=((((-0.391671)*x5225))+((x5209*x5215))+((x5209*x5211))+(((-0.121761000001269)*x5218))+(((-1.36279999993186e-7)*x5205))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.121761000001269)*x5220))+(((0.391671)*x5224))+(((0.52362)*cj1))+(((-3.9e-7)*x5211))+(((-3.9e-7)*x5215)));
evalcond[3]=((((0.121761000001269)*x5207))+((x5209*x5214))+((x5209*x5210))+(((-1.36279999993186e-7)*x5216))+(((0.52362)*sj1))+(((-1.0)*px))+(((0.391671)*x5222))+(((0.391671)*x5223))+(((-1.92e-6)*cj1))+(((-0.121761000001269)*x5221))+(((-3.9e-7)*x5210))+(((-3.9e-7)*x5214)));
evalcond[4]=(((x5205*x5206))+(((-1.0)*cj4*x5206*x5215))+(((-1.0)*cj4*x5206*x5211))+((x5213*x5220))+((cj4*x5212*x5215))+(((-1.0)*x5213*x5218))+x5226+((cj4*x5211*x5212))+(((-1.0)*x5205*x5212))+(((-1.0)*x5208*x5218))+((x5208*x5220)));
evalcond[5]=(((x5207*x5213))+(((-1.0)*x5213*x5221))+(((-1.0)*x5208*x5221))+(((-1.0)*x5212*x5216))+(((-1.0)*cj4*x5206*x5214))+(((-1.0)*cj4*x5206*x5210))+((cj4*x5212*x5214))+x5225+((cj4*x5210*x5212))+((x5206*x5216))+(((-1.0)*x5224))+((x5207*x5208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5227=((1.0)*sj1);
IkReal x5228=(sj4*sj5);
IkReal x5229=(cj4*r22);
IkReal x5230=(cj5*sj4);
IkReal x5231=(cj4*r02);
IkReal x5232=((1.0)*cj1);
if( IKabs(((((-1.0)*x5227*x5229))+(((-1.0)*r21*x5227*x5230))+(((-1.0)*x5231*x5232))+(((-1.0)*r00*x5228*x5232))+(((-1.0)*r01*x5230*x5232))+(((-1.0)*r20*x5227*x5228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5227*x5230))+((cj1*x5229))+(((-1.0)*r00*x5227*x5228))+((cj1*r21*x5230))+(((-1.0)*x5227*x5231))+((cj1*r20*x5228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5227*x5229))+(((-1.0)*r21*x5227*x5230))+(((-1.0)*x5231*x5232))+(((-1.0)*r00*x5228*x5232))+(((-1.0)*r01*x5230*x5232))+(((-1.0)*r20*x5227*x5228))))+IKsqr(((((-1.0)*r01*x5227*x5230))+((cj1*x5229))+(((-1.0)*r00*x5227*x5228))+((cj1*r21*x5230))+(((-1.0)*x5227*x5231))+((cj1*r20*x5228))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5227*x5229))+(((-1.0)*r21*x5227*x5230))+(((-1.0)*x5231*x5232))+(((-1.0)*r00*x5228*x5232))+(((-1.0)*r01*x5230*x5232))+(((-1.0)*r20*x5227*x5228))), ((((-1.0)*r01*x5227*x5230))+((cj1*x5229))+(((-1.0)*r00*x5227*x5228))+((cj1*r21*x5230))+(((-1.0)*x5227*x5231))+((cj1*r20*x5228))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5233=IKcos(j2);
IkReal x5234=IKsin(j2);
IkReal x5235=(r22*sj4);
IkReal x5236=((0.99999999995)*cj3);
IkReal x5237=(r01*sj5);
IkReal x5238=((9.9999999995e-6)*cj3);
IkReal x5239=((1.36279999993186e-7)*cj4);
IkReal x5240=(cj5*r01);
IkReal x5241=((0.99999999995)*sj3);
IkReal x5242=(r20*sj5);
IkReal x5243=((9.9999999995e-6)*sj3);
IkReal x5244=(r00*sj5);
IkReal x5245=(cj5*r21);
IkReal x5246=(r02*sj4);
IkReal x5247=((1.0)*sj1);
IkReal x5248=(cj5*r20);
IkReal x5249=((1.0)*sj4);
IkReal x5250=((1.0)*cj4);
IkReal x5251=((0.391671)*sj1);
IkReal x5252=(r21*sj5);
IkReal x5253=(cj5*r00);
IkReal x5254=(cj1*x5233);
IkReal x5255=(cj1*x5234);
IkReal x5256=(x5234*x5247);
evalcond[0]=((((-1.0)*x5256))+(((-1.0)*x5242*x5249))+x5254+(((-1.0)*x5245*x5249))+(((-1.0)*r22*x5250)));
evalcond[1]=((((-1.0)*r02*x5250))+(((-1.0)*x5255))+(((-1.0)*x5240*x5249))+(((-1.0)*x5233*x5247))+(((-1.0)*x5244*x5249)));
evalcond[2]=(((x5239*x5242))+((x5239*x5245))+(((-0.121761000001269)*x5248))+(((0.391671)*x5254))+(((-1.0)*x5234*x5251))+(((-3.9e-7)*x5242))+(((-3.9e-7)*x5245))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-1.36279999993186e-7)*x5235))+(((0.52362)*cj1))+(((0.121761000001269)*x5252)));
evalcond[3]=(((x5239*x5240))+((x5239*x5244))+(((1.92e-6)*cj1))+(((-0.121761000001269)*x5253))+(((-0.391671)*x5255))+(((-3.9e-7)*x5240))+(((-3.9e-7)*x5244))+(((-1.0)*px))+(((-0.52362)*sj1))+(((-1.36279999993186e-7)*x5246))+(((-1.0)*x5233*x5251))+(((0.121761000001269)*x5237)));
evalcond[4]=(((x5241*x5252))+(((-1.0)*x5235*x5243))+((cj4*x5243*x5245))+((x5235*x5236))+((x5238*x5252))+x5255+((cj4*x5242*x5243))+((sj1*x5233))+(((-1.0)*x5241*x5248))+(((-1.0)*cj4*x5236*x5245))+(((-1.0)*cj4*x5236*x5242))+(((-1.0)*x5238*x5248)));
evalcond[5]=((((-1.0)*x5238*x5253))+((x5237*x5241))+((cj4*x5243*x5244))+((x5237*x5238))+(((-1.0)*x5243*x5246))+(((-1.0)*x5256))+((x5236*x5246))+((cj4*x5240*x5243))+x5254+(((-1.0)*x5241*x5253))+(((-1.0)*cj4*x5236*x5244))+(((-1.0)*cj4*x5236*x5240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5257=((1.0)*sj1);
IkReal x5258=(sj4*sj5);
IkReal x5259=(cj4*r22);
IkReal x5260=(cj4*r12);
IkReal x5261=((1.0)*cj1);
IkReal x5262=(cj5*r21*sj4);
IkReal x5263=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r10*x5258*x5261))+(((-1.0)*x5257*x5259))+(((-1.0)*x5261*x5263))+(((-1.0)*x5257*x5262))+(((-1.0)*r20*x5257*x5258))+(((-1.0)*x5260*x5261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x5257*x5258))+((cj1*r20*x5258))+((cj1*x5262))+((cj1*x5259))+(((-1.0)*x5257*x5263))+(((-1.0)*x5257*x5260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5258*x5261))+(((-1.0)*x5257*x5259))+(((-1.0)*x5261*x5263))+(((-1.0)*x5257*x5262))+(((-1.0)*r20*x5257*x5258))+(((-1.0)*x5260*x5261))))+IKsqr(((((-1.0)*r10*x5257*x5258))+((cj1*r20*x5258))+((cj1*x5262))+((cj1*x5259))+(((-1.0)*x5257*x5263))+(((-1.0)*x5257*x5260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x5258*x5261))+(((-1.0)*x5257*x5259))+(((-1.0)*x5261*x5263))+(((-1.0)*x5257*x5262))+(((-1.0)*r20*x5257*x5258))+(((-1.0)*x5260*x5261))), ((((-1.0)*r10*x5257*x5258))+((cj1*r20*x5258))+((cj1*x5262))+((cj1*x5259))+(((-1.0)*x5257*x5263))+(((-1.0)*x5257*x5260))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5264=IKcos(j2);
IkReal x5265=IKsin(j2);
IkReal x5266=(r22*sj4);
IkReal x5267=(cj5*r10);
IkReal x5268=((0.99999999995)*cj3);
IkReal x5269=((9.9999999995e-6)*sj3);
IkReal x5270=((1.36279999993186e-7)*cj4);
IkReal x5271=(cj5*r11);
IkReal x5272=(cj5*r21);
IkReal x5273=(r10*sj5);
IkReal x5274=((1.0)*sj4);
IkReal x5275=((1.0)*sj1);
IkReal x5276=((9.9999999995e-6)*cj3);
IkReal x5277=(cj5*r20);
IkReal x5278=(r20*sj5);
IkReal x5279=((1.0)*cj4);
IkReal x5280=((0.99999999995)*sj3);
IkReal x5281=((0.391671)*sj1);
IkReal x5282=((0.121761000001269)*sj5);
IkReal x5283=(r11*sj5);
IkReal x5284=(r12*sj4);
IkReal x5285=(r21*sj5);
IkReal x5286=(cj1*x5264);
IkReal x5287=(cj1*x5265);
IkReal x5288=(cj4*x5278);
IkReal x5289=(x5265*x5275);
evalcond[0]=((((-1.0)*x5272*x5274))+(((-1.0)*x5274*x5278))+x5286+(((-1.0)*x5289))+(((-1.0)*r22*x5279)));
evalcond[1]=((((-1.0)*x5264*x5275))+(((-1.0)*x5271*x5274))+(((-1.0)*r12*x5279))+(((-1.0)*x5287))+(((-1.0)*x5273*x5274)));
evalcond[2]=((((-3.9e-7)*x5278))+(((-3.9e-7)*x5272))+((r21*x5282))+(((-1.0)*x5265*x5281))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-1.36279999993186e-7)*x5266))+(((0.52362)*cj1))+((x5270*x5278))+((x5270*x5272))+(((0.391671)*x5286))+(((-0.121761000001269)*x5277)));
evalcond[3]=((((1.92e-6)*cj1))+(((-0.121761000001269)*x5267))+(((-3.9e-7)*x5273))+(((-3.9e-7)*x5271))+(((-1.0)*x5264*x5281))+(((-1.0)*py))+(((-0.52362)*sj1))+((x5270*x5271))+((x5270*x5273))+(((-1.36279999993186e-7)*x5284))+(((-0.391671)*x5287))+((r11*x5282)));
evalcond[4]=((((-1.0)*cj4*x5268*x5272))+((cj4*x5269*x5272))+((sj1*x5264))+x5287+((x5266*x5268))+((x5276*x5285))+(((-1.0)*x5276*x5277))+((x5269*x5288))+((x5280*x5285))+(((-1.0)*x5277*x5280))+(((-1.0)*x5268*x5288))+(((-1.0)*x5266*x5269)));
evalcond[5]=((((-1.0)*cj4*x5268*x5271))+(((-1.0)*cj4*x5268*x5273))+((cj4*x5269*x5271))+((cj4*x5269*x5273))+x5286+(((-1.0)*x5289))+((x5268*x5284))+((x5276*x5283))+((x5280*x5283))+(((-1.0)*x5269*x5284))+(((-1.0)*x5267*x5276))+(((-1.0)*x5267*x5280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5290=((1.0)*sj1);
IkReal x5291=(sj4*sj5);
IkReal x5292=(cj4*r12);
IkReal x5293=(cj4*r22);
IkReal x5294=(cj5*sj4);
IkReal x5295=(cj1*x5294);
if( IKabs((((cj1*x5292))+(((-1.0)*r21*x5290*x5294))+((cj1*r10*x5291))+(((-1.0)*r20*x5290*x5291))+((r11*x5295))+(((-1.0)*x5290*x5293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x5293))+((sj1*x5292))+((cj1*r20*x5291))+((r21*x5295))+((r11*sj1*x5294))+((r10*sj1*x5291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x5292))+(((-1.0)*r21*x5290*x5294))+((cj1*r10*x5291))+(((-1.0)*r20*x5290*x5291))+((r11*x5295))+(((-1.0)*x5290*x5293))))+IKsqr((((cj1*x5293))+((sj1*x5292))+((cj1*r20*x5291))+((r21*x5295))+((r11*sj1*x5294))+((r10*sj1*x5291))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x5292))+(((-1.0)*r21*x5290*x5294))+((cj1*r10*x5291))+(((-1.0)*r20*x5290*x5291))+((r11*x5295))+(((-1.0)*x5290*x5293))), (((cj1*x5293))+((sj1*x5292))+((cj1*r20*x5291))+((r21*x5295))+((r11*sj1*x5294))+((r10*sj1*x5291))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5296=IKcos(j2);
IkReal x5297=IKsin(j2);
IkReal x5298=(r22*sj4);
IkReal x5299=(cj5*r10);
IkReal x5300=((0.99999999995)*cj3);
IkReal x5301=((9.9999999995e-6)*sj3);
IkReal x5302=((1.36279999993186e-7)*cj4);
IkReal x5303=(cj5*r11);
IkReal x5304=(cj5*r21);
IkReal x5305=(r10*sj5);
IkReal x5306=((1.0)*sj4);
IkReal x5307=(r12*sj4);
IkReal x5308=((9.9999999995e-6)*cj3);
IkReal x5309=(cj5*r20);
IkReal x5310=(r20*sj5);
IkReal x5311=((1.0)*cj4);
IkReal x5312=((0.99999999995)*sj3);
IkReal x5313=((0.121761000001269)*sj5);
IkReal x5314=(r11*sj5);
IkReal x5315=(r21*sj5);
IkReal x5316=(sj1*x5296);
IkReal x5317=(cj1*x5297);
IkReal x5318=(cj1*x5296);
IkReal x5319=(cj4*x5310);
IkReal x5320=(sj1*x5297);
IkReal x5321=(x5317+x5316);
evalcond[0]=((((-1.0)*x5303*x5306))+(((-1.0)*r12*x5311))+(((-1.0)*x5305*x5306))+x5321);
evalcond[1]=((((-1.0)*x5306*x5310))+(((-1.0)*x5320))+x5318+(((-1.0)*r22*x5311))+(((-1.0)*x5304*x5306)));
evalcond[2]=(((x5302*x5304))+((x5302*x5310))+((r21*x5313))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-3.9e-7)*x5310))+(((0.52362)*cj1))+(((-3.9e-7)*x5304))+(((0.391671)*x5318))+(((-0.391671)*x5320))+(((-1.36279999993186e-7)*x5298))+(((-0.121761000001269)*x5309)));
evalcond[3]=(((x5302*x5303))+((x5302*x5305))+(((0.52362)*sj1))+(((-1.0)*py))+((r11*x5313))+(((-1.92e-6)*cj1))+(((-3.9e-7)*x5303))+(((-3.9e-7)*x5305))+(((-1.36279999993186e-7)*x5307))+(((0.391671)*x5316))+(((0.391671)*x5317))+(((-0.121761000001269)*x5299)));
evalcond[4]=(x5321+(((-1.0)*cj4*x5300*x5304))+(((-1.0)*x5300*x5319))+(((-1.0)*x5308*x5309))+((x5308*x5315))+((cj4*x5301*x5304))+((x5312*x5315))+(((-1.0)*x5298*x5301))+((x5298*x5300))+(((-1.0)*x5309*x5312))+((x5301*x5319)));
evalcond[5]=(((x5300*x5307))+x5320+(((-1.0)*x5301*x5307))+(((-1.0)*cj4*x5300*x5303))+(((-1.0)*cj4*x5300*x5305))+((x5308*x5314))+((cj4*x5301*x5305))+((cj4*x5301*x5303))+(((-1.0)*x5318))+((x5312*x5314))+(((-1.0)*x5299*x5312))+(((-1.0)*x5299*x5308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5322=((1.0)*sj1);
IkReal x5323=(sj4*sj5);
IkReal x5324=(cj0*r20);
IkReal x5325=(cj4*r12);
IkReal x5326=(cj0*cj1);
IkReal x5327=(cj4*r22);
IkReal x5328=((1.0)*cj1);
IkReal x5329=(cj5*sj4);
CheckValue<IkReal> x5330=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x5330.valid){
continue;
}
CheckValue<IkReal> x5331 = IKatan2WithCheck(IkReal(((((-1.0)*x5325*x5328))+(((-1.0)*cj0*r21*x5322*x5329))+(((-1.0)*cj0*x5322*x5327))+(((-1.0)*x5322*x5323*x5324))+(((-1.0)*r10*x5323*x5328))+(((-1.0)*r11*x5328*x5329)))),IkReal((((r21*x5326*x5329))+((cj1*x5323*x5324))+((x5326*x5327))+(((-1.0)*x5322*x5325))+(((-1.0)*r10*x5322*x5323))+(((-1.0)*r11*x5322*x5329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5331.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5330.value)))+(x5331.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x5332=IKsin(j2);
IkReal x5333=IKcos(j2);
IkReal x5334=((9.9999999995e-6)*sj5);
IkReal x5335=(cj3*r01);
IkReal x5336=(cj4*r00);
IkReal x5337=((3.9e-7)*cj5);
IkReal x5338=((1.36279999993186e-7)*sj5);
IkReal x5339=(cj4*r10);
IkReal x5340=((9.9999999995e-6)*cj5);
IkReal x5341=(cj3*r20);
IkReal x5342=(cj0*sj1);
IkReal x5343=((0.121761000001269)*sj5);
IkReal x5344=(cj4*r01);
IkReal x5345=((1.36279999993186e-7)*cj5);
IkReal x5346=((0.99999999995)*cj3);
IkReal x5347=(r02*sj4);
IkReal x5348=(r11*sj3);
IkReal x5349=((0.99999999995)*sj5);
IkReal x5350=((3.9e-7)*sj5);
IkReal x5351=((0.121761000001269)*cj5);
IkReal x5352=((1.0)*sj4);
IkReal x5353=(r22*sj4);
IkReal x5354=((9.9999999995e-6)*sj3);
IkReal x5355=(r12*sj4);
IkReal x5356=((1.0)*cj4);
IkReal x5357=(cj5*r21);
IkReal x5358=(cj4*cj5);
IkReal x5359=(r21*sj3);
IkReal x5360=(cj4*r20);
IkReal x5361=((1.92e-6)*cj1);
IkReal x5362=(sj0*sj1);
IkReal x5363=(cj1*x5332);
IkReal x5364=((1.0)*x5333);
IkReal x5365=((0.391671)*x5333);
IkReal x5366=(sj1*x5332);
IkReal x5367=(cj1*x5333);
IkReal x5368=((0.99999999995)*cj5*sj3);
evalcond[0]=(x5367+(((-1.0)*x5352*x5357))+(((-1.0)*x5366))+(((-1.0)*r20*sj5*x5352))+(((-1.0)*r22*x5356)));
evalcond[1]=((((-1.0)*r00*sj5*x5352))+((x5333*x5362))+(((-1.0)*r02*x5356))+(((-1.0)*cj5*r01*x5352))+((sj0*x5363)));
evalcond[2]=((((-1.0)*cj0*x5363))+(((-1.0)*x5342*x5364))+(((-1.0)*cj5*r11*x5352))+(((-1.0)*r12*x5356))+(((-1.0)*r10*sj5*x5352)));
evalcond[3]=((((-1.0)*r20*x5350))+(((-1.0)*r20*x5351))+(((-1.0)*r21*x5337))+((x5338*x5360))+(((-0.391671)*x5366))+(((-1.36279999993186e-7)*x5353))+((cj1*x5365))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+((cj4*r21*x5345))+((r21*x5343)));
evalcond[4]=((((0.001538)*cj0))+((x5336*x5338))+(((-1.36279999993186e-7)*x5347))+((r01*x5343))+(((-1.0)*r00*x5351))+(((-1.0)*r00*x5350))+(((-1.0)*sj0*x5361))+((x5362*x5365))+(((-1.0)*px))+(((0.52362)*x5362))+((x5344*x5345))+(((0.391671)*sj0*x5363))+(((-1.0)*r01*x5337)));
evalcond[5]=((((0.001538)*sj0))+(((-0.52362)*x5342))+(((-1.0)*x5342*x5365))+(((-1.36279999993186e-7)*x5355))+(((-1.0)*r11*x5337))+(((-1.0)*py))+((r11*x5343))+(((-0.391671)*cj0*x5363))+(((-1.0)*r10*x5350))+(((-1.0)*r10*x5351))+((x5338*x5339))+((cj4*r11*x5345))+((cj0*x5361)));
evalcond[6]=((((-1.0)*cj4*x5341*x5349))+(((-1.0)*x5353*x5354))+x5363+((x5346*x5353))+((cj4*x5340*x5359))+((sj3*x5334*x5360))+(((-1.0)*r20*x5368))+((x5349*x5359))+((cj3*r21*x5334))+(((-1.0)*x5340*x5341))+(((-1.0)*cj4*x5346*x5357))+((sj1*x5333)));
evalcond[7]=((((-1.0)*sj5*x5336*x5346))+((x5332*x5362))+((x5334*x5335))+((sj3*x5334*x5336))+(((-1.0)*cj1*sj0*x5364))+(((-1.0)*cj3*r00*x5340))+((x5346*x5347))+(((-0.99999999995)*x5335*x5358))+(((-1.0)*r00*x5368))+((sj3*x5340*x5344))+((r01*sj3*x5349))+(((-1.0)*x5347*x5354)));
evalcond[8]=((((-1.0)*x5332*x5342))+(((-1.0)*sj5*x5339*x5346))+(((-1.0)*r10*x5368))+((sj3*x5334*x5339))+((x5346*x5355))+(((-1.0)*r11*x5346*x5358))+(((-1.0)*x5354*x5355))+((x5348*x5349))+((cj4*x5340*x5348))+(((-1.0)*cj3*r10*x5340))+((cj3*r11*x5334))+((cj0*x5367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5369=((1.0)*sj0);
IkReal x5370=(cj1*sj4);
IkReal x5371=(r20*sj5);
IkReal x5372=(cj4*sj1);
IkReal x5373=(r00*sj5);
IkReal x5374=(sj1*sj4);
IkReal x5375=(cj1*cj4);
IkReal x5376=(cj5*x5374);
CheckValue<IkReal> x5377=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x5377.valid){
continue;
}
CheckValue<IkReal> x5378 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5369*x5376))+((r02*x5375))+((cj5*r01*x5370))+((x5370*x5373))+(((-1.0)*r22*x5369*x5372))+(((-1.0)*x5369*x5371*x5374)))),IkReal((((r22*sj0*x5375))+((cj5*r21*sj0*x5370))+((r02*x5372))+((sj0*x5370*x5371))+((x5373*x5374))+((r01*x5376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5378.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5377.value)))+(x5378.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x5379=IKsin(j2);
IkReal x5380=IKcos(j2);
IkReal x5381=((9.9999999995e-6)*sj5);
IkReal x5382=(cj3*r01);
IkReal x5383=(cj4*r00);
IkReal x5384=((3.9e-7)*cj5);
IkReal x5385=((1.36279999993186e-7)*sj5);
IkReal x5386=(cj4*r10);
IkReal x5387=((9.9999999995e-6)*cj5);
IkReal x5388=(cj3*r20);
IkReal x5389=(cj0*sj1);
IkReal x5390=((0.121761000001269)*sj5);
IkReal x5391=(cj4*r01);
IkReal x5392=((1.36279999993186e-7)*cj5);
IkReal x5393=((0.99999999995)*cj3);
IkReal x5394=(r02*sj4);
IkReal x5395=(r11*sj3);
IkReal x5396=((0.99999999995)*sj5);
IkReal x5397=((3.9e-7)*sj5);
IkReal x5398=((0.121761000001269)*cj5);
IkReal x5399=((1.0)*sj4);
IkReal x5400=(r22*sj4);
IkReal x5401=((9.9999999995e-6)*sj3);
IkReal x5402=(r12*sj4);
IkReal x5403=((1.0)*cj4);
IkReal x5404=(cj5*r21);
IkReal x5405=(cj4*cj5);
IkReal x5406=(r21*sj3);
IkReal x5407=(cj4*r20);
IkReal x5408=((1.92e-6)*cj1);
IkReal x5409=(sj0*sj1);
IkReal x5410=(cj1*x5379);
IkReal x5411=((1.0)*x5380);
IkReal x5412=((0.391671)*x5380);
IkReal x5413=(sj1*x5379);
IkReal x5414=(cj1*x5380);
IkReal x5415=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*x5413))+x5414+(((-1.0)*x5399*x5404))+(((-1.0)*r22*x5403))+(((-1.0)*r20*sj5*x5399)));
evalcond[1]=(((sj0*x5410))+(((-1.0)*cj5*r01*x5399))+(((-1.0)*r02*x5403))+(((-1.0)*r00*sj5*x5399))+((x5380*x5409)));
evalcond[2]=((((-1.0)*cj5*r11*x5399))+(((-1.0)*r12*x5403))+(((-1.0)*x5389*x5411))+(((-1.0)*r10*sj5*x5399))+(((-1.0)*cj0*x5410)));
evalcond[3]=((((-1.36279999993186e-7)*x5400))+((cj1*x5412))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.0)*r21*x5384))+(((-1.0)*r20*x5398))+(((-1.0)*r20*x5397))+((x5385*x5407))+(((-0.391671)*x5413))+((r21*x5390))+((cj4*r21*x5392)));
evalcond[4]=((((0.001538)*cj0))+((x5383*x5385))+((x5391*x5392))+(((0.52362)*x5409))+(((-1.36279999993186e-7)*x5394))+(((-1.0)*px))+(((0.391671)*sj0*x5410))+((r01*x5390))+(((-1.0)*sj0*x5408))+(((-1.0)*r01*x5384))+(((-1.0)*r00*x5397))+(((-1.0)*r00*x5398))+((x5409*x5412)));
evalcond[5]=((((0.001538)*sj0))+(((-1.36279999993186e-7)*x5402))+(((-0.52362)*x5389))+(((-0.391671)*cj0*x5410))+(((-1.0)*py))+(((-1.0)*x5389*x5412))+((x5385*x5386))+((r11*x5390))+(((-1.0)*r10*x5397))+(((-1.0)*r10*x5398))+(((-1.0)*r11*x5384))+((cj4*r11*x5392))+((cj0*x5408)));
evalcond[6]=(((sj1*x5380))+(((-1.0)*x5400*x5401))+((sj3*x5381*x5407))+x5410+((cj4*x5387*x5406))+((cj3*r21*x5381))+(((-1.0)*r20*x5415))+((x5393*x5400))+(((-1.0)*cj4*x5388*x5396))+(((-1.0)*cj4*x5393*x5404))+(((-1.0)*x5387*x5388))+((x5396*x5406)));
evalcond[7]=((((-1.0)*r00*x5415))+((x5381*x5382))+((x5379*x5409))+((x5393*x5394))+((sj3*x5381*x5383))+(((-1.0)*sj5*x5383*x5393))+((sj3*x5387*x5391))+(((-1.0)*cj1*sj0*x5411))+(((-1.0)*cj3*r00*x5387))+((r01*sj3*x5396))+(((-0.99999999995)*x5382*x5405))+(((-1.0)*x5394*x5401)));
evalcond[8]=((((-1.0)*cj3*r10*x5387))+(((-1.0)*r11*x5393*x5405))+((x5393*x5402))+(((-1.0)*r10*x5415))+((sj3*x5381*x5386))+((cj0*x5414))+(((-1.0)*x5379*x5389))+((cj3*r11*x5381))+((cj4*x5387*x5395))+(((-1.0)*sj5*x5386*x5393))+((x5395*x5396))+(((-1.0)*x5401*x5402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5416=cj0*cj0;
IkReal x5417=(cj0*py);
IkReal x5418=(cj0*sj0);
IkReal x5419=(cj0*r11);
IkReal x5420=(r20*sj5);
IkReal x5421=((0.391671)*sj4);
IkReal x5422=((1.36279999993186e-7)*cj4);
IkReal x5423=(cj0*cj4);
IkReal x5424=(r10*sj5);
IkReal x5425=(cj5*r21);
IkReal x5426=(cj5*sj4);
IkReal x5427=(cj4*cj5);
IkReal x5428=(cj0*sj4);
IkReal x5429=(cj0*cj5*r10);
IkReal x5430=((((-3.9e-7)*x5420))+(((-3.9e-7)*x5425))+(((0.121761000001269)*r21*sj5))+((x5422*x5425))+((x5421*x5425))+(((-1.0)*pz))+((x5420*x5422))+((x5420*x5421))+(((0.391671)*cj4*r22))+(((-1.36279999993186e-7)*r22*sj4))+(((-0.121761000001269)*cj5*r20)));
IkReal x5431=(x5416*x5430);
CheckValue<IkReal> x5432=IKPowWithIntegerCheck(IKsign(x5416),-1);
if(!x5432.valid){
continue;
}
CheckValue<IkReal> x5433 = IKatan2WithCheck(IkReal(((((-398478.092629152)*x5429))+(((-3272625.0)*x5417))+(((-1.27632375)*cj5*x5419))+(((-12.0)*x5431))+(((0.4459933349777)*x5423*x5424))+(((1281792.306375)*r12*x5423))+(((5033.29725)*x5418))+(((0.4459933349777)*x5419*x5427))+(((1281792.306375)*x5424*x5428))+(((-0.4459933349777)*r12*x5428))+(((-1.27632375)*cj0*x5424))+(((398478.092629152)*sj5*x5419))+(((1281792.306375)*x5419*x5426)))),IkReal(((((-4.700052)*x5419*x5426))+(((-3272625.0)*x5431))+(((-0.018456)*x5418))+(((1.63535999991823e-6)*r12*x5428))+(((4.68e-6)*cj5*x5419))+(((-1.46113200001522)*sj5*x5419))+(((4.68e-6)*cj0*x5424))+(((-1.63535999991823e-6)*x5419*x5427))+(((-1.63535999991823e-6)*x5423*x5424))+(((-4.700052)*r12*x5423))+(((-4.700052)*x5424*x5428))+(((1.46113200001522)*x5429))+(((12.0)*x5417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5433.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5432.value)))+(x5433.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x5434=IKcos(j1);
IkReal x5435=cj0*cj0;
IkReal x5436=IKsin(j1);
IkReal x5437=sj0*sj0;
IkReal x5438=((1.36279999993186e-7)*cj0);
IkReal x5439=(r12*sj4);
IkReal x5440=(r21*sj5);
IkReal x5441=((0.391670999980416)*sj3);
IkReal x5442=(r20*sj5);
IkReal x5443=((0.391671)*sj4);
IkReal x5444=((3.9e-7)*cj5);
IkReal x5445=((1.0)*pz);
IkReal x5446=((3.91670999980416e-6)*cj3);
IkReal x5447=(r00*sj5);
IkReal x5448=(r11*sj5);
IkReal x5449=(cj0*sj0);
IkReal x5450=(cj5*r11);
IkReal x5451=(r02*sj4);
IkReal x5452=(cj0*r21);
IkReal x5453=((3.9e-7)*sj0);
IkReal x5454=((1.36279999993186e-7)*sj0);
IkReal x5455=(r01*sj0);
IkReal x5456=((0.121761000001269)*sj5);
IkReal x5457=(cj5*r10);
IkReal x5458=((3.91670999980416e-6)*sj3);
IkReal x5459=(cj5*r00);
IkReal x5460=(cj0*r01);
IkReal x5461=((1.36279999993186e-7)*cj4);
IkReal x5462=(r22*sj4);
IkReal x5463=((3.9e-7)*cj0);
IkReal x5464=(cj4*sj0);
IkReal x5465=((0.391671)*r12);
IkReal x5466=(cj5*r21);
IkReal x5467=((1.0)*px);
IkReal x5468=((0.391670999980416)*cj3);
IkReal x5469=(cj0*cj4);
IkReal x5470=((0.121761000001269)*cj0);
IkReal x5471=(r01*sj5);
IkReal x5472=(r10*sj5);
IkReal x5473=((0.391671)*r02);
IkReal x5474=(cj5*r20);
IkReal x5475=((1.0)*py);
IkReal x5476=((0.001538)*x5449);
IkReal x5477=((1.92e-6)*x5436);
IkReal x5478=((0.52362)*x5434);
IkReal x5479=((0.52362)*x5436);
IkReal x5480=(sj5*x5461);
IkReal x5481=((0.121761000001269)*x5448);
IkReal x5482=(cj4*x5458);
IkReal x5483=((0.121761000001269)*cj5*sj0);
IkReal x5484=(cj4*cj5*r01);
IkReal x5485=((3.9e-7)*x5472);
IkReal x5486=((1.92e-6)*x5434);
IkReal x5487=(sj0*x5474);
IkReal x5488=(x5449*x5479);
IkReal x5489=(x5449*x5486);
evalcond[0]=((((0.121761000001269)*x5440))+(((-3.9e-7)*x5442))+x5477+x5478+(((-0.121761000001269)*x5474))+((x5461*x5466))+(((-1.0)*x5445))+(((0.391671)*cj4*r22))+(((-1.36279999993186e-7)*x5462))+((x5443*x5466))+((x5442*x5461))+(((-1.0)*r21*x5444))+((x5442*x5443)));
evalcond[1]=(((cj0*x5443*x5450))+(((-1.0)*cj0*r11*x5444))+x5476+(((-1.0)*x5463*x5472))+((cj0*x5443*x5472))+(((-1.0)*x5438*x5439))+((cj4*x5438*x5472))+((x5448*x5470))+((x5435*x5486))+((x5465*x5469))+(((-1.0)*cj0*x5475))+((cj4*x5438*x5450))+(((-1.0)*x5435*x5479))+(((-1.0)*x5457*x5470)));
evalcond[2]=((((-1.0)*x5455*x5456))+(((-1.0)*x5437*x5479))+(((-1.0)*x5476))+(((-1.0)*sj0*x5443*x5447))+((x5444*x5455))+((x5437*x5486))+(((0.121761000001269)*sj0*x5459))+((x5447*x5453))+(((-1.0)*x5464*x5473))+((px*sj0))+(((-1.0)*x5454*x5484))+(((-1.0)*cj5*x5443*x5455))+(((-1.0)*cj4*x5447*x5454))+((x5451*x5454)));
evalcond[3]=((((-1.0)*x5439*x5458))+((x5472*x5482))+(((-1.0)*cj4*x5450*x5468))+((x5441*x5448))+(((-1.0)*cj4*x5438*x5466))+(((-1.0)*x5441*x5457))+((x5444*x5452))+((x5470*x5474))+((x5450*x5482))+(((-1.0)*cj4*x5468*x5472))+((x5446*x5448))+((x5442*x5463))+(((-1.0)*cj4*x5438*x5442))+(((-1.0)*x5440*x5470))+((cj0*pz))+((x5438*x5462))+((x5439*x5468))+(((-1.0)*cj0*x5477))+(((-1.0)*cj0*x5478))+(((-1.0)*x5446*x5457)));
evalcond[4]=((((-1.0)*cj4*x5447*x5468))+((x5441*x5471))+((cj4*x5442*x5454))+(((-1.0)*sj0*x5445))+(((-1.0)*x5451*x5458))+((cj4*x5454*x5466))+(((-1.0)*x5441*x5459))+((cj5*r01*x5482))+((sj0*x5477))+((sj0*x5478))+(((-1.0)*x5442*x5453))+(((-1.0)*r21*sj0*x5444))+((x5446*x5471))+(((-1.0)*x5454*x5462))+((x5447*x5482))+(((-1.0)*x5468*x5484))+((x5451*x5468))+(((-0.121761000001269)*x5487))+(((0.121761000001269)*sj0*x5440))+(((-1.0)*x5446*x5459)));
evalcond[5]=((((0.001538)*sj0))+(((-1.0)*cj0*x5458*x5462))+(((-1.36279999993186e-7)*x5439))+(((-1.0)*x5485))+x5481+((cj0*x5486))+((cj5*x5452*x5482))+(((-1.0)*x5475))+(((-1.0)*cj0*x5446*x5474))+(((-1.0)*r11*x5444))+(((-0.121761000001269)*x5457))+((cj0*x5440*x5446))+((cj0*x5440*x5441))+(((-1.0)*cj4*cj5*x5452*x5468))+((x5442*x5458*x5469))+((x5450*x5461))+(((-1.0)*cj0*x5479))+(((-1.0)*x5442*x5468*x5469))+((x5461*x5472))+(((-1.0)*cj0*x5441*x5474))+((cj0*x5462*x5468)));
evalcond[6]=((((0.001538)*cj0))+((x5446*x5487))+(((-3.9e-7)*x5447))+((r01*x5456))+((x5442*x5464*x5468))+(((-1.0)*x5458*x5464*x5466))+(((-1.0)*sj0*x5486))+((sj0*x5479))+(((-1.0)*sj0*x5440*x5441))+(((-1.0)*sj0*x5440*x5446))+((x5447*x5461))+(((-1.0)*r01*x5444))+(((-1.0)*x5442*x5458*x5464))+((x5441*x5487))+(((-1.0)*sj0*x5462*x5468))+(((-0.121761000001269)*x5459))+((x5464*x5466*x5468))+((sj0*x5458*x5462))+(((-1.36279999993186e-7)*x5451))+((cj5*r01*x5461))+(((-1.0)*x5467)));
evalcond[7]=(((x5439*x5454))+(((-1.0)*x5489))+x5488+((cj0*x5443*x5447))+((x5453*x5472))+(((-1.0)*sj0*x5481))+((cj5*x5443*x5460))+(((-0.001538)*x5437))+((r11*sj0*x5444))+(((0.121761000001269)*sj0*x5457))+(((-1.0)*cj4*x5454*x5472))+((x5469*x5473))+((py*sj0))+(((-1.0)*cj4*x5450*x5454)));
evalcond[8]=((((-1.0)*x5464*x5465))+(((-1.0)*x5438*x5451))+(((-1.0)*x5489))+x5488+(((-1.0)*x5447*x5463))+(((-1.0)*sj0*x5443*x5450))+((x5438*x5484))+(((0.001538)*x5435))+((cj4*x5438*x5447))+(((-1.0)*sj0*x5443*x5472))+((x5456*x5460))+(((-1.0)*x5444*x5460))+(((-1.0)*cj0*x5467))+(((-1.0)*x5459*x5470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5490=(sj1*sj4);
IkReal x5491=(cj5*r01);
IkReal x5492=(r20*sj5);
IkReal x5493=(cj4*sj1);
IkReal x5494=(r00*sj5);
IkReal x5495=(cj1*sj4);
IkReal x5496=(cj5*r21);
IkReal x5497=(cj1*cj4);
if( IKabs((((x5494*x5495))+((x5491*x5495))+(((-1.0)*r22*x5493))+((r02*x5497))+(((-1.0)*x5490*x5492))+(((-1.0)*x5490*x5496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5495*x5496))+((x5492*x5495))+((x5490*x5491))+((x5490*x5494))+((r22*x5497))+((r02*x5493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5494*x5495))+((x5491*x5495))+(((-1.0)*r22*x5493))+((r02*x5497))+(((-1.0)*x5490*x5492))+(((-1.0)*x5490*x5496))))+IKsqr((((x5495*x5496))+((x5492*x5495))+((x5490*x5491))+((x5490*x5494))+((r22*x5497))+((r02*x5493))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5494*x5495))+((x5491*x5495))+(((-1.0)*r22*x5493))+((r02*x5497))+(((-1.0)*x5490*x5492))+(((-1.0)*x5490*x5496))), (((x5495*x5496))+((x5492*x5495))+((x5490*x5491))+((x5490*x5494))+((r22*x5497))+((r02*x5493))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5498=IKcos(j2);
IkReal x5499=IKsin(j2);
IkReal x5500=(r22*sj4);
IkReal x5501=((0.99999999995)*cj3);
IkReal x5502=(r01*sj5);
IkReal x5503=((9.9999999995e-6)*cj3);
IkReal x5504=((1.36279999993186e-7)*cj4);
IkReal x5505=(cj5*r01);
IkReal x5506=(r20*sj5);
IkReal x5507=((9.9999999995e-6)*sj3);
IkReal x5508=((0.99999999995)*sj3);
IkReal x5509=(r00*sj5);
IkReal x5510=(cj5*r21);
IkReal x5511=(r02*sj4);
IkReal x5512=((1.0)*sj4);
IkReal x5513=(cj5*r20);
IkReal x5514=((1.0)*cj4);
IkReal x5515=(r21*sj5);
IkReal x5516=(cj5*r00);
IkReal x5517=(sj1*x5498);
IkReal x5518=(cj1*x5499);
IkReal x5519=(cj1*x5498);
IkReal x5520=(sj1*x5499);
IkReal x5521=(x5518+x5517);
evalcond[0]=(x5521+(((-1.0)*r02*x5514))+(((-1.0)*x5505*x5512))+(((-1.0)*x5509*x5512)));
evalcond[1]=((((-1.0)*x5510*x5512))+(((-1.0)*r22*x5514))+x5519+(((-1.0)*x5506*x5512))+(((-1.0)*x5520)));
evalcond[2]=((((-3.9e-7)*x5506))+(((-3.9e-7)*x5510))+(((0.391671)*x5519))+(((-0.391671)*x5520))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((-0.121761000001269)*x5513))+(((0.52362)*cj1))+(((-1.36279999993186e-7)*x5500))+((x5504*x5506))+((x5504*x5510))+(((0.121761000001269)*x5515)));
evalcond[3]=((((-3.9e-7)*x5505))+(((-3.9e-7)*x5509))+(((0.391671)*x5518))+(((0.391671)*x5517))+(((0.52362)*sj1))+(((-1.0)*px))+(((-0.121761000001269)*x5516))+(((-1.92e-6)*cj1))+(((-1.36279999993186e-7)*x5511))+((x5504*x5505))+((x5504*x5509))+(((0.121761000001269)*x5502)));
evalcond[4]=(x5521+(((-1.0)*x5503*x5513))+(((-1.0)*x5500*x5507))+((x5508*x5515))+((cj4*x5506*x5507))+((x5500*x5501))+((cj4*x5507*x5510))+((x5503*x5515))+(((-1.0)*x5508*x5513))+(((-1.0)*cj4*x5501*x5510))+(((-1.0)*cj4*x5501*x5506)));
evalcond[5]=(x5520+(((-1.0)*x5503*x5516))+(((-1.0)*x5507*x5511))+((cj4*x5505*x5507))+((x5502*x5508))+((x5502*x5503))+((cj4*x5507*x5509))+(((-1.0)*x5519))+((x5501*x5511))+(((-1.0)*x5508*x5516))+(((-1.0)*cj4*x5501*x5505))+(((-1.0)*cj4*x5501*x5509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5522=((1.0)*sj1);
IkReal x5523=(sj4*sj5);
IkReal x5524=(cj4*r22);
IkReal x5525=(cj5*sj4);
IkReal x5526=(cj4*r02);
IkReal x5527=((1.0)*cj1);
if( IKabs(((((-1.0)*r01*x5525*x5527))+(((-1.0)*x5526*x5527))+(((-1.0)*r00*x5523*x5527))+(((-1.0)*x5522*x5524))+(((-1.0)*r21*x5522*x5525))+(((-1.0)*r20*x5522*x5523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x5525))+((cj1*x5524))+(((-1.0)*r00*x5522*x5523))+(((-1.0)*r01*x5522*x5525))+(((-1.0)*x5522*x5526))+((cj1*r20*x5523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x5525*x5527))+(((-1.0)*x5526*x5527))+(((-1.0)*r00*x5523*x5527))+(((-1.0)*x5522*x5524))+(((-1.0)*r21*x5522*x5525))+(((-1.0)*r20*x5522*x5523))))+IKsqr((((cj1*r21*x5525))+((cj1*x5524))+(((-1.0)*r00*x5522*x5523))+(((-1.0)*r01*x5522*x5525))+(((-1.0)*x5522*x5526))+((cj1*r20*x5523))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x5525*x5527))+(((-1.0)*x5526*x5527))+(((-1.0)*r00*x5523*x5527))+(((-1.0)*x5522*x5524))+(((-1.0)*r21*x5522*x5525))+(((-1.0)*r20*x5522*x5523))), (((cj1*r21*x5525))+((cj1*x5524))+(((-1.0)*r00*x5522*x5523))+(((-1.0)*r01*x5522*x5525))+(((-1.0)*x5522*x5526))+((cj1*r20*x5523))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5528=IKcos(j2);
IkReal x5529=IKsin(j2);
IkReal x5530=(r22*sj4);
IkReal x5531=((0.99999999995)*cj3);
IkReal x5532=(r01*sj5);
IkReal x5533=((9.9999999995e-6)*cj3);
IkReal x5534=((1.36279999993186e-7)*cj4);
IkReal x5535=(cj5*r01);
IkReal x5536=((0.99999999995)*sj3);
IkReal x5537=(r20*sj5);
IkReal x5538=((9.9999999995e-6)*sj3);
IkReal x5539=(r00*sj5);
IkReal x5540=(cj5*r21);
IkReal x5541=(r02*sj4);
IkReal x5542=((1.0)*sj1);
IkReal x5543=(cj5*r20);
IkReal x5544=((1.0)*sj4);
IkReal x5545=((1.0)*cj4);
IkReal x5546=((0.391671)*sj1);
IkReal x5547=(r21*sj5);
IkReal x5548=(cj5*r00);
IkReal x5549=(cj1*x5528);
IkReal x5550=(cj1*x5529);
IkReal x5551=(x5529*x5542);
evalcond[0]=(x5549+(((-1.0)*x5537*x5544))+(((-1.0)*x5540*x5544))+(((-1.0)*x5551))+(((-1.0)*r22*x5545)));
evalcond[1]=((((-1.0)*x5550))+(((-1.0)*x5539*x5544))+(((-1.0)*r02*x5545))+(((-1.0)*x5535*x5544))+(((-1.0)*x5528*x5542)));
evalcond[2]=((((-1.0)*x5529*x5546))+(((-0.121761000001269)*x5543))+((x5534*x5537))+(((-3.9e-7)*x5537))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((0.121761000001269)*x5547))+(((-3.9e-7)*x5540))+(((-1.36279999993186e-7)*x5530))+(((0.391671)*x5549))+((x5534*x5540)));
evalcond[3]=((((-0.391671)*x5550))+(((-1.36279999993186e-7)*x5541))+(((1.92e-6)*cj1))+(((0.121761000001269)*x5532))+(((-0.121761000001269)*x5548))+((x5534*x5539))+((x5534*x5535))+(((-3.9e-7)*x5539))+(((-3.9e-7)*x5535))+(((-1.0)*px))+(((-0.52362)*sj1))+(((-1.0)*x5528*x5546)));
evalcond[4]=((((-1.0)*cj4*x5531*x5540))+x5550+((x5530*x5531))+(((-1.0)*cj4*x5531*x5537))+(((-1.0)*x5533*x5543))+(((-1.0)*x5530*x5538))+((x5533*x5547))+((cj4*x5537*x5538))+((x5536*x5547))+(((-1.0)*x5536*x5543))+((sj1*x5528))+((cj4*x5538*x5540)));
evalcond[5]=((((-1.0)*x5538*x5541))+((cj4*x5538*x5539))+x5549+(((-1.0)*cj4*x5531*x5535))+(((-1.0)*cj4*x5531*x5539))+(((-1.0)*x5533*x5548))+((cj4*x5535*x5538))+(((-1.0)*x5536*x5548))+(((-1.0)*x5551))+((x5532*x5533))+((x5532*x5536))+((x5531*x5541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5552=((1.0)*sj1);
IkReal x5553=(sj4*sj5);
IkReal x5554=(cj4*r22);
IkReal x5555=(cj4*r12);
IkReal x5556=((1.0)*cj1);
IkReal x5557=(cj5*r21*sj4);
IkReal x5558=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x5555*x5556))+(((-1.0)*r10*x5553*x5556))+(((-1.0)*x5552*x5557))+(((-1.0)*x5552*x5554))+(((-1.0)*r20*x5552*x5553))+(((-1.0)*x5556*x5558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x5553))+(((-1.0)*x5552*x5555))+(((-1.0)*x5552*x5558))+(((-1.0)*r10*x5552*x5553))+((cj1*x5557))+((cj1*x5554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5555*x5556))+(((-1.0)*r10*x5553*x5556))+(((-1.0)*x5552*x5557))+(((-1.0)*x5552*x5554))+(((-1.0)*r20*x5552*x5553))+(((-1.0)*x5556*x5558))))+IKsqr((((cj1*r20*x5553))+(((-1.0)*x5552*x5555))+(((-1.0)*x5552*x5558))+(((-1.0)*r10*x5552*x5553))+((cj1*x5557))+((cj1*x5554))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5555*x5556))+(((-1.0)*r10*x5553*x5556))+(((-1.0)*x5552*x5557))+(((-1.0)*x5552*x5554))+(((-1.0)*r20*x5552*x5553))+(((-1.0)*x5556*x5558))), (((cj1*r20*x5553))+(((-1.0)*x5552*x5555))+(((-1.0)*x5552*x5558))+(((-1.0)*r10*x5552*x5553))+((cj1*x5557))+((cj1*x5554))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5559=IKcos(j2);
IkReal x5560=IKsin(j2);
IkReal x5561=(r22*sj4);
IkReal x5562=(cj5*r10);
IkReal x5563=((0.99999999995)*cj3);
IkReal x5564=((9.9999999995e-6)*sj3);
IkReal x5565=((1.36279999993186e-7)*cj4);
IkReal x5566=(cj5*r11);
IkReal x5567=(cj5*r21);
IkReal x5568=(r10*sj5);
IkReal x5569=((1.0)*sj4);
IkReal x5570=((1.0)*sj1);
IkReal x5571=((9.9999999995e-6)*cj3);
IkReal x5572=(cj5*r20);
IkReal x5573=(r20*sj5);
IkReal x5574=((1.0)*cj4);
IkReal x5575=((0.99999999995)*sj3);
IkReal x5576=((0.391671)*sj1);
IkReal x5577=((0.121761000001269)*sj5);
IkReal x5578=(r11*sj5);
IkReal x5579=(r12*sj4);
IkReal x5580=(r21*sj5);
IkReal x5581=(cj1*x5559);
IkReal x5582=(cj1*x5560);
IkReal x5583=(cj4*x5573);
IkReal x5584=(x5560*x5570);
evalcond[0]=(x5581+(((-1.0)*x5569*x5573))+(((-1.0)*x5584))+(((-1.0)*x5567*x5569))+(((-1.0)*r22*x5574)));
evalcond[1]=((((-1.0)*x5582))+(((-1.0)*r12*x5574))+(((-1.0)*x5568*x5569))+(((-1.0)*x5559*x5570))+(((-1.0)*x5566*x5569)));
evalcond[2]=(((x5565*x5573))+((x5565*x5567))+((r21*x5577))+(((1.92e-6)*sj1))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-1.0)*x5560*x5576))+(((-0.121761000001269)*x5572))+(((0.391671)*x5581))+(((-3.9e-7)*x5567))+(((-3.9e-7)*x5573))+(((-1.36279999993186e-7)*x5561)));
evalcond[3]=((((1.92e-6)*cj1))+((x5565*x5568))+((x5565*x5566))+((r11*x5577))+(((-1.0)*py))+(((-0.121761000001269)*x5562))+(((-0.52362)*sj1))+(((-1.0)*x5559*x5576))+(((-3.9e-7)*x5566))+(((-3.9e-7)*x5568))+(((-1.36279999993186e-7)*x5579))+(((-0.391671)*x5582)));
evalcond[4]=(x5582+((x5571*x5580))+((x5561*x5563))+((x5575*x5580))+((cj4*x5564*x5567))+((sj1*x5559))+(((-1.0)*x5571*x5572))+(((-1.0)*x5572*x5575))+((x5564*x5583))+(((-1.0)*cj4*x5563*x5567))+(((-1.0)*x5561*x5564))+(((-1.0)*x5563*x5583)));
evalcond[5]=((((-1.0)*x5564*x5579))+x5581+((cj4*x5564*x5566))+((cj4*x5564*x5568))+((x5575*x5578))+((x5563*x5579))+(((-1.0)*x5562*x5571))+(((-1.0)*x5562*x5575))+(((-1.0)*x5584))+(((-1.0)*cj4*x5563*x5568))+(((-1.0)*cj4*x5563*x5566))+((x5571*x5578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5585=((1.0)*sj1);
IkReal x5586=(sj4*sj5);
IkReal x5587=(cj4*r12);
IkReal x5588=(cj4*r22);
IkReal x5589=(cj5*sj4);
IkReal x5590=(cj1*x5589);
if( IKabs(((((-1.0)*r20*x5585*x5586))+((cj1*r10*x5586))+((r11*x5590))+(((-1.0)*x5585*x5588))+(((-1.0)*r21*x5585*x5589))+((cj1*x5587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x5590))+((r10*sj1*x5586))+((sj1*x5587))+((cj1*r20*x5586))+((r11*sj1*x5589))+((cj1*x5588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x5585*x5586))+((cj1*r10*x5586))+((r11*x5590))+(((-1.0)*x5585*x5588))+(((-1.0)*r21*x5585*x5589))+((cj1*x5587))))+IKsqr((((r21*x5590))+((r10*sj1*x5586))+((sj1*x5587))+((cj1*r20*x5586))+((r11*sj1*x5589))+((cj1*x5588))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x5585*x5586))+((cj1*r10*x5586))+((r11*x5590))+(((-1.0)*x5585*x5588))+(((-1.0)*r21*x5585*x5589))+((cj1*x5587))), (((r21*x5590))+((r10*sj1*x5586))+((sj1*x5587))+((cj1*r20*x5586))+((r11*sj1*x5589))+((cj1*x5588))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5591=IKcos(j2);
IkReal x5592=IKsin(j2);
IkReal x5593=(r22*sj4);
IkReal x5594=(cj5*r10);
IkReal x5595=((0.99999999995)*cj3);
IkReal x5596=((9.9999999995e-6)*sj3);
IkReal x5597=((1.36279999993186e-7)*cj4);
IkReal x5598=(cj5*r11);
IkReal x5599=(cj5*r21);
IkReal x5600=(r10*sj5);
IkReal x5601=((1.0)*sj4);
IkReal x5602=(r12*sj4);
IkReal x5603=((9.9999999995e-6)*cj3);
IkReal x5604=(cj5*r20);
IkReal x5605=(r20*sj5);
IkReal x5606=((1.0)*cj4);
IkReal x5607=((0.99999999995)*sj3);
IkReal x5608=((0.121761000001269)*sj5);
IkReal x5609=(r11*sj5);
IkReal x5610=(r21*sj5);
IkReal x5611=(sj1*x5591);
IkReal x5612=(cj1*x5592);
IkReal x5613=(cj1*x5591);
IkReal x5614=(cj4*x5605);
IkReal x5615=(sj1*x5592);
IkReal x5616=(x5612+x5611);
evalcond[0]=(x5616+(((-1.0)*r12*x5606))+(((-1.0)*x5598*x5601))+(((-1.0)*x5600*x5601)));
evalcond[1]=((((-1.0)*x5615))+x5613+(((-1.0)*r22*x5606))+(((-1.0)*x5599*x5601))+(((-1.0)*x5601*x5605)));
evalcond[2]=((((-0.391671)*x5615))+(((-3.9e-7)*x5605))+(((-1.36279999993186e-7)*x5593))+(((1.92e-6)*sj1))+(((0.391671)*x5613))+((r21*x5608))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-3.9e-7)*x5599))+(((-0.121761000001269)*x5604))+((x5597*x5605))+((x5597*x5599)));
evalcond[3]=((((-3.9e-7)*x5600))+(((0.52362)*sj1))+(((-1.36279999993186e-7)*x5602))+(((0.391671)*x5612))+(((0.391671)*x5611))+(((-1.0)*py))+(((-0.121761000001269)*x5594))+(((-1.92e-6)*cj1))+((r11*x5608))+(((-3.9e-7)*x5598))+((x5597*x5600))+((x5597*x5598)));
evalcond[4]=((((-1.0)*x5595*x5614))+x5616+(((-1.0)*cj4*x5595*x5599))+((x5596*x5614))+((x5603*x5610))+((x5607*x5610))+((x5593*x5595))+(((-1.0)*x5593*x5596))+(((-1.0)*x5603*x5604))+((cj4*x5596*x5599))+(((-1.0)*x5604*x5607)));
evalcond[5]=((((-1.0)*x5613))+x5615+(((-1.0)*cj4*x5595*x5598))+(((-1.0)*cj4*x5595*x5600))+((x5607*x5609))+((x5603*x5609))+(((-1.0)*x5596*x5602))+((cj4*x5596*x5600))+((cj4*x5596*x5598))+((x5595*x5602))+(((-1.0)*x5594*x5607))+(((-1.0)*x5594*x5603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5617=((1.0)*sj1);
IkReal x5618=(sj4*sj5);
IkReal x5619=(cj0*r20);
IkReal x5620=(cj4*r12);
IkReal x5621=(cj0*cj1);
IkReal x5622=(cj4*r22);
IkReal x5623=((1.0)*cj1);
IkReal x5624=(cj5*sj4);
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5618*x5623))+(((-1.0)*cj0*x5617*x5622))+(((-1.0)*cj0*r21*x5617*x5624))+(((-1.0)*r11*x5623*x5624))+(((-1.0)*x5620*x5623))+(((-1.0)*x5617*x5618*x5619)))),IkReal(((((-1.0)*r11*x5617*x5624))+((x5621*x5622))+((r21*x5621*x5624))+(((-1.0)*x5617*x5620))+(((-1.0)*r10*x5617*x5618))+((cj1*x5618*x5619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
CheckValue<IkReal> x5626=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x5626.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5625.value)+(((1.5707963267949)*(x5626.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x5627=IKsin(j2);
IkReal x5628=IKcos(j2);
IkReal x5629=((9.9999999995e-6)*sj5);
IkReal x5630=(cj3*r01);
IkReal x5631=(cj4*r00);
IkReal x5632=((3.9e-7)*cj5);
IkReal x5633=((1.36279999993186e-7)*sj5);
IkReal x5634=(cj4*r10);
IkReal x5635=((9.9999999995e-6)*cj5);
IkReal x5636=(cj3*r20);
IkReal x5637=(cj0*sj1);
IkReal x5638=((0.121761000001269)*sj5);
IkReal x5639=(cj4*r01);
IkReal x5640=((1.36279999993186e-7)*cj5);
IkReal x5641=((0.99999999995)*cj3);
IkReal x5642=(r02*sj4);
IkReal x5643=(r11*sj3);
IkReal x5644=((0.99999999995)*sj5);
IkReal x5645=((3.9e-7)*sj5);
IkReal x5646=((0.121761000001269)*cj5);
IkReal x5647=((1.0)*sj4);
IkReal x5648=(r22*sj4);
IkReal x5649=((9.9999999995e-6)*sj3);
IkReal x5650=(r12*sj4);
IkReal x5651=((1.0)*cj4);
IkReal x5652=(cj5*r21);
IkReal x5653=(cj4*cj5);
IkReal x5654=(r21*sj3);
IkReal x5655=(cj4*r20);
IkReal x5656=((1.92e-6)*cj1);
IkReal x5657=(sj0*sj1);
IkReal x5658=(cj1*x5627);
IkReal x5659=((1.0)*x5628);
IkReal x5660=((0.391671)*x5628);
IkReal x5661=(sj1*x5627);
IkReal x5662=(cj1*x5628);
IkReal x5663=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*r20*sj5*x5647))+x5662+(((-1.0)*r22*x5651))+(((-1.0)*x5647*x5652))+(((-1.0)*x5661)));
evalcond[1]=((((-1.0)*cj5*r01*x5647))+(((-1.0)*r00*sj5*x5647))+((sj0*x5658))+(((-1.0)*r02*x5651))+((x5628*x5657)));
evalcond[2]=((((-1.0)*r12*x5651))+(((-1.0)*cj0*x5658))+(((-1.0)*r10*sj5*x5647))+(((-1.0)*cj5*r11*x5647))+(((-1.0)*x5637*x5659)));
evalcond[3]=((((-1.0)*r20*x5646))+(((-1.0)*r20*x5645))+(((-1.36279999993186e-7)*x5648))+((cj1*x5660))+(((-1.0)*r21*x5632))+(((1.92e-6)*sj1))+((x5633*x5655))+(((-1.0)*pz))+(((0.52362)*cj1))+(((-0.391671)*x5661))+((cj4*r21*x5640))+((r21*x5638)));
evalcond[4]=((((0.001538)*cj0))+((r01*x5638))+(((0.391671)*sj0*x5658))+(((0.52362)*x5657))+((x5639*x5640))+(((-1.0)*sj0*x5656))+(((-1.36279999993186e-7)*x5642))+((x5631*x5633))+(((-1.0)*px))+(((-1.0)*r00*x5646))+(((-1.0)*r00*x5645))+(((-1.0)*r01*x5632))+((x5657*x5660)));
evalcond[5]=((((0.001538)*sj0))+((r11*x5638))+(((-1.0)*r11*x5632))+(((-1.0)*r10*x5646))+(((-1.0)*r10*x5645))+((cj0*x5656))+(((-0.52362)*x5637))+(((-1.36279999993186e-7)*x5650))+(((-1.0)*py))+(((-1.0)*x5637*x5660))+((x5633*x5634))+(((-0.391671)*cj0*x5658))+((cj4*r11*x5640)));
evalcond[6]=(x5658+(((-1.0)*r20*x5663))+((sj1*x5628))+(((-1.0)*x5635*x5636))+(((-1.0)*cj4*x5641*x5652))+((x5641*x5648))+((x5644*x5654))+((sj3*x5629*x5655))+(((-1.0)*x5648*x5649))+(((-1.0)*cj4*x5636*x5644))+((cj4*x5635*x5654))+((cj3*r21*x5629)));
evalcond[7]=((((-1.0)*r00*x5663))+(((-1.0)*x5642*x5649))+((sj3*x5629*x5631))+(((-0.99999999995)*x5630*x5653))+((r01*sj3*x5644))+((x5627*x5657))+((x5641*x5642))+(((-1.0)*sj5*x5631*x5641))+((x5629*x5630))+(((-1.0)*cj3*r00*x5635))+(((-1.0)*cj1*sj0*x5659))+((sj3*x5635*x5639)));
evalcond[8]=(((cj3*r11*x5629))+((sj3*x5629*x5634))+((x5641*x5650))+(((-1.0)*x5627*x5637))+(((-1.0)*x5649*x5650))+(((-1.0)*cj3*r10*x5635))+(((-1.0)*r10*x5663))+((x5643*x5644))+((cj4*x5635*x5643))+(((-1.0)*sj5*x5634*x5641))+((cj0*x5662))+(((-1.0)*r11*x5641*x5653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5664=((1.0)*sj0);
IkReal x5665=(cj1*sj4);
IkReal x5666=(r20*sj5);
IkReal x5667=(cj4*sj1);
IkReal x5668=(r00*sj5);
IkReal x5669=(sj1*sj4);
IkReal x5670=(cj1*cj4);
IkReal x5671=(cj5*x5669);
CheckValue<IkReal> x5672 = IKatan2WithCheck(IkReal((((r02*x5670))+(((-1.0)*r21*x5664*x5671))+((cj5*r01*x5665))+((x5665*x5668))+(((-1.0)*r22*x5664*x5667))+(((-1.0)*x5664*x5666*x5669)))),IkReal((((sj0*x5665*x5666))+((r02*x5667))+((cj5*r21*sj0*x5665))+((x5668*x5669))+((r01*x5671))+((r22*sj0*x5670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5672.valid){
continue;
}
CheckValue<IkReal> x5673=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x5673.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5672.value)+(((1.5707963267949)*(x5673.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x5674=IKsin(j2);
IkReal x5675=IKcos(j2);
IkReal x5676=((9.9999999995e-6)*sj5);
IkReal x5677=(cj3*r01);
IkReal x5678=(cj4*r00);
IkReal x5679=((3.9e-7)*cj5);
IkReal x5680=((1.36279999993186e-7)*sj5);
IkReal x5681=(cj4*r10);
IkReal x5682=((9.9999999995e-6)*cj5);
IkReal x5683=(cj3*r20);
IkReal x5684=(cj0*sj1);
IkReal x5685=((0.121761000001269)*sj5);
IkReal x5686=(cj4*r01);
IkReal x5687=((1.36279999993186e-7)*cj5);
IkReal x5688=((0.99999999995)*cj3);
IkReal x5689=(r02*sj4);
IkReal x5690=(r11*sj3);
IkReal x5691=((0.99999999995)*sj5);
IkReal x5692=((3.9e-7)*sj5);
IkReal x5693=((0.121761000001269)*cj5);
IkReal x5694=((1.0)*sj4);
IkReal x5695=(r22*sj4);
IkReal x5696=((9.9999999995e-6)*sj3);
IkReal x5697=(r12*sj4);
IkReal x5698=((1.0)*cj4);
IkReal x5699=(cj5*r21);
IkReal x5700=(cj4*cj5);
IkReal x5701=(r21*sj3);
IkReal x5702=(cj4*r20);
IkReal x5703=((1.92e-6)*cj1);
IkReal x5704=(sj0*sj1);
IkReal x5705=(cj1*x5674);
IkReal x5706=((1.0)*x5675);
IkReal x5707=((0.391671)*x5675);
IkReal x5708=(sj1*x5674);
IkReal x5709=(cj1*x5675);
IkReal x5710=((0.99999999995)*cj5*sj3);
evalcond[0]=((((-1.0)*x5708))+(((-1.0)*r20*sj5*x5694))+(((-1.0)*r22*x5698))+(((-1.0)*x5694*x5699))+x5709);
evalcond[1]=((((-1.0)*r02*x5698))+((sj0*x5705))+((x5675*x5704))+(((-1.0)*r00*sj5*x5694))+(((-1.0)*cj5*r01*x5694)));
evalcond[2]=((((-1.0)*r10*sj5*x5694))+(((-1.0)*cj5*r11*x5694))+(((-1.0)*cj0*x5705))+(((-1.0)*x5684*x5706))+(((-1.0)*r12*x5698)));
evalcond[3]=((((-1.36279999993186e-7)*x5695))+((cj1*x5707))+(((1.92e-6)*sj1))+(((-1.0)*pz))+((cj4*r21*x5687))+(((0.52362)*cj1))+((r21*x5685))+((x5680*x5702))+(((-1.0)*r20*x5693))+(((-1.0)*r20*x5692))+(((-0.391671)*x5708))+(((-1.0)*r21*x5679)));
evalcond[4]=((((0.001538)*cj0))+(((-1.36279999993186e-7)*x5689))+((x5686*x5687))+(((0.52362)*x5704))+(((-1.0)*r01*x5679))+(((-1.0)*px))+(((0.391671)*sj0*x5705))+(((-1.0)*sj0*x5703))+((x5678*x5680))+(((-1.0)*r00*x5692))+(((-1.0)*r00*x5693))+((r01*x5685))+((x5704*x5707)));
evalcond[5]=((((0.001538)*sj0))+(((-1.36279999993186e-7)*x5697))+(((-0.52362)*x5684))+(((-0.391671)*cj0*x5705))+((cj4*r11*x5687))+((x5680*x5681))+(((-1.0)*r11*x5679))+(((-1.0)*r10*x5692))+(((-1.0)*r10*x5693))+(((-1.0)*py))+(((-1.0)*x5684*x5707))+((r11*x5685))+((cj0*x5703)));
evalcond[6]=(((sj3*x5676*x5702))+(((-1.0)*cj4*x5688*x5699))+((cj4*x5682*x5701))+((sj1*x5675))+(((-1.0)*r20*x5710))+((x5688*x5695))+(((-1.0)*x5682*x5683))+((cj3*r21*x5676))+(((-1.0)*cj4*x5683*x5691))+(((-1.0)*x5695*x5696))+x5705+((x5691*x5701)));
evalcond[7]=((((-1.0)*r00*x5710))+((sj3*x5676*x5678))+((x5676*x5677))+(((-1.0)*cj3*r00*x5682))+(((-1.0)*cj1*sj0*x5706))+(((-1.0)*x5689*x5696))+((x5688*x5689))+((sj3*x5682*x5686))+(((-0.99999999995)*x5677*x5700))+((x5674*x5704))+((r01*sj3*x5691))+(((-1.0)*sj5*x5678*x5688)));
evalcond[8]=((((-1.0)*r11*x5688*x5700))+((cj3*r11*x5676))+(((-1.0)*x5674*x5684))+(((-1.0)*sj5*x5681*x5688))+((cj4*x5682*x5690))+(((-1.0)*x5696*x5697))+((x5690*x5691))+(((-1.0)*r10*x5710))+(((-1.0)*cj3*r10*x5682))+((sj3*x5676*x5681))+((x5688*x5697))+((cj0*x5709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - rover_arm (baf8e38c4faf7aad8d368ec86b11ccac)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
